class TBD2: # pragma: no cover
 # pragma: no cover
    def __init__(self, *args, **kwargs): # pragma: no cover
        pass # pragma: no cover
 # pragma: no cover
class TBD1: # pragma: no cover
 # pragma: no cover
    def __init__(self, *args, **kwargs): # pragma: no cover
        pass # pragma: no cover
 # pragma: no cover
class TBD0: # pragma: no cover
 # pragma: no cover
    def __init__(self, *args, **kwargs): # pragma: no cover
        pass # pragma: no cover
 # pragma: no cover
    def write(self, arg0): # pragma: no cover
        return TBD1() # pragma: no cover
 # pragma: no cover
    def read_until(self, arg0): # pragma: no cover
        return TBD2() # pragma: no cover
tn = TBD0() # pragma: no cover
import traceback # pragma: no cover
__original_start_marker = None # pragma: no cover
try:
    tn = Telnet(host, str(port))
except Exception as e:
    print('Connection cannot be established', e)
    traceback.print_exc()
print('You are connected')
tn.write('command?' + '\r\n')
while True:
    line = tn.read_until('\n')