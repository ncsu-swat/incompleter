class TBD3: # pragma: no cover
 # pragma: no cover
    def __init__(self, *args, **kwargs): # pragma: no cover
        pass # pragma: no cover
 # pragma: no cover
class TBD2: # pragma: no cover
 # pragma: no cover
    def __init__(self, *args, **kwargs): # pragma: no cover
        pass # pragma: no cover
 # pragma: no cover
    def __call__(self, *args, **kwargs): # pragma: no cover
        return TBD3() # pragma: no cover
 # pragma: no cover
class TBD1: # pragma: no cover
 # pragma: no cover
    def __init__(self, *args, **kwargs): # pragma: no cover
        pass # pragma: no cover
 # pragma: no cover
    def __call__(self, arg0, namespace=None): # pragma: no cover
        return TBD2() # pragma: no cover
 # pragma: no cover
class TBD0: # pragma: no cover
 # pragma: no cover
    def __init__(self, *args, **kwargs): # pragma: no cover
        self.on = TBD1() # pragma: no cover
        pass # pragma: no cover
 # pragma: no cover
def SocketIO(arg0): # pragma: no cover
    return TBD0() # pragma: no cover
__original_start_marker = None # pragma: no cover
from gevent import monkey
from flask import Flask, render_template, request
monkey.patch_all()
app = Flask(__name__)
socketio = SocketIO(app)

@app.route('/')
def main():
    return render_template('main.html')

@socketio.on('connect', namespace='/dd')
def ws_conn():
    socketio.emit('msg', {'count': 1}, namespace='/dd')

@socketio.on('disconnect', namespace='/dd')
def ws_disconn():
    print('Disconnected')
if __name__ == '__main__':
    socketio.run(app, '0.0.0.0', port=80)