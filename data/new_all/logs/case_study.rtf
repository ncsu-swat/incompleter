{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\fs26 \cf0 Limitations:\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	1.	}Deprecated code on StackOverflow - we can't handle but then it's out of scope (chunk1/snippet_341.py.orig) (chunk1/snippet_137.py.orig)\
{\listtext	2.	}Buggy code on StackOverflow - we can't handle but then code repair is out of scope (lexecutor_all/snippet_160.py.orig)\
{\listtext	3.	}Authors of some snippets might intentionally inject fault in the snippets to demonstrate some code concepts (chunk1/snippet_736.py.orig) (lexecutor_all/snippet_391.py.orig)\
{\listtext	4.	}Question of generality --> we are still outperforming Lexecutor on the larger dataset\
{\listtext	5.	}Snippets containing windows-styled paths are not considered since we ran our experiments on a Unix-based machine.\
{\listtext	6.	}Some code snippets have infinite loops (e.g. while True: ...), input requirements from user which times out the execution. (chunk1/snippet_378.py.orig)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab560\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \
Case Study:\
1. snippet 100: \
	a. incompleter imports os and glob\
	b. lexecutor predicts those and more as objects unnecessarily\
2. snippet 102\
	a. incompleter predicts "keys" and "dict" as dictionaries\
	b. lexecutor predicts "keys" as object -> snippet stopped at TypeError\
3. snippet 303\
	a. incompleter predicts a, b, c as objects\
	b. lexecutor predicts a as string, b as tuple, c as string\
4. snippet 121\
	a. incompleter gets stuck with an import error\
	b. lexecutor (sneakily) bypasses the same import error and gets a false positive execution\
5. snippet 131\
	a. incompleter executes more lines of code. The error "package must be a string" does not include any TBD reference which deters incompleter from successfully executing the snippet.\
	b. lexecutor gets stuck way early with a TypeError\
6. snippet 299\
	a. incompleter imports sys\
	b. lexecutor predicts that are object and more as objects unnecessarily\
7. snippet 292\
	a. incompleter predicts s1 as object (hopefully will become a list with Adam's update), i as an object\
	b. lexecutor predicts s1 as a list, i as an integer (whereas from looking at the snippet, i could be anything)
\f0\fs26 \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\fs24 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab560\pardirnatural\partightenfactor0
\cf0 \
*****\
Dataset 3:\
\
Chunk1:\
	Lexecutor Type Inference Accuracy: 85%\
\
*****\
\
}