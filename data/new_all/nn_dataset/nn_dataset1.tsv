original_snippet	mocked_snippet	var	tbd	type
"""import pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nTotal number of missing values of the said DataFrame:')\nresult = df.isna().sum().sum()\nprint(result)"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def sum(self):\n        return TBD3()\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def sum(self):\n        return TBD2()\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def isna(self):\n        return TBD1()\ndf = TBD0()\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nTotal number of missing values of the said DataFrame:')\nresult = df.isna().sum().sum()\nprint(result)"""	df	TBD0	DataFrame
"""weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nfor d in days:\n    print(d)"""	"""days = {}\n__original_start_marker = None\nweekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nfor d in days:\n    print(d)"""	days	TBD1	filter
"""def same_order(l1, l2):\n    common_elements = set(l1) & set(l2)\n    l1 = [e for e in l1 if e in common_elements]\n    l2 = [e for e in l2 if e in common_elements]\n    return l1 == l2\ncolor1 = ['red', 'green', 'black', 'orange']\ncolor2 = ['red', 'pink', 'green', 'white', 'black']\nprint('Original lists:')\nprint(color1)\nprint(color2)\nprint(color3)\nprint('\\nTest common elements between color1 and color2 are in same order?')\nprint(same_order(color1, color2))\nprint('\\nTest common elements between color1 and color3 are in same order?')\nprint(same_order(color1, color3))\nprint('\\nTest common elements between color2 and color3 are in same order?')\nprint(same_order(color2, color3))"""	"""color3 = {}\n__original_start_marker = None\n\ndef same_order(l1, l2):\n    common_elements = (set(l1) & set(l2))\n    l1 = [e for e in l1 if (e in common_elements)]\n    l2 = [e for e in l2 if (e in common_elements)]\n    return (l1 == l2)\ncolor1 = ['red', 'green', 'black', 'orange']\ncolor2 = ['red', 'pink', 'green', 'white', 'black']\nprint('Original lists:')\nprint(color1)\nprint(color2)\nprint(color3)\nprint('\\nTest common elements between color1 and color2 are in same order?')\nprint(same_order(color1, color2))\nprint('\\nTest common elements between color1 and color3 are in same order?')\nprint(same_order(color1, color3))\nprint('\\nTest common elements between color2 and color3 are in same order?')\nprint(same_order(color2, color3))"""	color3	TBD2	list
"""from array import array\ndef array_sum(nums_arr):\n    sum_n = 0\n    for n in nums_arr:\n        sum_n += n\n    return sum_n\nprint('Original array:', nums)\nnums_arr = list(map(int, nums))\nresult = array_sum(nums_arr)\nprint('Sum of all elements of the said array:')\nprint(result)"""	"""nums = {}\n__original_start_marker = None\nfrom array import array\n\ndef array_sum(nums_arr):\n    sum_n = 0\n    for n in nums_arr:\n        sum_n += n\n    return sum_n\nprint('Original array:', nums)\nnums_arr = list(map(int, nums))\nresult = array_sum(nums_arr)\nprint('Sum of all elements of the said array:')\nprint(result)"""	nums	TBD0	array
"""import numpy as np\nnums = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nprint('Original array:')\nprint(nums)\np = 2\nnew_nums[::p + 1] = nums\nprint('\\nNew array:')\nprint(new_nums)"""	"""class TBD1():\n\n    def __init__(self):\n        self.container = {}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\nnew_nums = TBD1()\n__original_start_marker = None\nimport numpy as np\nnums = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nprint('Original array:')\nprint(nums)\np = 2\nnew_nums[::(p + 1)] = nums\nprint('\\nNew array:')\nprint(new_nums)"""	new_nums	TBD1	ndarray
'print(str1)\nprint(str1.rstrip())'	'class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def rstrip(self):\n        return TBD1()\nstr1 = TBD0()\n__original_start_marker = None\nprint(str1)\nprint(str1.rstrip())'	str1	TBD0	str
"""def extract_nth_element(test_list, n):\n    result = list(map(lambda x: x[n], test_list))\n    return result\nprint('Original list:')\nprint(students)\nn = 0\nprint('\\nExtract nth element ( n =', n, ') from the said list of tuples:')\nprint(extract_nth_element(students, n))\nn = 2\nprint('\\nExtract nth element ( n =', n, ') from the said list of tuples:')\nprint(extract_nth_element(students, n))"""	"""students = {}\n__original_start_marker = None\n\ndef extract_nth_element(test_list, n):\n    result = list(map((lambda x: x[n]), test_list))\n    return result\nprint('Original list:')\nprint(students)\nn = 0\nprint('\\nExtract nth element ( n =', n, ') from the said list of tuples:')\nprint(extract_nth_element(students, n))\nn = 2\nprint('\\nExtract nth element ( n =', n, ') from the said list of tuples:')\nprint(extract_nth_element(students, n))"""	students	TBD0	list
"""def extract_index_ele(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if m == n == o:\n            result.append(m)\n    return result\nnums2 = [0, 1, 2, 3, 4, 5, 7]\nnums3 = [0, 1, 2, 3, 4, 5, 7]\nprint('Original lists:')\nprint(nums1)\nprint(nums2)\nprint(nums3)\nprint('\\nCommon index elements of the said lists:')\nprint(extract_index_ele(nums1, nums2, nums3))"""	"""nums1 = {}\n__original_start_marker = None\n\ndef extract_index_ele(l1, l2, l3):\n    result = {}\n    for (m, n, o) in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nnums2 = [0, 1, 2, 3, 4, 5, 7]\nnums3 = [0, 1, 2, 3, 4, 5, 7]\nprint('Original lists:')\nprint(nums1)\nprint(nums2)\nprint(nums3)\nprint('\\nCommon index elements of the said lists:')\nprint(extract_index_ele(nums1, nums2, nums3))"""	nums1	TBD3	list
"""from bisect import bisect_left\ndef Binary_Search(l, x):\n    i = bisect_left(l, x)\n    if i:\n        return i - 1\n    else:\n        return -1\nnums = [1, 2, 3, 4, 8, 8, 10, 12]\nnum_position = Binary_Search(nums, x)\nif num_position == -1:\n    print('Not found..!')\nelse:\n    print('Largest value smaller than ', x, ' is at index ', num_position)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = 0\n__original_start_marker = None\nfrom bisect import bisect_left\n\ndef Binary_Search(l, x):\n    i = bisect_left(l, x)\n    if i:\n        return (i - 1)\n    else:\n        return (- 1)\nnums = [1, 2, 3, 4, 8, 8, 10, 12]\nnum_position = Binary_Search(nums, x)\nif (num_position == (- 1)):\n    print('Not found..!')\nelse:\n    print('Largest value smaller than ', x, ' is at index ', num_position)"""	x	TBD1	int
"""L = [11, 33, 50]\nprint('Original List: ', L)\nprint('Single Integer: ', x)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = TBD1()\n__original_start_marker = None\nL = [11, 33, 50]\nprint('Original List: ', L)\nprint('Single Integer: ', x)"""	x	TBD1	int
"""def inset_element_list(lst, x, n):\n    i = n\n    while i < len(lst):\n        lst.insert(i, x)\n        i += n + 1\n    return lst\nnums = [1, 3, 5, 7, 9, 11, 0, 2, 4, 6, 8, 10, 8, 9, 0, 4, 3, 0]\nprint('Original list:')\nprint(nums)\nn = 4\nprint('\\nInsert', x, 'in said list after every', n, 'th element:')\nprint(inset_element_list(nums, x, n))\nchars = ['s', 'd', 'f', 'j', 's', 'a', 'j', 'd', 'f', 'd']\nprint('\\nOriginal list:')\nprint(chars)\nx = 'Z'\nn = 3\nprint('\\nInsert', x, 'in said list after every', n, 'th element:')\nprint(inset_element_list(chars, x, n))"""	"""class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = TBD2()\n__original_start_marker = None\n\ndef inset_element_list(lst, x, n):\n    i = n\n    while (i < len(lst)):\n        lst.insert(i, x)\n        i += (n + 1)\n    return lst\nnums = [1, 3, 5, 7, 9, 11, 0, 2, 4, 6, 8, 10, 8, 9, 0, 4, 3, 0]\nprint('Original list:')\nprint(nums)\nn = 4\nprint('\\nInsert', x, 'in said list after every', n, 'th element:')\nprint(inset_element_list(nums, x, n))\nchars = ['s', 'd', 'f', 'j', 's', 'a', 'j', 'd', 'f', 'd']\nprint('\\nOriginal list:')\nprint(chars)\nx = 'Z'\nn = 3\nprint('\\nInsert', x, 'in said list after every', n, 'th element:')\nprint(inset_element_list(chars, x, n))"""	x	TBD2	int
"""print(sum((d['id'] for d in student)))\nprint(sum((d['success'] for d in student)))"""	"""student = {}\n__original_start_marker = None\nprint(sum((d['id'] for d in student)))\nprint(sum((d['success'] for d in student)))"""	student	TBD0	list
'import numpy as np\nx = np.array([2, 3])\nprint(x.size)\nprint(y.size)'	'class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        self.size = TBD2()\n        pass\ny = TBD1()\n__original_start_marker = None\nimport numpy as np\nx = np.array([2, 3])\nprint(x.size)\nprint(y.size)'	y	TBD1	ndarray
"""def interleave_multiple_lists(list1, list2, list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nlist2 = [10, 20, 30, 40, 50, 60, 70]\nlist3 = [100, 200, 300, 400, 500, 600, 700]\nprint('Original list:')\nprint('list1:', list1)\nprint('list2:', list2)\nprint('list3:', list3)\nprint('\\nInterleave multiple lists:')\nprint(interleave_multiple_lists(list1, list2, list3))"""	"""list1 = {}\n__original_start_marker = None\n\ndef interleave_multiple_lists(list1, list2, list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nlist2 = [10, 20, 30, 40, 50, 60, 70]\nlist3 = [100, 200, 300, 400, 500, 600, 700]\nprint('Original list:')\nprint('list1:', list1)\nprint('list2:', list2)\nprint('list3:', list3)\nprint('\\nInterleave multiple lists:')\nprint(interleave_multiple_lists(list1, list2, list3))"""	list1	TBD2	list
"""import pandas as pd\nfrom pandas.tseries.offsets import *\nimport datetime\nfrom datetime import datetime, date\ndt = datetime(2020, 1, 4)\nprint('Specified date:')\nprint(dt)\nprint('\\nOne business day from the said date:')\nobday = dt + BusinessDay()\nprint(obday)\nprint('\\nTwo business days from the said date:')\ntbday = dt + 2 * BusinessDay()\nprint(tbday)\nprint('\\nThree business days from the said date:')\nthbday = dt + 3 * BusinessDay()\nprint(thbday)\nprint('\\nNext business month end from the said date:')\nprint(nbday)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnbday = TBD0()\n__original_start_marker = None\nimport pandas as pd\nfrom pandas.tseries.offsets import *\nimport datetime\nfrom datetime import datetime, date\ndt = datetime(2020, 1, 4)\nprint('Specified date:')\nprint(dt)\nprint('\\nOne business day from the said date:')\nobday = (dt + BusinessDay())\nprint(obday)\nprint('\\nTwo business days from the said date:')\ntbday = (dt + (2 * BusinessDay()))\nprint(tbday)\nprint('\\nThree business days from the said date:')\nthbday = (dt + (3 * BusinessDay()))\nprint(thbday)\nprint('\\nNext business month end from the said date:')\nprint(nbday)"""	nbday	TBD0	Timestamp
"""def cyclically_iteration(lst, spec_index):\n    result = []\n    length = len(lst)\n    for i in range(length):\n        element_index = spec_index % length\n        result.append(lst[element_index])\n        spec_index += 1\n    return result\nprint('Original list:')\nprint(chars)\nspec_index = 3\nprint('\\nIterate the said  list cyclically on specific index position', spec_index, ':')\nprint(cyclically_iteration(chars, spec_index))\nspec_index = 5\nprint('\\nIterate the said  list cyclically on specific index position', spec_index, ':')\nprint(cyclically_iteration(chars, spec_index))"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __len__(self):\n        return 0\nchars = TBD1()\n__original_start_marker = None\n\ndef cyclically_iteration(lst, spec_index):\n    result = {}\n    length = len(lst)\n    for i in range(length):\n        element_index = (spec_index % length)\n        result.append(lst[element_index])\n        spec_index += 1\n    return result\nprint('Original list:')\nprint(chars)\nspec_index = 3\nprint('\\nIterate the said  list cyclically on specific index position', spec_index, ':')\nprint(cyclically_iteration(chars, spec_index))\nspec_index = 5\nprint('\\nIterate the said  list cyclically on specific index position', spec_index, ':')\nprint(cyclically_iteration(chars, spec_index))"""	chars	TBD1	list
"""def cast_list(val):\n    return list(val) if isinstance(val, (tuple, list, set, dict)) else [val]\nd1 = [1]\nprint(type(d1))\nprint(cast_list(d1))\nd2 = ('Red', 'Green')\nprint(type(d2))\nprint(cast_list(d2))\nprint(type(d3))\nprint(cast_list(d3))\nd4 = {1: 'Red', 2: 'Green', 3: 'Black'}\nprint(type(d4))\nprint(cast_list(d4))"""	"""class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\nd3 = TBD4()\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\nval = TBD3()\n__original_start_marker = None\n\ndef cast_list(val):\n    return (list(val) if isinstance(val, (tuple, list, set, dict)) else [val])\nd1 = [1]\nprint(type(d1))\nprint(cast_list(d1))\nd2 = ('Red', 'Green')\nprint(type(d2))\nprint(cast_list(d2))\nprint(type(d3))\nprint(cast_list(d3))\nd4 = ['Red', 'Green', 'Black']\nprint(type(d4))\nprint(cast_list(d4))"""	d3	TBD4	set
'import numpy as np\nprint(x)\nx = np.round([0.28, 0.5, 0.64], decimals=1)\nprint(x)\nx = np.round([0.5, 1.5, 2.5, 3.5, 4.5])\nprint(x)'	'class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = TBD2()\n__original_start_marker = None\nimport numpy as np\nprint(x)\nx = np.round([0.28, 0.5, 0.64], decimals=1)\nprint(x)\nx = np.round([0.5, 1.5, 2.5, 3.5, 4.5])\nprint(x)'	x	TBD2	ndarray
"""import numpy as np\nq = np.array([10, 11, 12])\nprint('Original arrays:')\nprint('Array-1')\nprint(p)\nprint('Array-2')\nprint(q)\nprint('\\nNew Array:')\nnew_array1 = p + q\nprint(new_array1)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\np = 0\n__original_start_marker = None\nimport numpy as np\nq = np.array([10, 11, 12])\nprint('Original arrays:')\nprint('Array-1')\nprint(p)\nprint('Array-2')\nprint(q)\nprint('\\nNew Array:')\nnew_array1 = (p + q)\nprint(new_array1)"""	p	TBD1	ndarray
"""color2 = ('Black', 'Green', 'White', 'Pink')\nprint(set(color1) & set(color2))"""	"""color1 = {}\n__original_start_marker = None\ncolor2 = ('Black', 'Green', 'White', 'Pink')\nprint((set(color1) & set(color2)))"""	color1	TBD0	tuple
"""import numpy as np\na = np.array([[4, 12, -16], [12, 37, -53], [-16, -53, 98]], dtype=np.int32)\nprint('Original array:')\nprint(a)\nprint('Lower-trianglular L in the Cholesky decomposition of the said array:')\nprint(L)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nL = TBD1()\n__original_start_marker = None\nimport numpy as np\na = np.array([[4, 12, (- 16)], [12, 37, (- 53)], [(- 16), (- 53), 98]], dtype=np.int32)\nprint('Original array:')\nprint(a)\nprint('Lower-trianglular L in the Cholesky decomposition of the said array:')\nprint(L)"""	L	TBD1	ndarray
"""from numpy.polynomial import polynomial as P\ny = (30, 40, 50)\nprint('Add one polynomial to another:')\nprint(P.polyadd(x, y))\nprint('Subtract one polynomial from another:')\nprint(P.polysub(x, y))\nprint('Multiply one polynomial by another:')\nprint(P.polymul(x, y))\nprint('Divide one polynomial by another:')\nprint(P.polydiv(x, y))"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = 0\n__original_start_marker = None\nfrom numpy.polynomial import polynomial as P\ny = (30, 40, 50)\nprint('Add one polynomial to another:')\nprint(P.polyadd(x, y))\nprint('Subtract one polynomial from another:')\nprint(P.polysub(x, y))\nprint('Multiply one polynomial by another:')\nprint(P.polymul(x, y))\nprint('Divide one polynomial by another:')\nprint(P.polydiv(x, y))"""	x	TBD0	tuple
"""import random\nimport os\nprint('Select a random element from a list:')\nelements = [1, 2, 3, 4, 5]\nprint(random.choice(elements))\nprint(random.choice(elements))\nprint(random.choice(elements))\nprint('\\nSelect a random element from a set:')\nelements = set([1, 2, 3, 4, 5])\nprint(random.choice(tuple(elements)))\nprint(random.choice(tuple(elements)))\nprint(random.choice(tuple(elements)))\nprint('\\nSelect a random value from a dictionary:')\nd = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nprint(d[key])\nkey = random.choice(list(d))\nprint(d[key])\nkey = random.choice(list(d))\nprint(d[key])\nprint('\\nSelect a random file from a directory.:')\nprint(random.choice(os.listdir('/')))"""	"""class TBD6():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD5():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\nkey = TBD3()\n\nclass TBD2():\n\n    def __init__(self):\n        self.container = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'TBD3': TBD3(), 5: TBD4(), 'TBD3': TBD3(), 2: TBD5(), 'TBD3': TBD3(), 3: TBD6(), 'TBD3': TBD3()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n__original_start_marker = None\nimport random\nimport os\nprint('Select a random element from a list:')\nelements = [1, 2, 3, 4, 5]\nprint(random.choice(elements))\nprint(random.choice(elements))\nprint(random.choice(elements))\nprint('\\nSelect a random element from a set:')\nelements = set([1, 2, 3, 4, 5])\nprint(random.choice(tuple(elements)))\nprint(random.choice(tuple(elements)))\nprint(random.choice(tuple(elements)))\nprint('\\nSelect a random value from a dictionary:')\nd = TBD2()\nprint(d[key])\nkey = random.choice(list(d))\nprint(d[key])\nkey = random.choice(list(d))\nprint(d[key])\nprint('\\nSelect a random file from a directory.:')\nprint(random.choice(os.listdir('/')))"""	key	TBD3	str
'import numpy as np\na = [[1, 2], [3, 4]]\na2 = x.tolist()\nprint(a == a2)'	'class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def tolist(self):\n        return TBD2()\nx = TBD1()\n__original_start_marker = None\nimport numpy as np\na = [[1, 2], [3, 4]]\na2 = x.tolist()\nprint((a == a2))'	x	TBD1	ndarray
"""nums1 = [1, 2, 3]\nprint('Original list:')\nprint(nums1)\nprint(nums2)\nresult = map(lambda x, y: x + y, nums1, nums2)\nprint('\\nResult: after adding two list')\nprint(list(result))"""	"""nums2 = {}\n__original_start_marker = None\nnums1 = [1, 2, 3]\nprint('Original list:')\nprint(nums1)\nprint(nums2)\nresult = map((lambda x, y: (x + y)), nums1, nums2)\nprint('\\nResult: after adding two list')\nprint(list(result))"""	nums2	TBD1	list
"""import numpy as np\nprint('Original matrix:\\n')\nX = np.random.rand(5, 10)\nprint(X)\nprint('\\nSubtract the mean of each row of the said matrix:\\n')\nprint(Y)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nY = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Original matrix:\\n')\nX = np.random.rand(5, 10)\nprint(X)\nprint('\\nSubtract the mean of each row of the said matrix:\\n')\nprint(Y)"""	Y	TBD0	ndarray
"""import pandas as pd\nprint('Original Data Series:')\nprint(s)\nprint('\\nSubset of the above Data Series:')\nn = 6\nnew_s = s[s < n]\nprint(new_s)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0(int):\n\n    def __init__(self):\n        self.container = {'TBD2': TBD2()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n\n    def __lt__(self, other):\n        return TBD2()\ns = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Original Data Series:')\nprint(s)\nprint('\\nSubset of the above Data Series:')\nn = 6\nnew_s = s[(s < n)]\nprint(new_s)"""	s	TBD0	Series
"""def combination(n, n_list):\n    if n <= 0:\n        yield []\n        return\n    for i in range(len(n_list)):\n        c_num = n_list[i:i + 1]\n        for a_num in combination(n - 1, n_list[i + 1:]):\n            yield (c_num + a_num)\nn_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint('Original list:')\nprint(n_list)\nn = 2\nprint('\\nCombinations of', n, 'distinct objects:')\nfor e in result:\n    print(e)"""	"""result = {}\n__original_start_marker = None\n\ndef combination(n, n_list):\n    if (n <= 0):\n        (yield {})\n        return\n    for i in range(len(n_list)):\n        c_num = n_list[i:(i + 1)]\n        for a_num in combination((n - 1), n_list[(i + 1):]):\n            (yield (c_num + a_num))\nn_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint('Original list:')\nprint(n_list)\nn = 2\nprint('\\nCombinations of', n, 'distinct objects:')\nfor e in result:\n    print(e)"""	result	TBD2	generator
"""import itertools\nnum = [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]\nprint('Original List', num)\nnum.sort()\nprint('New List', new_num)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnew_num = TBD2()\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n__original_start_marker = None\nimport itertools\nnum = [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]\nprint('Original List', num)\nnum.sort()\nprint('New List', new_num)"""	new_num	TBD2	list
"""import pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\ndf = pd.DataFrame({'ord_no': [70001, np.nan, 70002, 70004, np.nan, 70005, '--', 70010, 70003, 70012, np.nan, 70013], 'purch_amt': [150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, '?', 12.43, 2480.4, 250.45, 3045.6], 'ord_date': ['?', '2012-09-10', np.nan, '2012-08-17', '2012-09-10', '2012-07-27', '2012-09-10', '2012-10-10', '2012-10-10', '2012-06-27', '2012-08-17', '2012-04-25'], 'customer_id': [3002, 3001, 3001, 3003, 3002, 3001, 3001, 3004, '--', 3002, 3001, 3001], 'salesman_id': [5002, 5003, '?', 5001, np.nan, 5002, 5001, '?', 5003, 5002, 5003, '--']})\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nReplace the missing values with NaN:')\nprint(result)"""	"""class TBD6():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD6()\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\ndf = pd.DataFrame({'ord_no': [70001, np.nan, 70002, 70004, np.nan, 70005, '--', 70010, 70003, 70012, np.nan, 70013], 'purch_amt': [150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, '?', 12.43, 2480.4, 250.45, 3045.6], 'ord_date': ['?', '2012-09-10', np.nan, '2012-08-17', '2012-09-10', '2012-07-27', '2012-09-10', '2012-10-10', '2012-10-10', '2012-06-27', '2012-08-17', '2012-04-25'], 'customer_id': [3002, 3001, 3001, 3003, 3002, 3001, 3001, 3004, '--', 3002, 3001, 3001], 'salesman_id': [5002, 5003, '?', 5001, np.nan, 5002, 5001, '?', 5003, 5002, 5003, '--']})\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nReplace the missing values with NaN:')\nprint(result)"""	result	TBD6	DataFrame
"""def test(lsts, key):\n    return [x.get(key) for x in lsts]\nprint('Original list of dictionaries:')\nprint(students)\nprint('\\nConvert a list of dictionaries into a list of values corresponding to the specified key:')\nprint(test(students, 'age'))"""	"""students = {}\n__original_start_marker = None\n\ndef test(lsts, key):\n    return [x.get(key) for x in lsts]\nprint('Original list of dictionaries:')\nprint(students)\nprint('\\nConvert a list of dictionaries into a list of values corresponding to the specified key:')\nprint(test(students, 'age'))"""	students	TBD0	list
"""def diff_consecutive_nums(nums):\n    result = [b - a for a, b in zip(nums[:-1], nums[1:])]\n    return result\nprint('Original list:')\nprint(nums1)\nprint('Difference between consecutive numbers of the said list:')\nprint(diff_consecutive_nums(nums1))\nnums2 = [4, 5, 8, 9, 6, 10]\nprint('\\nOriginal list:')\nprint(nums2)\nprint('Difference between consecutive numbers of the said list:')\nprint(diff_consecutive_nums(nums2))"""	"""class TBD1():\n\n    def __init__(self):\n        self.container = {}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\nnums1 = TBD1()\n__original_start_marker = None\n\ndef diff_consecutive_nums(nums):\n    result = [(b - a) for (a, b) in zip(nums[:(- 1)], nums[1:])]\n    return result\nprint('Original list:')\nprint(nums1)\nprint('Difference between consecutive numbers of the said list:')\nprint(diff_consecutive_nums(nums1))\nnums2 = [4, 5, 8, 9, 6, 10]\nprint('\\nOriginal list:')\nprint(nums2)\nprint('Difference between consecutive numbers of the said list:')\nprint(diff_consecutive_nums(nums2))"""	nums1	TBD1	list
"""def unique_sublists(input_list):\n    result = {}\n    for l in input_list:\n        result.setdefault(tuple(l), list()).append(1)\n    for a, b in result.items():\n        result[a] = sum(b)\n    return result\nlist1 = [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]\nprint('Original list:')\nprint(list1)\nprint('Number of unique lists of the said list:')\nprint(unique_sublists(list1))\nprint('\\nOriginal list:')\nprint(color1)\nprint('Number of unique lists of the said list:')\nprint(unique_sublists(color1))"""	"""color1 = {}\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n__original_start_marker = None\n\ndef unique_sublists(input_list):\n    result = {}\n    for l in input_list:\n        result.setdefault(tuple(l), list()).append(1)\n    for (a, b) in result.items():\n        result[a] = sum(b)\n    return result\nlist1 = [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]\nprint('Original list:')\nprint(list1)\nprint('Number of unique lists of the said list:')\nprint(unique_sublists(list1))\nprint('\\nOriginal list:')\nprint(color1)\nprint('Number of unique lists of the said list:')\nprint(unique_sublists(color1))"""	color1	TBD5	list
"""x = 30\nprint('\\n%d+%d=%d' % (x, y, x + y))\nprint()"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\ny = 0\n__original_start_marker = None\nx = 30\nprint(('\\n%d+%d=%d' % (x, y, (x + y))))\nprint()"""	y	TBD0	int
"""from itertools import groupby\ndef extract_elements(nums, n):\n    result = [i for i, j in groupby(nums) if len(list(j)) == n]\n    return result\nn = 2\nprint('Original list:')\nprint(nums1)\nprint('Extract 2 number of elements from the said list which follows each other continuously:')\nprint(extract_elements(nums1, n))\nnums2 = [0, 1, 2, 3, 4, 4, 4, 4, 5, 7]\nn = 4\nprint('Original lists:')\nprint(nums2)\nprint('Extract 4 number of elements from the said list which follows each other continuously:')\nprint(extract_elements(nums2, n))"""	"""nums1 = {}\n__original_start_marker = None\nfrom itertools import groupby\n\ndef extract_elements(nums, n):\n    result = [i for (i, j) in groupby(nums) if (len(list(j)) == n)]\n    return result\nn = 2\nprint('Original list:')\nprint(nums1)\nprint('Extract 2 number of elements from the said list which follows each other continuously:')\nprint(extract_elements(nums1, n))\nnums2 = [0, 1, 2, 3, 4, 4, 4, 4, 5, 7]\nn = 4\nprint('Original lists:')\nprint(nums2)\nprint('Extract 4 number of elements from the said list which follows each other continuously:')\nprint(extract_elements(nums2, n))"""	nums1	TBD1	list
"""print('Orginal list:')\nprint(nums)\nresult = list(filter(lambda x: x % 19 == 0 or x % 13 == 0, nums))\nprint('\\nNumbers of the above list divisible by nineteen or thirteen:')\nprint(result)"""	"""nums = {}\n__original_start_marker = None\nprint('Orginal list:')\nprint(nums)\nresult = list(filter((lambda x: (((x % 19) == 0) or ((x % 13) == 0))), nums))\nprint('\\nNumbers of the above list divisible by nineteen or thirteen:')\nprint(result)"""	nums	TBD0	list
"""import numpy as np\nnp.set_printoptions(linewidth=100)\nstudent = np.array([['01', 'V', 'Debby Pramod'], ['02', 'V', 'Artemiy Ellie'], ['03', 'V', 'Baptist Kamal'], ['04', 'V', 'Lavanya Davide'], ['05', 'V', 'Fulton Antwan'], ['06', 'V', 'Euanthe Sandeep'], ['07', 'V', 'Endzela Sanda'], ['08', 'V', 'Victoire Waman'], ['09', 'V', 'Briar Nur'], ['10', 'V', 'Rose Lykos']])\nprint('Original array:')\nprint(student)\nresult = student[np.char.startswith(student[:, 2], char)]\nprint('\\nStudent name starting with', char, ':')\nprint(result)\nchar = '1'\nresult = student[np.char.startswith(student[:, 0], char)]\nprint('\\nStudent id starting with', char, ':')\nprint(result)"""	"""char = ''\n__original_start_marker = None\nimport numpy as np\nnp.set_printoptions(linewidth=100)\nstudent = np.array([['01', 'V', 'Debby Pramod'], ['02', 'V', 'Artemiy Ellie'], ['03', 'V', 'Baptist Kamal'], ['04', 'V', 'Lavanya Davide'], ['05', 'V', 'Fulton Antwan'], ['06', 'V', 'Euanthe Sandeep'], ['07', 'V', 'Endzela Sanda'], ['08', 'V', 'Victoire Waman'], ['09', 'V', 'Briar Nur'], ['10', 'V', 'Rose Lykos']])\nprint('Original array:')\nprint(student)\nresult = student[np.char.startswith(student[(:, 2)], char)]\nprint('\\nStudent name starting with', char, ':')\nprint(result)\nchar = '1'\nresult = student[np.char.startswith(student[(:, 0)], char)]\nprint('\\nStudent id starting with', char, ':')\nprint(result)"""	char	TBD1	str
"""import numpy as np\nprint('Original array')\nprint(a)\nprint('Checking for complex number:')\nprint(np.iscomplex(a))\nprint('Checking for real number:')\nprint(np.isreal(a))\nprint('Checking for scalar type:')\nprint(np.isscalar(3.1))\nprint(np.isscalar([3.1]))"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\na = TBD1()\n__original_start_marker = None\nimport numpy as np\nprint('Original array')\nprint(a)\nprint('Checking for complex number:')\nprint(np.iscomplex(a))\nprint('Checking for real number:')\nprint(np.isreal(a))\nprint('Checking for scalar type:')\nprint(np.isscalar(3.1))\nprint(np.isscalar([3.1]))"""	a	TBD1	ndarray
"""print(student.keys() >= {'class', 'name'})\nprint(student.keys() >= {'name', 'Alex'})\nprint(student.keys() >= {'roll_id', 'name'})"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __ge__(self, other):\n        return TBD2()\nstudent = {}\n__original_start_marker = None\nprint((student.keys() >= {'class', 'name'}))\nprint((student.keys() >= {'name', 'Alex'}))\nprint((student.keys() >= {'roll_id', 'name'}))"""	student	TBD0	dict
"'import pandas as pd\ndf = pd.DataFrame({\'school_code\': [\'s001\', \'s002\', \'s003\', \'s001\', \'s002\', \'s004\'], \'class\': [\'V\', \'V\', \'VI\', \'VI\', \'V\', \'VI\'], \'name\': [\'Alberto Franco\', \'Gino Mcneill\', \'Ryan Parkes\', \'Eesha Hinton\', \'Gino Mcneill\', \'David Parkes\'], \'date_of_birth\': [\'15/05/2002\', \'17/05/2002\', \'16/02/1999\', \'25/09/1998\', \'11/05/2002\', \'15/09/1997\'], \'weight\': [35, 32, 33, 30, 31, 32], \'t_id\': [\'t1\', \'t2\', \'t3\', \'t4\', \'t5\', \'t6\']})\nprint(\'Original DataFrame:\')\nprint(df)\nprint(""\\nMultiIndex using columns \'t_id\', ‘school_code’ and \'class\':"")\nprint(df1)\nprint(\'\\nConvert 1st and 3rd levels in the index frame into columns:\')\ndf2 = df1.reset_index(level=[\'t_id\', \'class\'])\nprint(df2)'"	"'class TBD9():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD8():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def reset_index(self, level=None):\n        return TBD9()\ndf1 = TBD8()\n__original_start_marker = None\nimport pandas as pd\ndf = pd.DataFrame({\'school_code\': [\'s001\', \'s002\', \'s003\', \'s001\', \'s002\', \'s004\'], \'class\': [\'V\', \'V\', \'VI\', \'VI\', \'V\', \'VI\'], \'name\': [\'Alberto Franco\', \'Gino Mcneill\', \'Ryan Parkes\', \'Eesha Hinton\', \'Gino Mcneill\', \'David Parkes\'], \'date_of_birth\': [\'15/05/2002\', \'17/05/2002\', \'16/02/1999\', \'25/09/1998\', \'11/05/2002\', \'15/09/1997\'], \'weight\': [35, 32, 33, 30, 31, 32], \'t_id\': [\'t1\', \'t2\', \'t3\', \'t4\', \'t5\', \'t6\']})\nprint(\'Original DataFrame:\')\nprint(df)\nprint(""\\nMultiIndex using columns \'t_id\', ‘school_code’ and \'class\':"")\nprint(df1)\nprint(\'\\nConvert 1st and 3rd levels in the index frame into columns:\')\ndf2 = df1.reset_index(level=[\'t_id\', \'class\'])\nprint(df2)'"	df1	TBD8	DataFrame
'import numpy as np\narra = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(arra)\nprint(result)'	'class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD1()\n__original_start_marker = None\nimport numpy as np\narra = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(arra)\nprint(result)'	result	TBD1	ndarray
"""import numpy as np\nnums = np.random.randint(0, 4, (6, 3))\nprint('Original vector:')\nprint(nums)\nnew_nums = np.logical_and.reduce(nums[:, 1:] == nums[:, :-1], axis=1)\nprint('\\nRows with unequal values:')\nprint(result)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD0()\n__original_start_marker = None\nimport numpy as np\nnums = np.random.randint(0, 4, (6, 3))\nprint('Original vector:')\nprint(nums)\nnew_nums = np.logical_and.reduce((nums[(:, 1:)] == nums[(:, :(- 1))]), axis=1)\nprint('\\nRows with unequal values:')\nprint(result)"""	result	TBD0	ndarray
"""import numpy as np\nb = np.array([4, 5])\nprint('Array a: ', a)\nprint('Array b: ', b)\nprint('a > b')\nprint(np.greater(a, b))\nprint('a >= b')\nprint(np.greater_equal(a, b))\nprint('a < b')\nprint(np.less(a, b))\nprint('a <= b')\nprint(np.less_equal(a, b))"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\na = 0\n__original_start_marker = None\nimport numpy as np\nb = np.array([4, 5])\nprint('Array a: ', a)\nprint('Array b: ', b)\nprint('a > b')\nprint(np.greater(a, b))\nprint('a >= b')\nprint(np.greater_equal(a, b))\nprint('a < b')\nprint(np.less(a, b))\nprint('a <= b')\nprint(np.less_equal(a, b))"""	a	TBD1	ndarray
"""import pandas as pd\nimport re as re\nprint('Original DataFrame:')\nprint(df)\ndef search_words(text):\n    result = re.findall('\\\\b[^\\\\d\\\\W]+\\\\b', text)\n    return ' '.join(result)\ndf['only_words'] = df['address'].apply(lambda x: search_words(x))\nprint('\\nOnly words:')\nprint(df)"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def apply(self, arg0):\n        return TBD3()\ndf = {'address': TBD1()}\n__original_start_marker = None\nimport pandas as pd\nimport re as re\nprint('Original DataFrame:')\nprint(df)\n\ndef search_words(text):\n    result = re.findall('\\\\b[^\\\\d\\\\W]+\\\\b', text)\n    return ' '.join(result)\ndf['only_words'] = df['address'].apply((lambda x: search_words(x)))\nprint('\\nOnly words:')\nprint(df)"""	df	TBD0	DataFrame
"""import string\nalphabet = set(string.ascii_lowercase)\nprint(set(input_string.lower()) >= alphabet)\ninput_string = 'The quick brown fox jumps over the lazy cat'\nprint(set(input_string.lower()) >= alphabet)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def lower(self):\n        return {}\ninput_string = TBD0()\n__original_start_marker = None\nimport string\nalphabet = set(string.ascii_lowercase)\nprint((set(input_string.lower()) >= alphabet))\ninput_string = 'The quick brown fox jumps over the lazy cat'\nprint((set(input_string.lower()) >= alphabet))"""	input_string	TBD0	str
"""import pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nTitle cases:')\ndf['company_code_title_cases'] = list(map(lambda x: x.title(), df['company_code']))\nprint(df)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self):\n        self.container = {'company_code': TBD1()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\ndf = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nTitle cases:')\ndf['company_code_title_cases'] = list(map((lambda x: x.title()), df['company_code']))\nprint(df)"""	df	TBD0	DataFrame
"""import numpy as np\narray1 = np.array([0, 10, 20, 40, 60])\nprint('Array1: ', array1)\nprint('Array2: ', array2)\nprint('Compare each element of array1 and array2')\nprint(np.in1d(array1, array2))"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\narray2 = TBD1()\n__original_start_marker = None\nimport numpy as np\narray1 = np.array([0, 10, 20, 40, 60])\nprint('Array1: ', array1)\nprint('Array2: ', array2)\nprint('Compare each element of array1 and array2')\nprint(np.in1d(array1, array2))"""	array2	TBD1	list
"""import numpy as np\narr1 = np.array([1, 2, 3, 2, 4, 6, 1, 2, 12, 0, -12, 6])\nprint('Original array:')\nprint(arr1)\nprint('Average of every consecutive triplet of elements of the said array:')\nprint(result)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD1()\n__original_start_marker = None\nimport numpy as np\narr1 = np.array([1, 2, 3, 2, 4, 6, 1, 2, 12, 0, (- 12), 6])\nprint('Original array:')\nprint(arr1)\nprint('Average of every consecutive triplet of elements of the said array:')\nprint(result)"""	result	TBD1	ndarray
"""import numpy as np\nx = np.zeros((3,), dtype='i4,f4,a40')\nx[:] = new_data\nprint(x)"""	"""new_data = 0\n__original_start_marker = None\nimport numpy as np\nx = np.zeros((3,), dtype='i4,f4,a40')\nx[:] = new_data\nprint(x)"""	new_data	TBD0	list
"'import numpy as np\nimport pandas as pd\nprint(\'Original Numpy array:\')\nprint(np_array)\nprint(\'Type: \', type(np_array))\ndf = pd.DataFrame(np.random.rand(12, 3), columns=[\'A\', \'B\', \'C\'])\nprint(""\\nPanda\'s DataFrame: "")\nprint(df)\nprint(\'Type: \', type(df))'"	"'class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnp_array = TBD1()\n__original_start_marker = None\nimport numpy as np\nimport pandas as pd\nprint(\'Original Numpy array:\')\nprint(np_array)\nprint(\'Type: \', type(np_array))\ndf = pd.DataFrame(np.random.rand(12, 3), columns=[\'A\', \'B\', \'C\'])\nprint(""\\nPanda\'s DataFrame: "")\nprint(df)\nprint(\'Type: \', type(df))'"	np_array	TBD1	ndarray
"""from array import *\nnum_list = [1, 2, 6, -8]\nprint('Items in the list: ' + str(num_list))\nprint('Append items from the list: ')\narray_num.fromlist(num_list)\nprint('Items in the array: ' + str(array_num))"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def fromlist(self, arg0):\n        return TBD2()\narray_num = TBD1()\n__original_start_marker = None\nfrom array import *\nnum_list = [1, 2, 6, (- 8)]\nprint(('Items in the list: ' + str(num_list)))\nprint('Append items from the list: ')\narray_num.fromlist(num_list)\nprint(('Items in the array: ' + str(array_num)))"""	array_num	TBD1	array
"""import numpy as np\nprint('Original array:')\nprint(a)\nunique_elements, counts_elements = np.unique(a, return_counts=True)\nprint('Frequency of unique values of the said array:')\nprint(np.asarray((unique_elements, counts_elements)))"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\na = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Original array:')\nprint(a)\n(unique_elements, counts_elements) = np.unique(a, return_counts=True)\nprint('Frequency of unique values of the said array:')\nprint(np.asarray((unique_elements, counts_elements)))"""	a	TBD0	ndarray
"""import numpy as np\nv = np.arange(7)\nprint('Vector norm:')\nprint(result)\nm = np.matrix('1, 2; 3, 4')\nresult1 = np.linalg.norm(m)\nprint('Matrix norm:')\nprint(result1)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD0()\n__original_start_marker = None\nimport numpy as np\nv = np.arange(7)\nprint('Vector norm:')\nprint(result)\nm = np.matrix('1, 2; 3, 4')\nresult1 = np.linalg.norm(m)\nprint('Matrix norm:')\nprint(result1)"""	result	TBD0	float64
'import numpy as np\na = np.array([[10], [20], [30]])\nb = np.array([[40], [50], [60]])\nprint(c)'	'class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nc = TBD2()\n__original_start_marker = None\nimport numpy as np\na = np.array([[10], [20], [30]])\nb = np.array([[40], [50], [60]])\nprint(c)'	c	TBD2	ndarray
"""import numpy as np\ndef generate():\n    for n in range(15):\n        yield n\nprint('New array:')\nprint(nums)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnums = TBD0()\n__original_start_marker = None\nimport numpy as np\n\ndef generate():\n    for n in range(15):\n        (yield n)\nprint('New array:')\nprint(nums)"""	nums	TBD0	ndarray
"""from itertools import groupby\ndef extract_elements(nums, n):\n    result = [i for i, j in groupby(nums) if len(list(j)) == n]\n    return result\nnums1 = [1, 1, 3, 4, 4, 5, 6, 7]\nn = 2\nprint('Original list:')\nprint(nums1)\nprint('Extract 2 number of elements from the said list which follows each other continuously:')\nprint(extract_elements(nums1, n))\nn = 4\nprint('Original lists:')\nprint(nums2)\nprint('Extract 4 number of elements from the said list which follows each other continuously:')\nprint(extract_elements(nums2, n))"""	"""nums2 = {}\n__original_start_marker = None\nfrom itertools import groupby\n\ndef extract_elements(nums, n):\n    result = [i for (i, j) in groupby(nums) if (len(list(j)) == n)]\n    return result\nnums1 = [1, 1, 3, 4, 4, 5, 6, 7]\nn = 2\nprint('Original list:')\nprint(nums1)\nprint('Extract 2 number of elements from the said list which follows each other continuously:')\nprint(extract_elements(nums1, n))\nn = 4\nprint('Original lists:')\nprint(nums2)\nprint('Extract 4 number of elements from the said list which follows each other continuously:')\nprint(extract_elements(nums2, n))"""	nums2	TBD1	list
"""nums = [19, 65, 57, 39, 152, 639, 121, 44, 90, 190]\nprint('Orginal list:')\nprint(nums)\nprint('\\nNumbers of the above list divisible by nineteen or thirteen:')\nprint(result)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD1()\n__original_start_marker = None\nnums = [19, 65, 57, 39, 152, 639, 121, 44, 90, 190]\nprint('Orginal list:')\nprint(nums)\nprint('\\nNumbers of the above list divisible by nineteen or thirteen:')\nprint(result)"""	result	TBD1	list
"""import pandas as pd\nimport re as re\nprint('Original DataFrame:')\nprint(df)\ndef find_unique_sentence(str1):\n    result = re.findall('(?sm)(^[^\\\\r\\\\n]+$)(?!.*^\\\\1$)', str1)\n    return result\ndf['unique_sentence'] = df['address'].apply(lambda st: find_unique_sentence(st))\nprint('\\nExtract unique sentences :')\nprint(df)"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def apply(self, arg0):\n        return TBD3()\ndf = {'address': TBD1()}\n__original_start_marker = None\nimport pandas as pd\nimport re as re\nprint('Original DataFrame:')\nprint(df)\n\ndef find_unique_sentence(str1):\n    result = re.findall('(?sm)(^[^\\\\r\\\\n]+$)(?!.*^\\\\1$)', str1)\n    return result\ndf['unique_sentence'] = df['address'].apply((lambda st: find_unique_sentence(st)))\nprint('\\nExtract unique sentences :')\nprint(df)"""	df	TBD0	DataFrame
"""def unique_sublists(input_list):\n    result = {}\n    for l in input_list:\n        result.setdefault(tuple(l), list()).append(1)\n    for a, b in result.items():\n        result[a] = sum(b)\n    return result\nprint('Original list:')\nprint(list1)\nprint('Number of unique lists of the said list:')\nprint(unique_sublists(list1))\ncolor1 = [['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nprint('\\nOriginal list:')\nprint(color1)\nprint('Number of unique lists of the said list:')\nprint(unique_sublists(color1))"""	"""class TBD5():\n\n    def __init__(self, *args, **kwargs):\n        pass\nlist1 = {}\n__original_start_marker = None\n\ndef unique_sublists(input_list):\n    result = {}\n    for l in input_list:\n        result.setdefault(tuple(l), list()).append(1)\n    for (a, b) in result.items():\n        result[a] = sum(b)\n    return result\nprint('Original list:')\nprint(list1)\nprint('Number of unique lists of the said list:')\nprint(unique_sublists(list1))\ncolor1 = [['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nprint('\\nOriginal list:')\nprint(color1)\nprint('Number of unique lists of the said list:')\nprint(unique_sublists(color1))"""	list1	TBD2	list
"""import pandas as pd\ns1 = pd.Series([0, 1, 2, 3], name='col1')\ns2 = pd.Series([0, 1, 2, 3])\ns3 = pd.Series([0, 1, 4, 5], name='col3')\nprint(df)"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\ndf = TBD3()\n__original_start_marker = None\nimport pandas as pd\ns1 = pd.Series([0, 1, 2, 3], name='col1')\ns2 = pd.Series([0, 1, 2, 3])\ns3 = pd.Series([0, 1, 4, 5], name='col3')\nprint(df)"""	df	TBD3	DataFrame
"""import numpy as np\na = np.array([1, 2])\nprint('Array a: ', a)\nprint('Array b: ', b)\nprint('a > b')\nprint(np.greater(a, b))\nprint('a >= b')\nprint(np.greater_equal(a, b))\nprint('a < b')\nprint(np.less(a, b))\nprint('a <= b')\nprint(np.less_equal(a, b))"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nb = 0\n__original_start_marker = None\nimport numpy as np\na = np.array([1, 2])\nprint('Array a: ', a)\nprint('Array b: ', b)\nprint('a > b')\nprint(np.greater(a, b))\nprint('a >= b')\nprint(np.greater_equal(a, b))\nprint('a < b')\nprint(np.less(a, b))\nprint('a <= b')\nprint(np.less_equal(a, b))"""	b	TBD1	ndarray
"""import numpy as np\nprint('\\nCopy of a matrix with the elements below the k-th diagonal zeroed:')\nprint(result)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('\\nCopy of a matrix with the elements below the k-th diagonal zeroed:')\nprint(result)"""	result	TBD0	ndarray
"""import numpy as np\nnums1 = np.ones((2, 2, 3))\nnums2 = 3 * np.ones((2, 2))\nprint('Original array:')\nprint(nums1)\nprint('\\nNew array:')\nprint(new_array)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnew_array = TBD0()\n__original_start_marker = None\nimport numpy as np\nnums1 = np.ones((2, 2, 3))\nnums2 = (3 * np.ones((2, 2)))\nprint('Original array:')\nprint(nums1)\nprint('\\nNew array:')\nprint(new_array)"""	new_array	TBD0	ndarray
"'import pandas as pd\nprint(\'Original DataFrame:\')\nprint(df)\nprint(""\\nMultiIndex using columns \'t_id\', ‘school_code’ and \'class\':"")\ndf1 = df.set_index([\'t_id\', \'school_code\', \'class\'])\nprint(df1)\nprint(\'\\nConvert 1st and 3rd levels in the index frame into columns:\')\ndf2 = df1.reset_index(level=[\'t_id\', \'class\'])\nprint(df2)'"	"'class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def reset_index(self, level=None):\n        return TBD4()\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def set_index(self, arg0):\n        return TBD3()\ndf = TBD2()\n__original_start_marker = None\nimport pandas as pd\nprint(\'Original DataFrame:\')\nprint(df)\nprint(""\\nMultiIndex using columns \'t_id\', ‘school_code’ and \'class\':"")\ndf1 = df.set_index([\'t_id\', \'school_code\', \'class\'])\nprint(df1)\nprint(\'\\nConvert 1st and 3rd levels in the index frame into columns:\')\ndf2 = df1.reset_index(level=[\'t_id\', \'class\'])\nprint(df2)'"	df	TBD2	DataFrame
"""import numpy as np\nprint('Original array:')\nprint(nums)\nn = 5\nprint('\\nElements of the said array greater than', n)\nprint(nums[nums > n])\nn = 6\nprint('\\nElements of the said array less than', n)\nprint(nums[nums < n])"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0(int):\n\n    def __init__(self):\n        self.container = {'TBD2': TBD2(), True: TBD3(), 'TBD2': TBD2()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n\n    def __gt__(self, other):\n        return TBD2()\nnums = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Original array:')\nprint(nums)\nn = 5\nprint('\\nElements of the said array greater than', n)\nprint(nums[(nums > n)])\nn = 6\nprint('\\nElements of the said array less than', n)\nprint(nums[(nums < n)])"""	nums	TBD0	ndarray
"""from array import *\nprint('Original array: ' + str(array_num))\nprint('Remove the first occurrence of 3 from the said array:')\narray_num.remove(3)\nprint('New array: ' + str(array_num))"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def remove(self, arg0):\n        return TBD1()\narray_num = TBD0()\n__original_start_marker = None\nfrom array import *\nprint(('Original array: ' + str(array_num)))\nprint('Remove the first occurrence of 3 from the said array:')\narray_num.remove(3)\nprint(('New array: ' + str(array_num)))"""	array_num	TBD0	array
"'import numpy as np\nimport pandas as pd\nnp_array = np.random.rand(12, 3)\nprint(\'Original Numpy array:\')\nprint(np_array)\nprint(\'Type: \', type(np_array))\nprint(""\\nPanda\'s DataFrame: "")\nprint(df)\nprint(\'Type: \', type(df))'"	"'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\ndf = TBD0()\n__original_start_marker = None\nimport numpy as np\nimport pandas as pd\nnp_array = np.random.rand(12, 3)\nprint(\'Original Numpy array:\')\nprint(np_array)\nprint(\'Type: \', type(np_array))\nprint(""\\nPanda\'s DataFrame: "")\nprint(df)\nprint(\'Type: \', type(df))'"	df	TBD0	DataFrame
'import textwrap\nprint()\nprint(textwrap.fill(sample_text, width=50))\nprint()'	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __call__(self, *args, **kwargs):\n        return ''\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        self.translate = TBD3()\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __call__(self, *args, **kwargs):\n        return TBD2()\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        self.expandtabs = TBD1()\n        pass\nsample_text = TBD0()\n__original_start_marker = None\nimport textwrap\nprint()\nprint(textwrap.fill(sample_text, width=50))\nprint()"""	sample_text	TBD0	str
"""from collections import Counter\nfrom itertools import chain\ndef max_aggregate(list_str, N):\n    temp = (set(sub) for sub in list_str)\n    counts = Counter(chain.from_iterable(temp))\n    gt_N = [chr for chr, count in counts.items() if count > N]\n    lt_N = [chr for chr, count in counts.items() if count < N]\n    return (gt_N, lt_N)\nlist_str = ['abcd', 'iabhef', 'dsalsdf', 'sdfsas', 'jlkdfgd']\nprint('Original list:')\nprint(list_str)\nresult = max_aggregate(list_str, N)\nprint('\\nCharacters of the said list of strings which occur more than:', N)\nprint(result[0])\nprint('\\nCharacters of the said list of strings which occur less than:', N)\nprint(result[1])"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nN = 0\n__original_start_marker = None\nfrom collections import Counter\nfrom itertools import chain\n\ndef max_aggregate(list_str, N):\n    temp = (set(sub) for sub in list_str)\n    counts = Counter(chain.from_iterable(temp))\n    gt_N = [chr for (chr, count) in counts.items() if (count > N)]\n    lt_N = [chr for (chr, count) in counts.items() if (count < N)]\n    return (gt_N, lt_N)\nlist_str = ['abcd', 'iabhef', 'dsalsdf', 'sdfsas', 'jlkdfgd']\nprint('Original list:')\nprint(list_str)\nresult = max_aggregate(list_str, N)\nprint('\\nCharacters of the said list of strings which occur more than:', N)\nprint(result[0])\nprint('\\nCharacters of the said list of strings which occur less than:', N)\nprint(result[1])"""	N	TBD1	int
"""import numpy as np\nnew_data = [(1, 2.0, 'Albert Einstein'), (2, 2.0, 'Edmond Halley'), (3, 3.0, 'Gertrude B. Elion')]\nx[:] = new_data\nprint(x)"""	"""class TBD1():\n\n    def __init__(self):\n        self.container = {}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\nx = TBD1()\n__original_start_marker = None\nimport numpy as np\nnew_data = [(1, 2.0, 'Albert Einstein'), (2, 2.0, 'Edmond Halley'), (3, 3.0, 'Gertrude B. Elion')]\nx[:] = new_data\nprint(x)"""	x	TBD1	ndarray
"""import numpy as np\nprint('Array1: ', array1)\narray2 = [0, 40]\nprint('Array2: ', array2)\nprint('Compare each element of array1 and array2')\nprint(np.in1d(array1, array2))"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\narray1 = TBD1()\n__original_start_marker = None\nimport numpy as np\nprint('Array1: ', array1)\narray2 = [0, 40]\nprint('Array2: ', array2)\nprint('Compare each element of array1 and array2')\nprint(np.in1d(array1, array2))"""	array1	TBD1	ndarray
"""import numpy as np\nx = np.array([24, 27, 30, 29, 18, 14])\nprint('Original array:')\nprint(x)\ny[:] = x\nprint('\\nCopy of the said array:')\nprint(y)"""	"""class TBD1():\n\n    def __init__(self):\n        self.container = {}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\ny = TBD1()\n__original_start_marker = None\nimport numpy as np\nx = np.array([24, 27, 30, 29, 18, 14])\nprint('Original array:')\nprint(x)\ny[:] = x\nprint('\\nCopy of the said array:')\nprint(y)"""	y	TBD1	ndarray
"""def cocktail_shaker_sort(nums):\n    for i in range(len(nums) - 1, 0, -1):\n        is_swapped = False\n        for j in range(i, 0, -1):\n            if nums[j] < nums[j - 1]:\n                nums[j], nums[j - 1] = (nums[j - 1], nums[j])\n                is_swapped = True\n        for j in range(i):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = (nums[j + 1], nums[j])\n                is_swapped = True\n        if not is_swapped:\n            return nums\nnums = [int(item) for item in num1.split(',')]\nprint(cocktail_shaker_sort(nums))"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def split(self, arg0):\n        return {}\nnum1 = TBD0()\n__original_start_marker = None\n\ndef cocktail_shaker_sort(nums):\n    for i in range((len(nums) - 1), 0, (- 1)):\n        is_swapped = False\n        for j in range(i, 0, (- 1)):\n            if (nums[j] < nums[(j - 1)]):\n                (nums[j], nums[(j - 1)]) = (nums[(j - 1)], nums[j])\n                is_swapped = True\n        for j in range(i):\n            if (nums[j] > nums[(j + 1)]):\n                (nums[j], nums[(j + 1)]) = (nums[(j + 1)], nums[j])\n                is_swapped = True\n        if (not is_swapped):\n            return nums\nnums = [int(item) for item in num1.split(',')]\nprint(cocktail_shaker_sort(nums))"""	num1	TBD0	str
"""import numpy as np\nnums = np.array([[[1, 2, 3, 4], [0, 1, 3, 4], [90, 91, 93, 94], [5, 0, 3, 2]]])\nprint('Original array:')\nprint(nums)\nprint('\\nSwap rows and columns of the said array in reverse order:')\nprint(new_nums)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnew_nums = TBD1()\n__original_start_marker = None\nimport numpy as np\nnums = np.array([[[1, 2, 3, 4], [0, 1, 3, 4], [90, 91, 93, 94], [5, 0, 3, 2]]])\nprint('Original array:')\nprint(nums)\nprint('\\nSwap rows and columns of the said array in reverse order:')\nprint(new_nums)"""	new_nums	TBD1	NoneType
"""def extract_index_ele(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if m == n == o:\n            result.append(m)\n    return result\nnums1 = [1, 1, 3, 4, 5, 6, 7]\nnums3 = [0, 1, 2, 3, 4, 5, 7]\nprint('Original lists:')\nprint(nums1)\nprint(nums2)\nprint(nums3)\nprint('\\nCommon index elements of the said lists:')\nprint(extract_index_ele(nums1, nums2, nums3))"""	"""nums2 = {}\n__original_start_marker = None\n\ndef extract_index_ele(l1, l2, l3):\n    result = {}\n    for (m, n, o) in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nnums1 = [1, 1, 3, 4, 5, 6, 7]\nnums3 = [0, 1, 2, 3, 4, 5, 7]\nprint('Original lists:')\nprint(nums1)\nprint(nums2)\nprint(nums3)\nprint('\\nCommon index elements of the said lists:')\nprint(extract_index_ele(nums1, nums2, nums3))"""	nums2	TBD3	list
"""from array import *\nprint('Original array: ' + str(array_num))\nprint('Remove the third item form the array:')\narray_num.pop(2)\nprint('New array: ' + str(array_num))"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def pop(self, arg0):\n        return TBD1()\narray_num = TBD0()\n__original_start_marker = None\nfrom array import *\nprint(('Original array: ' + str(array_num)))\nprint('Remove the third item form the array:')\narray_num.pop(2)\nprint(('New array: ' + str(array_num)))"""	array_num	TBD0	array
"""import numpy as np\nnums = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nprint('Original array:')\nprint(nums)\nnew_nums = np.zeros(len(nums) + (len(nums) - 1) * p)\nnew_nums[::p + 1] = nums\nprint('\\nNew array:')\nprint(new_nums)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\np = 0\n__original_start_marker = None\nimport numpy as np\nnums = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nprint('Original array:')\nprint(nums)\nnew_nums = np.zeros((len(nums) + ((len(nums) - 1) * p)))\nnew_nums[::(p + 1)] = nums\nprint('\\nNew array:')\nprint(new_nums)"""	p	TBD1	int
"""from array import array\ndef array_sum(nums_arr):\n    sum_n = 0\n    for n in nums_arr:\n        sum_n += n\n    return sum_n\nnums = array('i', [1, 2, 3, 4, 5, -15])\nprint('Original array:', nums)\nresult = array_sum(nums_arr)\nprint('Sum of all elements of the said array:')\nprint(result)"""	"""nums_arr = {}\n__original_start_marker = None\nfrom array import array\n\ndef array_sum(nums_arr):\n    sum_n = 0\n    for n in nums_arr:\n        sum_n += n\n    return sum_n\nnums = array('i', [1, 2, 3, 4, 5, (- 15)])\nprint('Original array:', nums)\nresult = array_sum(nums_arr)\nprint('Sum of all elements of the said array:')\nprint(result)"""	nums_arr	TBD1	list
"""days = filter(lambda day: day if len(day) == 6 else '', weekdays)\nfor d in days:\n    print(d)"""	"""weekdays = {}\n__original_start_marker = None\ndays = filter((lambda day: (day if (len(day) == 6) else '')), weekdays)\nfor d in days:\n    print(d)"""	weekdays	TBD0	list
"""def max_Product(arr):\n    arr_len = len(arr)\n    if arr_len < 2:\n        print('No pairs exists')\n        return\n    x = arr[0]\n    y = arr[1]\n    for i in range(0, arr_len):\n        for j in range(i + 1, arr_len):\n            if arr[i] * arr[j] > x * y:\n                x = arr[i]\n                y = arr[j]\n    return (x, y)\nprint('Original array:', nums)\nprint('Maximum product pair is:', max_Product(nums))\nnums = [0, -1, -2, -4, 5, 0, -6]\nprint('\\nOriginal array:', nums)\nprint('Maximum product pair is:', max_Product(nums))"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __len__(self):\n        return 0\nnums = TBD1()\n__original_start_marker = None\n\ndef max_Product(arr):\n    arr_len = len(arr)\n    if (arr_len < 2):\n        print('No pairs exists')\n        return\n    x = arr[0]\n    y = arr[1]\n    for i in range(0, arr_len):\n        for j in range((i + 1), arr_len):\n            if ((arr[i] * arr[j]) > (x * y)):\n                x = arr[i]\n                y = arr[j]\n    return (x, y)\nprint('Original array:', nums)\nprint('Maximum product pair is:', max_Product(nums))\nnums = [0, (- 1), (- 2), (- 4), 5, 0, (- 6)]\nprint('\\nOriginal array:', nums)\nprint('Maximum product pair is:', max_Product(nums))"""	nums	TBD1	list
"""import pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\ndf = pd.DataFrame({'ord_no': [np.nan, np.nan, 70002, np.nan, np.nan, 70005, np.nan, 70010, 70003, 70012, np.nan, np.nan], 'purch_amt': [np.nan, 270.65, 65.26, np.nan, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, np.nan], 'ord_date': [np.nan, '2012-09-10', np.nan, np.nan, '2012-09-10', '2012-07-27', '2012-09-10', '2012-10-10', '2012-10-10', '2012-06-27', '2012-08-17', np.nan], 'customer_id': [np.nan, 3001, 3001, np.nan, 3002, 3001, 3001, 3004, 3003, 3002, 3001, np.nan]})\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nTotal number of missing values of the said DataFrame:')\nprint(result)"""	"""class TBD5():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD5()\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\ndf = pd.DataFrame({'ord_no': [np.nan, np.nan, 70002, np.nan, np.nan, 70005, np.nan, 70010, 70003, 70012, np.nan, np.nan], 'purch_amt': [np.nan, 270.65, 65.26, np.nan, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, np.nan], 'ord_date': [np.nan, '2012-09-10', np.nan, np.nan, '2012-09-10', '2012-07-27', '2012-09-10', '2012-10-10', '2012-10-10', '2012-06-27', '2012-08-17', np.nan], 'customer_id': [np.nan, 3001, 3001, np.nan, 3002, 3001, 3001, 3004, 3003, 3002, 3001, np.nan]})\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nTotal number of missing values of the said DataFrame:')\nprint(result)"""	result	TBD5	int64
"""x = int(x == 'true')\nprint(x)\nx = 'abcd'\nx = int(x == 'true')\nprint(x)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = TBD0()\n__original_start_marker = None\nx = int((x == 'true'))\nprint(x)\nx = 'abcd'\nx = int((x == 'true'))\nprint(x)"""	x	TBD0	str
"""import numpy as np\np = np.array([[0, 0, 0], [1, 2, 3], [4, 5, 6]])\nprint('Original arrays:')\nprint('Array-1')\nprint(p)\nprint('Array-2')\nprint(q)\nprint('\\nNew Array:')\nnew_array1 = p + q\nprint(new_array1)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nq = 0\n__original_start_marker = None\nimport numpy as np\np = np.array([[0, 0, 0], [1, 2, 3], [4, 5, 6]])\nprint('Original arrays:')\nprint('Array-1')\nprint(p)\nprint('Array-2')\nprint(q)\nprint('\\nNew Array:')\nnew_array1 = (p + q)\nprint(new_array1)"""	q	TBD1	ndarray
"""def cast_list(val):\n    return list(val) if isinstance(val, (tuple, list, set, dict)) else [val]\nd1 = [1]\nprint(type(d1))\nprint(cast_list(d1))\nprint(type(d2))\nprint(cast_list(d2))\nd3 = {'Red', 'Green'}\nprint(type(d3))\nprint(cast_list(d3))\nd4 = {1: 'Red', 2: 'Green', 3: 'Black'}\nprint(type(d4))\nprint(cast_list(d4))"""	"""class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\nd2 = TBD4()\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\nval = TBD3()\n__original_start_marker = None\n\ndef cast_list(val):\n    return (list(val) if isinstance(val, (tuple, list, set, dict)) else [val])\nd1 = [1]\nprint(type(d1))\nprint(cast_list(d1))\nprint(type(d2))\nprint(cast_list(d2))\nd3 = {'Red', 'Green'}\nprint(type(d3))\nprint(cast_list(d3))\nd4 = ['Red', 'Green', 'Black']\nprint(type(d4))\nprint(cast_list(d4))"""	d2	TBD4	tuple
"""import pandas as pd\nfrom pandas.tseries.offsets import *\nimport datetime\nfrom datetime import datetime, date\ndt = datetime(2020, 1, 4)\nprint('Specified date:')\nprint(dt)\nprint('\\nOne business day from the said date:')\nobday = dt + BusinessDay()\nprint(obday)\nprint('\\nTwo business days from the said date:')\ntbday = dt + 2 * BusinessDay()\nprint(tbday)\nprint('\\nThree business days from the said date:')\nprint(thbday)\nprint('\\nNext business month end from the said date:')\nnbday = dt + BMonthEnd()\nprint(nbday)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nthbday = TBD0()\n__original_start_marker = None\nimport pandas as pd\nfrom pandas.tseries.offsets import *\nimport datetime\nfrom datetime import datetime, date\ndt = datetime(2020, 1, 4)\nprint('Specified date:')\nprint(dt)\nprint('\\nOne business day from the said date:')\nobday = (dt + BusinessDay())\nprint(obday)\nprint('\\nTwo business days from the said date:')\ntbday = (dt + (2 * BusinessDay()))\nprint(tbday)\nprint('\\nThree business days from the said date:')\nprint(thbday)\nprint('\\nNext business month end from the said date:')\nnbday = (dt + BMonthEnd())\nprint(nbday)"""	thbday	TBD0	Timestamp
"""import itertools\ndef interleave_multiple_lists(list1, list2, list3):\n    result = list(itertools.chain(*zip(list1, list2, list3)))\n    return result\nlist2 = [10, 20, 30, 40, 50, 60, 70]\nlist3 = [1, 2, 3, 4, 5, 6, 7]\nprint('Original list:')\nprint('list1:', list1)\nprint('list2:', list2)\nprint('list3:', list3)\nprint('\\nInterleave multiple lists:')\nprint(interleave_multiple_lists(list1, list2, list3))"""	"""list1 = {}\n__original_start_marker = None\nimport itertools\n\ndef interleave_multiple_lists(list1, list2, list3):\n    result = list(itertools.chain(*zip(list1, list2, list3)))\n    return result\nlist2 = [10, 20, 30, 40, 50, 60, 70]\nlist3 = [1, 2, 3, 4, 5, 6, 7]\nprint('Original list:')\nprint('list1:', list1)\nprint('list2:', list2)\nprint('list3:', list3)\nprint('\\nInterleave multiple lists:')\nprint(interleave_multiple_lists(list1, list2, list3))"""	list1	TBD2	list
"""def inset_element_list(lst, x, n):\n    i = n\n    while i < len(lst):\n        lst.insert(i, x)\n        i += n + 1\n    return lst\nnums = [1, 3, 5, 7, 9, 11, 0, 2, 4, 6, 8, 10, 8, 9, 0, 4, 3, 0]\nprint('Original list:')\nprint(nums)\nx = 20\nn = 4\nprint('\\nInsert', x, 'in said list after every', n, 'th element:')\nprint(inset_element_list(nums, x, n))\nprint('\\nOriginal list:')\nprint(chars)\nx = 'Z'\nn = 3\nprint('\\nInsert', x, 'in said list after every', n, 'th element:')\nprint(inset_element_list(chars, x, n))"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __len__(self):\n        return 0\nchars = TBD2()\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n__original_start_marker = None\n\ndef inset_element_list(lst, x, n):\n    i = n\n    while (i < len(lst)):\n        lst.insert(i, x)\n        i += (n + 1)\n    return lst\nnums = [1, 3, 5, 7, 9, 11, 0, 2, 4, 6, 8, 10, 8, 9, 0, 4, 3, 0]\nprint('Original list:')\nprint(nums)\nx = 20\nn = 4\nprint('\\nInsert', x, 'in said list after every', n, 'th element:')\nprint(inset_element_list(nums, x, n))\nprint('\\nOriginal list:')\nprint(chars)\nx = 'Z'\nn = 3\nprint('\\nInsert', x, 'in said list after every', n, 'th element:')\nprint(inset_element_list(chars, x, n))"""	chars	TBD2	list
'import numpy as np\ny = np.array([])\nprint(x.size)\nprint(y.size)'	'class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        self.size = TBD2()\n        pass\nx = TBD1()\n__original_start_marker = None\nimport numpy as np\ny = np.array({})\nprint(x.size)\nprint(y.size)'	x	TBD1	ndarray
"""from collections import Counter\nl1 = [1, 1, 2, 3, 3, 4, 4, 5, 6, 7]\nprint('Original lists:')\nc1 = Counter(l1)\nc2 = Counter(l2)\ndiff = c1 - c2\nprint(list(diff.elements()))"""	"""l2 = {}\n__original_start_marker = None\nfrom collections import Counter\nl1 = [1, 1, 2, 3, 3, 4, 4, 5, 6, 7]\nprint('Original lists:')\nc1 = Counter(l1)\nc2 = Counter(l2)\ndiff = (c1 - c2)\nprint(list(diff.elements()))"""	l2	TBD1	list
"""def smallest_largest_words(str1):\n    word = ''\n    all_words = []\n    str1 = str1 + ' '\n    for i in range(0, len(str1)):\n        if str1[i] != ' ':\n            word = word + str1[i]\n        else:\n            all_words.append(word)\n            word = ''\n    small = large = all_words[0]\n    for k in range(0, len(all_words)):\n        if len(small) > len(all_words[k]):\n            small = all_words[k]\n        if len(large) < len(all_words[k]):\n            large = all_words[k]\n    return (small, large)\nprint('Original Strings:\\n', str1)\nsmall, large = smallest_largest_words(str1)\nprint('Smallest word: ' + small)\nprint('Largest word: ' + large)"""	"""class TBD4(str):\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __new__(self):\n        return super().__new__(self, self.__name__)\n\n    def __repr__(self):\n        return type(self).__name__\n\n    def __str__(self):\n        return type(self).__name__\n\n    def __getitem__(self, key):\n        return str(self)[key]\n\n    def __iter__(self):\n        return iter(str(self))\n\n    def __len__(self):\n        return len(str(self))\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __len__(self):\n        return 0\n\nclass TBD1(str):\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __new__(self):\n        return super().__new__(self, self.__name__)\n\n    def __repr__(self):\n        return type(self).__name__\n\n    def __str__(self):\n        return type(self).__name__\n\n    def __getitem__(self, key):\n        return str(self)[key]\n\n    def __iter__(self):\n        return iter(str(self))\n\n    def __len__(self):\n        return len(str(self))\n\n    def __add__(self, other):\n        return TBD2()\nstr1 = TBD1()\n__original_start_marker = None\n\ndef smallest_largest_words(str1):\n    word = ''\n    all_words = [TBD4()]\n    str1 = (str1 + ' ')\n    for i in range(0, len(str1)):\n        if (str1[i] != ' '):\n            word = (word + str1[i])\n        else:\n            all_words.append(word)\n            word = ''\n    small = large = all_words[0]\n    for k in range(0, len(all_words)):\n        if (len(small) > len(all_words[k])):\n            small = all_words[k]\n        if (len(large) < len(all_words[k])):\n            large = all_words[k]\n    return (small, large)\nprint('Original Strings:\\n', str1)\n(small, large) = smallest_largest_words(str1)\nprint(('Smallest word: ' + small))\nprint(('Largest word: ' + large))"""	str1	TBD1	str
"""import numpy as np\nimport os\na = np.array([1, 2, 3, 4, 5, 6])\nprint('Original array:')\nprint(a)\na_bytes = a.tostring()\nprint('After loading, content of the text file:')\nprint(a2)\nprint(np.array_equal(a, a2))"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\na2 = TBD1()\n__original_start_marker = None\nimport numpy as np\nimport os\na = np.array([1, 2, 3, 4, 5, 6])\nprint('Original array:')\nprint(a)\na_bytes = a.tostring()\nprint('After loading, content of the text file:')\nprint(a2)\nprint(np.array_equal(a, a2))"""	a2	TBD1	ndarray
"""def combination(n, n_list):\n    if n <= 0:\n        yield []\n        return\n    for i in range(len(n_list)):\n        c_num = n_list[i:i + 1]\n        for a_num in combination(n - 1, n_list[i + 1:]):\n            yield (c_num + a_num)\nprint('Original list:')\nprint(n_list)\nn = 2\nresult = combination(n, n_list)\nprint('\\nCombinations of', n, 'distinct objects:')\nfor e in result:\n    print(e)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __len__(self):\n        return 0\nn_list = TBD1()\n__original_start_marker = None\n\ndef combination(n, n_list):\n    if (n <= 0):\n        (yield {})\n        return\n    for i in range(len(n_list)):\n        c_num = n_list[i:(i + 1)]\n        for a_num in combination((n - 1), n_list[(i + 1):]):\n            (yield (c_num + a_num))\nprint('Original list:')\nprint(n_list)\nn = 2\nresult = combination(n, n_list)\nprint('\\nCombinations of', n, 'distinct objects:')\nfor e in result:\n    print(e)"""	n_list	TBD1	list
"""import pandas as pd\nprint('Original Data Series:')\nprint(s)\ns = s.reindex(index=['B', 'A', 'C', 'D', 'E'])\nprint('Data Series after changing the order of index:')\nprint(s)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def reindex(self, index=None):\n        return TBD2()\ns = TBD1()\n__original_start_marker = None\nimport pandas as pd\nprint('Original Data Series:')\nprint(s)\ns = s.reindex(index=['B', 'A', 'C', 'D', 'E'])\nprint('Data Series after changing the order of index:')\nprint(s)"""	s	TBD1	Series
"""import pandas as pd\ns = pd.Series([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nprint('Original Data Series:')\nprint(s)\nprint('\\nSubset of the above Data Series:')\nn = 6\nprint(new_s)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnew_s = TBD1()\n__original_start_marker = None\nimport pandas as pd\ns = pd.Series([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nprint('Original Data Series:')\nprint(s)\nprint('\\nSubset of the above Data Series:')\nn = 6\nprint(new_s)"""	new_s	TBD1	Series
"""import numpy as np\nprint('Original matrix:\\n')\nprint(X)\nprint('\\nSubtract the mean of each row of the said matrix:\\n')\nY = X - X.mean(axis=1, keepdims=True)\nprint(Y)"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __sub__(self, other):\n        return TBD3()\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def mean(self, axis=None, keepdims=None):\n        return TBD1()\n\n    def __sub__(self, other):\n        return TBD2()\nX = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Original matrix:\\n')\nprint(X)\nprint('\\nSubtract the mean of each row of the said matrix:\\n')\nY = (X - X.mean(axis=1, keepdims=True))\nprint(Y)"""	X	TBD0	ndarray
"""nums1 = [1, 2, 3]\nnums2 = [4, 5, 6]\nprint('Original list:')\nprint(nums1)\nprint(nums2)\nprint('\\nResult: after adding two list')\nprint(list(result))"""	"""result = {}\n__original_start_marker = None\nnums1 = [1, 2, 3]\nnums2 = [4, 5, 6]\nprint('Original list:')\nprint(nums1)\nprint(nums2)\nprint('\\nResult: after adding two list')\nprint(list(result))"""	result	TBD2	map
'import numpy as np\na = [[1, 2], [3, 4]]\nx = np.array(a)\nprint(a == a2)'	'class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\na2 = TBD1()\n__original_start_marker = None\nimport numpy as np\na = [[1, 2], [3, 4]]\nx = np.array(a)\nprint((a == a2))'	a2	TBD1	list
"""from numpy.polynomial import polynomial as P\nx = (10, 20, 30)\nprint('Add one polynomial to another:')\nprint(P.polyadd(x, y))\nprint('Subtract one polynomial from another:')\nprint(P.polysub(x, y))\nprint('Multiply one polynomial by another:')\nprint(P.polymul(x, y))\nprint('Divide one polynomial by another:')\nprint(P.polydiv(x, y))"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\ny = 0\n__original_start_marker = None\nfrom numpy.polynomial import polynomial as P\nx = (10, 20, 30)\nprint('Add one polynomial to another:')\nprint(P.polyadd(x, y))\nprint('Subtract one polynomial from another:')\nprint(P.polysub(x, y))\nprint('Multiply one polynomial by another:')\nprint(P.polymul(x, y))\nprint('Divide one polynomial by another:')\nprint(P.polydiv(x, y))"""	y	TBD0	tuple
"""color1 = ('Red', 'Green', 'Orange', 'White')\nprint(set(color1) & set(color2))"""	"""color2 = {}\n__original_start_marker = None\ncolor1 = ('Red', 'Green', 'Orange', 'White')\nprint((set(color1) & set(color2)))"""	color2	TBD0	tuple
"""def diff_consecutive_nums(nums):\n    result = [b - a for a, b in zip(nums[:-1], nums[1:])]\n    return result\nnums1 = [1, 1, 3, 4, 4, 5, 6, 7]\nprint('Original list:')\nprint(nums1)\nprint('Difference between consecutive numbers of the said list:')\nprint(diff_consecutive_nums(nums1))\nprint('\\nOriginal list:')\nprint(nums2)\nprint('Difference between consecutive numbers of the said list:')\nprint(diff_consecutive_nums(nums2))"""	"""class TBD1():\n\n    def __init__(self):\n        self.container = {}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\nnums2 = TBD1()\n__original_start_marker = None\n\ndef diff_consecutive_nums(nums):\n    result = [(b - a) for (a, b) in zip(nums[:(- 1)], nums[1:])]\n    return result\nnums1 = [1, 1, 3, 4, 4, 5, 6, 7]\nprint('Original list:')\nprint(nums1)\nprint('Difference between consecutive numbers of the said list:')\nprint(diff_consecutive_nums(nums1))\nprint('\\nOriginal list:')\nprint(nums2)\nprint('Difference between consecutive numbers of the said list:')\nprint(diff_consecutive_nums(nums2))"""	nums2	TBD1	list
"""import pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nReplace the missing values with NaN:')\nresult = df.replace({'?': np.nan, '--': np.nan})\nprint(result)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def replace(self, arg0):\n        return TBD2()\ndf = TBD1()\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nReplace the missing values with NaN:')\nresult = df.replace({'?': np.nan, '--': np.nan})\nprint(result)"""	df	TBD1	DataFrame
"""import numpy as np\nprint('3x3 matrix:')\nprint(array_2D)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\narray_2D = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('3x3 matrix:')\nprint(array_2D)"""	array_2D	TBD0	ndarray
"""import pandas as pd\nimport re as re\npd.set_option('display.max_columns', 10)\nprint('Original DataFrame:')\nprint(df)\ndef test_and_cond(text):\n    result = re.findall('(?=.*Ave.)(?=.*9910).*', text)\n    return ' '.join(result)\ndf['check_two_words'] = df['address'].apply(lambda x: test_and_cond(x))\nprint('\\nPresent two words!')\nprint(df)"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def apply(self, arg0):\n        return TBD3()\ndf = {'address': TBD1()}\n__original_start_marker = None\nimport pandas as pd\nimport re as re\npd.set_option('display.max_columns', 10)\nprint('Original DataFrame:')\nprint(df)\n\ndef test_and_cond(text):\n    result = re.findall('(?=.*Ave.)(?=.*9910).*', text)\n    return ' '.join(result)\ndf['check_two_words'] = df['address'].apply((lambda x: test_and_cond(x)))\nprint('\\nPresent two words!')\nprint(df)"""	df	TBD0	DataFrame
"""class Node:\n    def __init__(self, data=None):\n        self.data = data\n        self.next = None\nclass singly_linked_list:\n    def __init__(self):\n        self.tail = None\n        self.head = None\n        self.count = 0\n    def append_item(self, data):\n        node = Node(data)\n        if self.head:\n            self.head.next = node\n            self.head = node\n        else:\n            self.tail = node\n            self.head = node\n        self.count += 1\n    def delete_item(self, data):\n        current = self.tail\n        prev = self.tail\n        while current:\n            if current.data == data:\n                if current == self.tail:\n                    self.tail = current.next\n                else:\n                    prev.next = current.next\n                self.count -= 1\n                return\n            prev = current\n            current = current.next\n    def iterate_item(self):\n        current_item = self.tail\n        while current_item:\n            val = current_item.data\n            current_item = current_item.next\n            yield val\nitems.append_item('PHP')\nitems.append_item('Python')\nitems.append_item('C#')\nitems.append_item('C++')\nitems.append_item('Java')\nprint('Original list:')\nfor val in items.iterate_item():\n    print(val)\nprint('\\nAfter removing the first item from the list:')\nitems.delete_item('PHP')\nfor val in items.iterate_item():\n    print(val)"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def append_item(self, arg0):\n        return TBD1()\n\n    def iterate_item(self):\n        return {}\n\n    def delete_item(self, arg0):\n        return TBD3()\nitems = TBD0()\n__original_start_marker = None\n\nclass Node():\n\n    def __init__(self, data=None):\n        self.data = data\n        self.next = None\nitems.append_item('PHP')\nitems.append_item('Python')\nitems.append_item('C#')\nitems.append_item('C++')\nitems.append_item('Java')\nprint('Original list:')\nfor val in items.iterate_item():\n    print(val)\nprint('\\nAfter removing the first item from the list:')\nitems.delete_item('PHP')\nfor val in items.iterate_item():\n    print(val)"""	items	TBD0	singly_linked_list
"""import itertools\nprint('Original List', num)\nnum.sort()\nnew_num = list((num for num, _ in itertools.groupby(num)))\nprint('New List', new_num)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnum = []\n__original_start_marker = None\nimport itertools\nprint('Original List', num)\nnum.sort()\nnew_num = list((num for (num, _) in itertools.groupby(num)))\nprint('New List', new_num)"""	num	TBD0	list
"""def test(dictt, key, value):\n    if any((sub[key] == value for sub in dictt)):\n        return True\n    return False\nprint('\\nOriginal dictionary:')\nprint(students)\nprint('\\nCheck if a specific Key and a value exist in the said dictionary:')\nprint(test(students, 'student_id', 1))\nprint(test(students, 'name', 'Brian Howell'))\nprint(test(students, 'class', 'VII'))\nprint(test(students, 'class', 'I'))\nprint(test(students, 'name', 'Brian Howelll'))\nprint(test(students, 'student_id', 11))"""	"""students = {}\n__original_start_marker = None\n\ndef test(dictt, key, value):\n    if any(((sub[key] == value) for sub in dictt)):\n        return True\n    return False\nprint('\\nOriginal dictionary:')\nprint(students)\nprint('\\nCheck if a specific Key and a value exist in the said dictionary:')\nprint(test(students, 'student_id', 1))\nprint(test(students, 'name', 'Brian Howell'))\nprint(test(students, 'class', 'VII'))\nprint(test(students, 'class', 'I'))\nprint(test(students, 'name', 'Brian Howelll'))\nprint(test(students, 'student_id', 11))"""	students	TBD0	list
'import datetime\nnow = datetime.datetime.now()\nprint(now)\nyear = lambda x: x.year\nmonth = lambda x: x.month\nday = lambda x: x.day\nprint(year(now))\nprint(month(now))\nprint(day(now))\nprint(t(now))'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\ndef t(arg0):\n    return TBD0()\n__original_start_marker = None\nimport datetime\nnow = datetime.datetime.now()\nprint(now)\nyear = (lambda x: x.year)\nmonth = (lambda x: x.month)\nday = (lambda x: x.day)\nprint(year(now))\nprint(month(now))\nprint(day(now))\nprint(t(now))'	t	TBD0	function
"""import numpy as np\nnum = np.arange(18)\narr1 = np.reshape(num, [6, 3])\nprint('Original array:')\nprint(arr1)\nprint('\\nExtract upper triangular part of the said array:')\nprint(result)\nresult = arr1[np.triu_indices(2)]\nprint('\\nExtract upper triangular part of the said array:')\nprint(result)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD1()\n__original_start_marker = None\nimport numpy as np\nnum = np.arange(18)\narr1 = np.reshape(num, [6, 3])\nprint('Original array:')\nprint(arr1)\nprint('\\nExtract upper triangular part of the said array:')\nprint(result)\nresult = arr1[np.triu_indices(2)]\nprint('\\nExtract upper triangular part of the said array:')\nprint(result)"""	result	TBD1	ndarray
"""import numpy as np\nnp_array = np.arange(3 * 4 * 5).reshape(3, 4, 5)\nprint('Original Numpy array:')\nprint(np_array)\nprint('Type: ', type(np_array))\nprint('\\n2D diagonals: ')\nprint(result)\nprint('Type: ', type(result))"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD0()\n__original_start_marker = None\nimport numpy as np\nnp_array = np.arange(((3 * 4) * 5)).reshape(3, 4, 5)\nprint('Original Numpy array:')\nprint(np_array)\nprint('Type: ', type(np_array))\nprint('\\n2D diagonals: ')\nprint(result)\nprint('Type: ', type(result))"""	result	TBD0	ndarray
"""def reverse_strings_list(string_list):\n    result = list(map(lambda x: ''.join(reversed(x)), string_list))\n    return result\nprint('\\nOriginal lists:')\nprint(colors_list)\nprint('\\nReverse strings of the said given list:')\nprint(reverse_strings_list(colors_list))"""	"""colors_list = {}\n__original_start_marker = None\n\ndef reverse_strings_list(string_list):\n    result = list(map((lambda x: ''.join(reversed(x))), string_list))\n    return result\nprint('\\nOriginal lists:')\nprint(colors_list)\nprint('\\nReverse strings of the said given list:')\nprint(reverse_strings_list(colors_list))"""	colors_list	TBD0	list
"""def remove_words(list1, remove_words):\n    result = list(filter(lambda word: word not in remove_words, list1))\n    return result\nremove_colors = ['orange', 'black']\nprint('Original list:')\nprint(colors)\nprint('\\nRemove words:')\nprint(remove_colors)\nprint('\\nAfter removing the specified words from the said list:')\nprint(remove_words(colors, remove_colors))"""	"""colors = {}\n__original_start_marker = None\n\ndef remove_words(list1, remove_words):\n    result = list(filter((lambda word: (word not in remove_words)), list1))\n    return result\nremove_colors = ['orange', 'black']\nprint('Original list:')\nprint(colors)\nprint('\\nRemove words:')\nprint(remove_colors)\nprint('\\nAfter removing the specified words from the said list:')\nprint(remove_words(colors, remove_colors))"""	colors	TBD1	list
"""import pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nIs proper case or title case?')\ndf['company_code_is_title'] = list(map(lambda x: x.istitle(), df['company_code']))\nprint(df)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self):\n        self.container = {'company_code': TBD1()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\ndf = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nIs proper case or title case?')\ndf['company_code_is_title'] = list(map((lambda x: x.istitle()), df['company_code']))\nprint(df)"""	df	TBD0	DataFrame
"""import pandas as pd\nprint('Original Series:')\nprint(nums)\nprint('Index of the first occurrence of the smallest and largest value of the said series:')\nprint(nums.idxmin())\nprint(nums.idxmax())"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def idxmin(self):\n        return TBD1()\n\n    def idxmax(self):\n        return TBD2()\nnums = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Original Series:')\nprint(nums)\nprint('Index of the first occurrence of the smallest and largest value of the said series:')\nprint(nums.idxmin())\nprint(nums.idxmax())"""	nums	TBD0	Series
"""print(str1.split(' '))\nstr1 = 'The-quick-brown-fox-jumps-over-the-lazy-dog.'\nprint(str1.split('-'))"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def split(self, arg0):\n        return TBD1()\nstr1 = TBD0()\n__original_start_marker = None\nprint(str1.split(' '))\nstr1 = 'The-quick-brown-fox-jumps-over-the-lazy-dog.'\nprint(str1.split('-'))"""	str1	TBD0	str
"""import numpy as np\nnp.set_printoptions(linewidth=100)\nstudent = np.array([['01', 'V', 'Debby Pramod'], ['02', 'V', 'Artemiy Ellie'], ['03', 'V', 'Baptist Kamal'], ['04', 'V', 'Lavanya Davide'], ['05', 'V', 'Fulton Antwan'], ['06', 'V', 'Euanthe Sandeep'], ['07', 'V', 'Endzela Sanda'], ['08', 'V', 'Victoire Waman'], ['09', 'V', 'Briar Nur'], ['10', 'V', 'Rose Lykos']])\nprint('Original array:')\nprint(student)\nchar = 'E'\nprint('\\nStudent name starting with', char, ':')\nprint(result)\nchar = '1'\nresult = student[np.char.startswith(student[:, 0], char)]\nprint('\\nStudent id starting with', char, ':')\nprint(result)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD1()\n__original_start_marker = None\nimport numpy as np\nnp.set_printoptions(linewidth=100)\nstudent = np.array([['01', 'V', 'Debby Pramod'], ['02', 'V', 'Artemiy Ellie'], ['03', 'V', 'Baptist Kamal'], ['04', 'V', 'Lavanya Davide'], ['05', 'V', 'Fulton Antwan'], ['06', 'V', 'Euanthe Sandeep'], ['07', 'V', 'Endzela Sanda'], ['08', 'V', 'Victoire Waman'], ['09', 'V', 'Briar Nur'], ['10', 'V', 'Rose Lykos']])\nprint('Original array:')\nprint(student)\nchar = 'E'\nprint('\\nStudent name starting with', char, ':')\nprint(result)\nchar = '1'\nresult = student[np.char.startswith(student[(:, 0)], char)]\nprint('\\nStudent id starting with', char, ':')\nprint(result)"""	result	TBD1	ndarray
"""from random import shuffle\ndef shuffle_word(text_list):\n    text_list = list(text_list)\n    shuffle(text_list)\n    return ''.join(text_list)\nprint('Original list:')\nprint(text_list)\nprint('\\nAfter scrambling the letters of the strings of the said list:')\nresult = [shuffle_word(word) for word in text_list]\nprint(result)"""	"""text_list = {}\n__original_start_marker = None\nfrom random import shuffle\n\ndef shuffle_word(text_list):\n    text_list = list(text_list)\n    shuffle(text_list)\n    return ''.join(text_list)\nprint('Original list:')\nprint(text_list)\nprint('\\nAfter scrambling the letters of the strings of the said list:')\nresult = [shuffle_word(word) for word in text_list]\nprint(result)"""	text_list	TBD0	list
'ctr = 0\nfor n in num:\n    if isinstance(n, tuple):\n        break\n    ctr += 1\nprint(ctr)'	'num = {}\n__original_start_marker = None\nctr = 0\nfor n in num:\n    if isinstance(n, tuple):\n        break\n    ctr += 1\nprint(ctr)'	num	TBD0	list
'import numpy as np\nx = np.array([-180.0, -90.0, 90.0, 180.0])\nr1 = np.radians(x)\nassert np.array_equiv(r1, r2)\nprint(r1)'	'class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nr2 = TBD1()\n__original_start_marker = None\nimport numpy as np\nx = np.array([(- 180.0), (- 90.0), 90.0, 180.0])\nr1 = np.radians(x)\nassert np.array_equiv(r1, r2)\nprint(r1)'	r2	TBD1	ndarray
"""import pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nIs lower (company_code)?')\ndf['company_code_ul_cases'] = list(map(lambda x: x.islower(), df['company_code']))\nprint(df)\nprint('\\nIs Upper (company_code)?')\ndf['company_code_ul_cases'] = list(map(lambda x: x.isupper(), df['company_code']))\nprint(df)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self):\n        self.container = {'company_code': TBD1()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\ndf = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nIs lower (company_code)?')\ndf['company_code_ul_cases'] = list(map((lambda x: x.islower()), df['company_code']))\nprint(df)\nprint('\\nIs Upper (company_code)?')\ndf['company_code_ul_cases'] = list(map((lambda x: x.isupper()), df['company_code']))\nprint(df)"""	df	TBD0	DataFrame
"""def is_sort_list(nums):\n    result = all((nums[i] <= nums[i + 1] for i in range(len(nums) - 1)))\n    return result\nnums1 = [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]\nprint('Original list:')\nprint(nums1)\nprint('\\nIs the said list is sorted!')\nprint(is_sort_list(nums1))\nprint('\\nOriginal list:')\nprint(nums1)\nprint('\\nIs the said list is sorted!')\nprint(is_sort_list(nums2))"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __len__(self):\n        return 0\nnums2 = TBD1()\n__original_start_marker = None\n\ndef is_sort_list(nums):\n    result = all(((nums[i] <= nums[(i + 1)]) for i in range((len(nums) - 1))))\n    return result\nnums1 = [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]\nprint('Original list:')\nprint(nums1)\nprint('\\nIs the said list is sorted!')\nprint(is_sort_list(nums1))\nprint('\\nOriginal list:')\nprint(nums1)\nprint('\\nIs the said list is sorted!')\nprint(is_sort_list(nums2))"""	nums2	TBD1	list
"""import array as arr\ndef test(nums):\n    return sorted(set(nums), key=nums.index)\narray_num = arr.array('i', [1, 3, 5, 1, 3, 7, 9])\nprint('Original array:')\nfor i in range(len(array_num)):\n    print(array_num[i], end=' ')\nprint('\\nAfter removing duplicate elements from the said array:')\nfor i in range(len(result)):\n    print(result[i], end=' ')\narray_num = arr.array('i', [2, 4, 2, 6, 4, 8])\nprint('\\nOriginal array:')\nfor i in range(len(array_num)):\n    print(array_num[i], end=' ')\nprint('\\nAfter removing duplicate elements from the said array:')\nresult = arr.array('i', test(array_num))\nfor i in range(len(result)):\n    print(result[i], end=' ')"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __len__(self):\n        return 0\nresult = TBD2()\n__original_start_marker = None\nimport array as arr\n\ndef test(nums):\n    return sorted(set(nums), key=nums.index)\narray_num = arr.array('i', [1, 3, 5, 1, 3, 7, 9])\nprint('Original array:')\nfor i in range(len(array_num)):\n    print(array_num[i], end=' ')\nprint('\\nAfter removing duplicate elements from the said array:')\nfor i in range(len(result)):\n    print(result[i], end=' ')\narray_num = arr.array('i', [2, 4, 2, 6, 4, 8])\nprint('\\nOriginal array:')\nfor i in range(len(array_num)):\n    print(array_num[i], end=' ')\nprint('\\nAfter removing duplicate elements from the said array:')\nresult = arr.array('i', test(array_num))\nfor i in range(len(result)):\n    print(result[i], end=' ')"""	result	TBD2	array
"""import numpy as np\nv = np.arange(7)\nresult = np.linalg.norm(v)\nprint('Vector norm:')\nprint(result)\nm = np.matrix('1, 2; 3, 4')\nprint('Matrix norm:')\nprint(result1)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult1 = TBD0()\n__original_start_marker = None\nimport numpy as np\nv = np.arange(7)\nresult = np.linalg.norm(v)\nprint('Vector norm:')\nprint(result)\nm = np.matrix('1, 2; 3, 4')\nprint('Matrix norm:')\nprint(result1)"""	result1	TBD0	float64
"""import numpy as np\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8]\nprint('List to array: ')\nprint(np.asarray(my_list))\nprint('Tuple to array: ')\nprint(np.asarray(my_tuple))"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nmy_tuple = TBD1()\n__original_start_marker = None\nimport numpy as np\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8]\nprint('List to array: ')\nprint(np.asarray(my_list))\nprint('Tuple to array: ')\nprint(np.asarray(my_tuple))"""	my_tuple	TBD1	tuple
"""print('Original Dictionary:')\nprint(marks)\nprint('Marks greater than 170:')\nresult = {key: value for key, value in marks.items() if value >= 170}\nprint(result)"""	"""marks = {}\n__original_start_marker = None\nprint('Original Dictionary:')\nprint(marks)\nprint('Marks greater than 170:')\nresult = {key: value for (key, value) in marks.items() if (value >= 170)}\nprint(result)"""	marks	TBD0	dict
'import numpy as np\nimport pandas as pd\nnum_arra = np.arange(8)\nnum_dict = dict(zip(char_list, num_arra))\nnum_ser = pd.Series(num_dict)\ndf = num_ser.to_frame().reset_index()\nprint(df.head())'	'char_list = {}\n__original_start_marker = None\nimport numpy as np\nimport pandas as pd\nnum_arra = np.arange(8)\nnum_dict = dict(zip(char_list, num_arra))\nnum_ser = pd.Series(num_dict)\ndf = num_ser.to_frame().reset_index()\nprint(df.head())'	char_list	TBD0	list
"""def intersection_nested_lists(l1, l2):\n    result = [list(filter(lambda x: x in l1, sublist)) for sublist in l2]\n    return result\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nprint('\\nOriginal lists:')\nprint(nums1)\nprint(nums2)\nprint('\\nIntersection of said nested lists:')\nprint(intersection_nested_lists(nums1, nums2))"""	"""nums2 = {}\n__original_start_marker = None\n\ndef intersection_nested_lists(l1, l2):\n    result = [list(filter((lambda x: (x in l1)), sublist)) for sublist in l2]\n    return result\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nprint('\\nOriginal lists:')\nprint(nums1)\nprint(nums2)\nprint('\\nIntersection of said nested lists:')\nprint(intersection_nested_lists(nums1, nums2))"""	nums2	TBD1	list
"""from collections import Counter\nfrom itertools import chain\ndef max_aggregate(list_str, N):\n    temp = (set(sub) for sub in list_str)\n    counts = Counter(chain.from_iterable(temp))\n    gt_N = [chr for chr, count in counts.items() if count > N]\n    lt_N = [chr for chr, count in counts.items() if count < N]\n    return (gt_N, lt_N)\nprint('Original list:')\nprint(list_str)\nN = 3\nresult = max_aggregate(list_str, N)\nprint('\\nCharacters of the said list of strings which occur more than:', N)\nprint(result[0])\nprint('\\nCharacters of the said list of strings which occur less than:', N)\nprint(result[1])"""	"""list_str = {}\n__original_start_marker = None\nfrom collections import Counter\nfrom itertools import chain\n\ndef max_aggregate(list_str, N):\n    temp = (set(sub) for sub in list_str)\n    counts = Counter(chain.from_iterable(temp))\n    gt_N = [chr for (chr, count) in counts.items() if (count > N)]\n    lt_N = [chr for (chr, count) in counts.items() if (count < N)]\n    return (gt_N, lt_N)\nprint('Original list:')\nprint(list_str)\nN = 3\nresult = max_aggregate(list_str, N)\nprint('\\nCharacters of the said list of strings which occur more than:', N)\nprint(result[0])\nprint('\\nCharacters of the said list of strings which occur less than:', N)\nprint(result[1])"""	list_str	TBD0	list
"""def unique_values_in_list_of_lists(lst):\n    result = set((x for l in lst for x in l))\n    return list(result)\nnums = [[1, 2, 3, 5], [2, 3, 5, 4], [0, 5, 4, 1], [3, 7, 2, 1], [1, 2, 1, 2]]\nprint('Original list:')\nprint(nums)\nprint('Unique values of the said list of lists:')\nprint(unique_values_in_list_of_lists(nums))\nprint('\\nOriginal list:')\nprint(chars)\nprint('Unique values of the said list of lists:')\nprint(unique_values_in_list_of_lists(chars))"""	"""chars = {}\n__original_start_marker = None\n\ndef unique_values_in_list_of_lists(lst):\n    result = set((x for l in lst for x in l))\n    return list(result)\nnums = [[1, 2, 3, 5], [2, 3, 5, 4], [0, 5, 4, 1], [3, 7, 2, 1], [1, 2, 1, 2]]\nprint('Original list:')\nprint(nums)\nprint('Unique values of the said list of lists:')\nprint(unique_values_in_list_of_lists(nums))\nprint('\\nOriginal list:')\nprint(chars)\nprint('Unique values of the said list of lists:')\nprint(unique_values_in_list_of_lists(chars))"""	chars	TBD1	list
"""def sort_sublists(input_list):\n    result = [sorted(x, key=lambda x: x[0]) for x in input_list]\n    return result\nprint('\\nOriginal list:')\nprint(color1)\nprint('\\nAfter sorting each sublist of the said list of lists:')\nprint(sort_sublists(color1))"""	"""color1 = {}\n__original_start_marker = None\n\ndef sort_sublists(input_list):\n    result = [sorted(x, key=(lambda x: x[0])) for x in input_list]\n    return result\nprint('\\nOriginal list:')\nprint(color1)\nprint('\\nAfter sorting each sublist of the said list of lists:')\nprint(sort_sublists(color1))"""	color1	TBD0	list
"""import pandas as pd\nprint('Original Series of list')\nprint(s)\ns = s.apply(pd.Series).stack().reset_index(drop=True)\nprint('One Series')\nprint(s)"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def reset_index(self, drop=None):\n        return TBD3()\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def stack(self):\n        return TBD2()\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def apply(self, arg0):\n        return TBD1()\ns = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Original Series of list')\nprint(s)\ns = s.apply(pd.Series).stack().reset_index(drop=True)\nprint('One Series')\nprint(s)"""	s	TBD0	Series
"""import copy\nnums_x = {'a': 1, 'b': 2, 'cc': {'c': 3}}\nprint('Original dictionary: ', nums_x)\nnums_y = copy.deepcopy(nums_x)\nprint('\\nDeep copy of the said list:')\nprint(nums_y)\nprint('\\nChange the value of an element of the original dictionary:')\nnums_x['cc']['c'] = 10\nprint(nums_x)\nprint('\\nSecond dictionary (Deep copy):')\nprint(nums_y)\nnums = {'x': 1, 'y': 2, 'zz': {'z': 3}}\nprint('\\nOriginal dictionary :')\nprint(nums)\nprint('\\nDeep copy of the said list:')\nprint(nums_copy)\nprint('\\nChange the value of an element of the original dictionary:')\nnums['zz']['z'] = 10\nprint('\\nFirst dictionary:')\nprint(nums)\nprint('\\nSecond dictionary (Deep copy):')\nprint(nums_copy)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnums_copy = TBD2()\n__original_start_marker = None\nimport copy\nnums_x = {'a': 1, 'b': 2, 'cc': {'c': 3}}\nprint('Original dictionary: ', nums_x)\nnums_y = copy.deepcopy(nums_x)\nprint('\\nDeep copy of the said list:')\nprint(nums_y)\nprint('\\nChange the value of an element of the original dictionary:')\nnums_x['cc']['c'] = 10\nprint(nums_x)\nprint('\\nSecond dictionary (Deep copy):')\nprint(nums_y)\nnums = {'x': 1, 'y': 2, 'zz': {'z': 3}}\nprint('\\nOriginal dictionary :')\nprint(nums)\nprint('\\nDeep copy of the said list:')\nprint(nums_copy)\nprint('\\nChange the value of an element of the original dictionary:')\nnums['zz']['z'] = 10\nprint('\\nFirst dictionary:')\nprint(nums)\nprint('\\nSecond dictionary (Deep copy):')\nprint(nums_copy)"""	nums_copy	TBD2	dict
"""def cast_list(val):\n    return list(val) if isinstance(val, (tuple, list, set, dict)) else [val]\nd1 = [1]\nprint(type(d1))\nprint(cast_list(d1))\nd2 = ('Red', 'Green')\nprint(type(d2))\nprint(cast_list(d2))\nd3 = {'Red', 'Green'}\nprint(type(d3))\nprint(cast_list(d3))\nprint(type(d4))\nprint(cast_list(d4))"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\nd4 = TBD3()\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nval = TBD2()\n__original_start_marker = None\n\ndef cast_list(val):\n    return (list(val) if isinstance(val, (tuple, list, set, dict)) else [val])\nd1 = [1]\nprint(type(d1))\nprint(cast_list(d1))\nd2 = ('Red', 'Green')\nprint(type(d2))\nprint(cast_list(d2))\nd3 = {'Red', 'Green'}\nprint(type(d3))\nprint(cast_list(d3))\nprint(type(d4))\nprint(cast_list(d4))"""	d4	TBD3	dict
"""import pandas as pd\nfrom pandas.tseries.offsets import *\nimport datetime\nfrom datetime import datetime, date\ndt = datetime(2020, 1, 4)\nprint('Specified date:')\nprint(dt)\nprint('\\nOne business day from the said date:')\nobday = dt + BusinessDay()\nprint(obday)\nprint('\\nTwo business days from the said date:')\nprint(tbday)\nprint('\\nThree business days from the said date:')\nthbday = dt + 3 * BusinessDay()\nprint(thbday)\nprint('\\nNext business month end from the said date:')\nnbday = dt + BMonthEnd()\nprint(nbday)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\ntbday = TBD0()\n__original_start_marker = None\nimport pandas as pd\nfrom pandas.tseries.offsets import *\nimport datetime\nfrom datetime import datetime, date\ndt = datetime(2020, 1, 4)\nprint('Specified date:')\nprint(dt)\nprint('\\nOne business day from the said date:')\nobday = (dt + BusinessDay())\nprint(obday)\nprint('\\nTwo business days from the said date:')\nprint(tbday)\nprint('\\nThree business days from the said date:')\nthbday = (dt + (3 * BusinessDay()))\nprint(thbday)\nprint('\\nNext business month end from the said date:')\nnbday = (dt + BMonthEnd())\nprint(nbday)"""	tbday	TBD0	Timestamp
"""import numpy as np\np = np.array([[0, 0, 0], [1, 2, 3], [4, 5, 6]])\nq = np.array([10, 11, 12])\nprint('Original arrays:')\nprint('Array-1')\nprint(p)\nprint('Array-2')\nprint(q)\nprint('\\nNew Array:')\nprint(new_array1)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnew_array1 = TBD2()\n__original_start_marker = None\nimport numpy as np\np = np.array([[0, 0, 0], [1, 2, 3], [4, 5, 6]])\nq = np.array([10, 11, 12])\nprint('Original arrays:')\nprint('Array-1')\nprint(p)\nprint('Array-2')\nprint(q)\nprint('\\nNew Array:')\nprint(new_array1)"""	new_array1	TBD2	ndarray
"""from collections import defaultdict\ndef grouping_dictionary(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return d\nprint('Original list:')\nprint(colors)\nprint('\\nGrouping a sequence of key-value pairs into a dictionary of lists:')\nprint(grouping_dictionary(colors))"""	"""colors = {}\n__original_start_marker = None\nfrom collections import defaultdict\n\ndef grouping_dictionary(l):\n    d = defaultdict(list)\n    for (k, v) in l:\n        d[k].append(v)\n    return d\nprint('Original list:')\nprint(colors)\nprint('\\nGrouping a sequence of key-value pairs into a dictionary of lists:')\nprint(grouping_dictionary(colors))"""	colors	TBD0	list
"""import numpy as np\nprint('Original arrays:')\nprint(array_nums1)\nresult = array_nums1[(array_nums1 > 6) & (array_nums1 % 3 == 0)]\nprint('\\nItems greater than 6 and a multiple of 3 of the said array:')\nprint(result)"""	"""class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __and__(self, other):\n        return TBD4()\n\nclass TBD0(int):\n\n    def __init__(self):\n        self.container = {'TBD4': TBD4()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n\n    def __gt__(self, other):\n        return TBD3()\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\narray_nums1 = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Original arrays:')\nprint(array_nums1)\nresult = array_nums1[((array_nums1 > 6) & ((array_nums1 % 3) == 0))]\nprint('\\nItems greater than 6 and a multiple of 3 of the said array:')\nprint(result)"""	array_nums1	TBD0	ndarray
"""from bisect import bisect_left\ndef Binary_Search(l, x):\n    i = bisect_left(l, x)\n    if i:\n        return i - 1\n    else:\n        return -1\nnums = [1, 2, 3, 4, 8, 8, 10, 12]\nx = 5\nif num_position == -1:\n    print('Not found..!')\nelse:\n    print('Largest value smaller than ', x, ' is at index ', num_position)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnum_position = TBD1()\n__original_start_marker = None\nfrom bisect import bisect_left\n\ndef Binary_Search(l, x):\n    i = bisect_left(l, x)\n    if i:\n        return (i - 1)\n    else:\n        return (- 1)\nnums = [1, 2, 3, 4, 8, 8, 10, 12]\nx = 5\nif (num_position == (- 1)):\n    print('Not found..!')\nelse:\n    print('Largest value smaller than ', x, ' is at index ', num_position)"""	num_position	TBD1	int
"'import json\npython_obj = \'{""a"":  1, ""a"":  2, ""a"":  3, ""a"": 4, ""b"": 1, ""b"": 2}\'\nprint(\'Original Python object:\')\nprint(python_obj)\nprint(\'\\nUnique Key in a JSON object:\')\nprint(json_obj)'"	"'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\njson_obj = TBD0()\n__original_start_marker = None\nimport json\npython_obj = \'{""a"":  1, ""a"":  2, ""a"":  3, ""a"": 4, ""b"": 1, ""b"": 2}\'\nprint(\'Original Python object:\')\nprint(python_obj)\nprint(\'\\nUnique Key in a JSON object:\')\nprint(json_obj)'"	json_obj	TBD0	dict
"""from collections import Counter\nl1 = [1, 1, 2, 3, 3, 4, 4, 5, 6, 7]\nl2 = [1, 1, 2, 4, 5, 6]\nprint('Original lists:')\nc1 = Counter(l1)\nc2 = Counter(l2)\nprint(list(diff.elements()))"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def elements(self):\n        return {}\ndiff = TBD2()\n__original_start_marker = None\nfrom collections import Counter\nl1 = [1, 1, 2, 3, 3, 4, 4, 5, 6, 7]\nl2 = [1, 1, 2, 4, 5, 6]\nprint('Original lists:')\nc1 = Counter(l1)\nc2 = Counter(l2)\nprint(list(diff.elements()))"""	diff	TBD2	Counter
"""import itertools\ndef interleave_multiple_lists(list1, list2, list3):\n    result = list(itertools.chain(*zip(list1, list2, list3)))\n    return result\nlist1 = [100, 200, 300, 400, 500, 600, 700]\nlist2 = [10, 20, 30, 40, 50, 60, 70]\nprint('Original list:')\nprint('list1:', list1)\nprint('list2:', list2)\nprint('list3:', list3)\nprint('\\nInterleave multiple lists:')\nprint(interleave_multiple_lists(list1, list2, list3))"""	"""list3 = {}\n__original_start_marker = None\nimport itertools\n\ndef interleave_multiple_lists(list1, list2, list3):\n    result = list(itertools.chain(*zip(list1, list2, list3)))\n    return result\nlist1 = [100, 200, 300, 400, 500, 600, 700]\nlist2 = [10, 20, 30, 40, 50, 60, 70]\nprint('Original list:')\nprint('list1:', list1)\nprint('list2:', list2)\nprint('list3:', list3)\nprint('\\nInterleave multiple lists:')\nprint(interleave_multiple_lists(list1, list2, list3))"""	list3	TBD2	list
"""import pandas as pd\nnums = {'amount': ['10', '250', '3000', '40000', '500000']}\nprint('Original dataframe:')\nprint(df)\nprint('\\nAdd leading zeros:')\ndf['amount'] = list(map(lambda x: x.zfill(10), df['amount']))\nprint(df)"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self):\n        self.container = {'amount': TBD3()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\ndf = TBD2()\n\nclass TBD1():\n\n    def __init__(self):\n        self.container = {'amount': TBD0()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n\nclass TBD0():\n\n    def __init__(self):\n        self.container = {0: '10', 1: '250', 2: '3000', 3: '40000', 4: '500000'}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n__original_start_marker = None\nimport pandas as pd\nnums = TBD1()\nprint('Original dataframe:')\nprint(df)\nprint('\\nAdd leading zeros:')\ndf['amount'] = list(map((lambda x: x.zfill(10)), df['amount']))\nprint(df)"""	df	TBD2	DataFrame
"""def interleave_multiple_lists(list1, list2, list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nlist3 = [100, 200, 300, 400, 500, 600, 700]\nprint('Original list:')\nprint('list1:', list1)\nprint('list2:', list2)\nprint('list3:', list3)\nprint('\\nInterleave multiple lists:')\nprint(interleave_multiple_lists(list1, list2, list3))"""	"""list2 = {}\n__original_start_marker = None\n\ndef interleave_multiple_lists(list1, list2, list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nlist3 = [100, 200, 300, 400, 500, 600, 700]\nprint('Original list:')\nprint('list1:', list1)\nprint('list2:', list2)\nprint('list3:', list3)\nprint('\\nInterleave multiple lists:')\nprint(interleave_multiple_lists(list1, list2, list3))"""	list2	TBD2	list
"""def inset_element_list(lst, x, n):\n    i = n\n    while i < len(lst):\n        lst.insert(i, x)\n        i += n + 1\n    return lst\nprint('Original list:')\nprint(nums)\nx = 20\nn = 4\nprint('\\nInsert', x, 'in said list after every', n, 'th element:')\nprint(inset_element_list(nums, x, n))\nchars = ['s', 'd', 'f', 'j', 's', 'a', 'j', 'd', 'f', 'd']\nprint('\\nOriginal list:')\nprint(chars)\nx = 'Z'\nn = 3\nprint('\\nInsert', x, 'in said list after every', n, 'th element:')\nprint(inset_element_list(chars, x, n))"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __len__(self):\n        return 0\nnums = TBD1()\n__original_start_marker = None\n\ndef inset_element_list(lst, x, n):\n    i = n\n    while (i < len(lst)):\n        lst.insert(i, x)\n        i += (n + 1)\n    return lst\nprint('Original list:')\nprint(nums)\nx = 20\nn = 4\nprint('\\nInsert', x, 'in said list after every', n, 'th element:')\nprint(inset_element_list(nums, x, n))\nchars = ['s', 'd', 'f', 'j', 's', 'a', 'j', 'd', 'f', 'd']\nprint('\\nOriginal list:')\nprint(chars)\nx = 'Z'\nn = 3\nprint('\\nInsert', x, 'in said list after every', n, 'th element:')\nprint(inset_element_list(chars, x, n))"""	nums	TBD1	list
"""import numpy as np\nprint('Array of the integers from 30 to70')\nprint(array)"""	"""import array\n__original_start_marker = None\nimport numpy as np\nprint('Array of the integers from 30 to70')\nprint(array)"""	array		ndarray
"""import numpy as np\nprint('\\nOriginal arrays:')\nx = np.array((1, 2, 3))\ny = np.array((2, 3, 4))\nprint('Array-1')\nprint(x)\nprint('Array-2')\nprint(y)\nprint('\\nStack 1-D arrays as columns wise:')\nprint(new_array)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnew_array = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('\\nOriginal arrays:')\nx = np.array((1, 2, 3))\ny = np.array((2, 3, 4))\nprint('Array-1')\nprint(x)\nprint('Array-2')\nprint(y)\nprint('\\nStack 1-D arrays as columns wise:')\nprint(new_array)"""	new_array	TBD0	ndarray
"""import numpy as np\nprint('Random number between 0 and 1:')\nprint(rand_num)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nrand_num = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Random number between 0 and 1:')\nprint(rand_num)"""	rand_num	TBD0	ndarray
"""def same_order(l1, l2):\n    common_elements = set(l1) & set(l2)\n    l1 = [e for e in l1 if e in common_elements]\n    l2 = [e for e in l2 if e in common_elements]\n    return l1 == l2\ncolor2 = ['red', 'pink', 'green', 'white', 'black']\ncolor3 = ['white', 'orange', 'pink', 'black']\nprint('Original lists:')\nprint(color1)\nprint(color2)\nprint(color3)\nprint('\\nTest common elements between color1 and color2 are in same order?')\nprint(same_order(color1, color2))\nprint('\\nTest common elements between color1 and color3 are in same order?')\nprint(same_order(color1, color3))\nprint('\\nTest common elements between color2 and color3 are in same order?')\nprint(same_order(color2, color3))"""	"""color1 = {}\n__original_start_marker = None\n\ndef same_order(l1, l2):\n    common_elements = (set(l1) & set(l2))\n    l1 = [e for e in l1 if (e in common_elements)]\n    l2 = [e for e in l2 if (e in common_elements)]\n    return (l1 == l2)\ncolor2 = ['red', 'pink', 'green', 'white', 'black']\ncolor3 = ['white', 'orange', 'pink', 'black']\nprint('Original lists:')\nprint(color1)\nprint(color2)\nprint(color3)\nprint('\\nTest common elements between color1 and color2 are in same order?')\nprint(same_order(color1, color2))\nprint('\\nTest common elements between color1 and color3 are in same order?')\nprint(same_order(color1, color3))\nprint('\\nTest common elements between color2 and color3 are in same order?')\nprint(same_order(color2, color3))"""	color1	TBD2	list
"""import numpy as np\narray_nums = np.arange(0, 40, 2)\nprint('Original array:')\nprint(array_nums)\nprint('\\nNew array of shape(5, 4):')\nprint(new_array)\nprint('\\nRestore the reshaped array into a 1-D array:')\nprint(new_array.flatten())"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def flatten(self):\n        return TBD1()\nnew_array = TBD0()\n__original_start_marker = None\nimport numpy as np\narray_nums = np.arange(0, 40, 2)\nprint('Original array:')\nprint(array_nums)\nprint('\\nNew array of shape(5, 4):')\nprint(new_array)\nprint('\\nRestore the reshaped array into a 1-D array:')\nprint(new_array.flatten())"""	new_array	TBD0	ndarray
"""import numpy as np\nx = np.array([1, 3, 5, 7, 0])\nprint('Original array: ')\nprint(x)\nr2 = np.insert(np.append(np.diff(x), 200), 0, [0, 0])\nassert np.array_equiv(r1, r2)\nprint('Difference between neighboring elements, element-wise, and prepend [0, 0] and append[200] to the said array:')\nprint(r2)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nr1 = TBD2()\n__original_start_marker = None\nimport numpy as np\nx = np.array([1, 3, 5, 7, 0])\nprint('Original array: ')\nprint(x)\nr2 = np.insert(np.append(np.diff(x), 200), 0, [0, 0])\nassert np.array_equiv(r1, r2)\nprint('Difference between neighboring elements, element-wise, and prepend [0, 0] and append[200] to the said array:')\nprint(r2)"""	r1	TBD2	ndarray
"""import re\nx = True\nwhile x:\n    if len(p) < 6 or len(p) > 12:\n        break\n    elif not re.search('[a-z]', p):\n        break\n    elif not re.search('[0-9]', p):\n        break\n    elif not re.search('[A-Z]', p):\n        break\n    elif not re.search('[$#@]', p):\n        break\n    elif re.search('\\\\s', p):\n        break\n    else:\n        print('Valid Password')\n        x = False\n        break\nif x:\n    print('Not a Valid Password')"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __len__(self):\n        return 0\np = TBD0()\n__original_start_marker = None\nimport re\nx = True\nwhile x:\n    if ((len(p) < 6) or (len(p) > 12)):\n        break\n    elif (not re.search('[a-z]', p)):\n        break\n    elif (not re.search('[0-9]', p)):\n        break\n    elif (not re.search('[A-Z]', p)):\n        break\n    elif (not re.search('[$#@]', p)):\n        break\n    elif re.search('\\\\s', p):\n        break\n    else:\n        print('Valid Password')\n        x = False\n        break\nif x:\n    print('Not a Valid Password')"""	p	TBD0	str
'print(l)'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nl = TBD0()\n__original_start_marker = None\nprint(l)'	l	TBD0	list
"""def extract_string(str_list1, l):\n    result = [e for e in str_list1 if len(e) == l]\n    return result\nprint('Original list:')\nprint(str_list1)\nl = 8\nprint('\\nlength of the string to extract:')\nprint(l)\nprint('\\nAfter extracting strings of specified length from the said list:')\nprint(extract_string(str_list1, l))"""	"""str_list1 = {}\n__original_start_marker = None\n\ndef extract_string(str_list1, l):\n    result = [e for e in str_list1 if (len(e) == l)]\n    return result\nprint('Original list:')\nprint(str_list1)\nl = 8\nprint('\\nlength of the string to extract:')\nprint(l)\nprint('\\nAfter extracting strings of specified length from the said list:')\nprint(extract_string(str_list1, l))"""	str_list1	TBD0	list
"""import collections\nodd_nums = (1, 3, 5, 7, 9)\nprint('Original Deque object with odd numbers:')\nprint(odd_deque)\nprint('Deque length: %d' % len(odd_deque))\nodd_deque.clear()\nprint('Deque object after removing all numbers-')\nprint(odd_deque)\nprint('Deque length:%d' % len(odd_deque))"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __len__(self):\n        return 0\n\n    def clear(self):\n        return TBD2()\nodd_deque = TBD0()\n__original_start_marker = None\nimport collections\nodd_nums = (1, 3, 5, 7, 9)\nprint('Original Deque object with odd numbers:')\nprint(odd_deque)\nprint(('Deque length: %d' % len(odd_deque)))\nodd_deque.clear()\nprint('Deque object after removing all numbers-')\nprint(odd_deque)\nprint(('Deque length:%d' % len(odd_deque)))"""	odd_deque	TBD0	deque
"""class Node(object):\n    def __init__(self, data=None, next=None, prev=None):\n        self.data = data\n        self.next = next\n        self.prev = prev\nclass doubly_linked_list(object):\n    def __init__(self):\n        self.head = None\n        self.tail = None\n        self.count = 0\n    def append_item(self, data):\n        new_item = Node(data, None, None)\n        if self.head is None:\n            self.head = new_item\n            self.tail = self.head\n        else:\n            new_item.prev = self.tail\n            self.tail.next = new_item\n            self.tail = new_item\n        self.count += 1\n    def print_foward(self):\n        for node in self.iter():\n            print(node)\n    def print_backward(self):\n        current = self.tail\n        while current:\n            print(current.data)\n            current = current.prev\n    def iter(self):\n        current = self.head\n        while current:\n            item_val = current.data\n            current = current.next\n            yield item_val\nitems.append_item('PHP')\nitems.append_item('Python')\nitems.append_item('C#')\nitems.append_item('C++')\nitems.append_item('Java')\nprint('Print Items in the Doubly linked backwards:')\nitems.print_backward()"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def append_item(self, arg0):\n        return TBD1()\n\n    def print_backward(self):\n        return TBD2()\nitems = TBD0()\n__original_start_marker = None\n\nclass Node(object):\n\n    def __init__(self, data=None, next=None, prev=None):\n        self.data = data\n        self.next = next\n        self.prev = prev\nitems.append_item('PHP')\nitems.append_item('Python')\nitems.append_item('C#')\nitems.append_item('C++')\nitems.append_item('Java')\nprint('Print Items in the Doubly linked backwards:')\nitems.print_backward()"""	items	TBD0	doubly_linked_list
"""class Node(object):\n    def __init__(self, value=None, next=None, prev=None):\n        self.value = value\n        self.next = next\n        self.prev = prev\nclass doubly_linked_list(object):\n    def __init__(self):\n        self.head = None\n        self.tail = None\n        self.count = 0\n    def append_item(self, value):\n        new_item = Node(value, None, None)\n        if self.head is None:\n            self.head = new_item\n            self.tail = self.head\n        else:\n            new_item.prev = self.tail\n            self.tail.next = new_item\n            self.tail = new_item\n        self.count += 1\n    def iter(self):\n        current = self.head\n        while current:\n            item_val = current.value\n            current = current.next\n            yield item_val\n    def print_foward(self):\n        for node in self.iter():\n            print(node)\n    def search_item(self, val):\n        for node in self.iter():\n            if val == node:\n                return True\n        return False\n    def delete(self, value):\n        current = self.head\n        node_deleted = False\n        if current is None:\n            node_deleted = False\n        elif current.value == value:\n            self.head = current.next\n            self.head.prev = None\n            node_deleted = True\n        elif self.tail.value == value:\n            self.tail = self.tail.prev\n            self.tail.next = None\n            node_deleted = True\n        else:\n            while current:\n                if current.value == value:\n                    current.prev.next = current.next\n                    current.next.prev = current.prev\n                    node_deleted = True\n                current = current.next\n        if node_deleted:\n            self.count -= 1\nitems.append_item('PHP')\nitems.append_item('Python')\nitems.append_item('C#')\nitems.append_item('C++')\nitems.append_item('Java')\nitems.append_item('SQL')\nprint('Original list:')\nitems.print_foward()\nitems.delete('Java')\nitems.delete('Python')\nprint('\\nList after deleting two items:')\nitems.print_foward()"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def append_item(self, arg0):\n        return TBD1()\n\n    def print_foward(self):\n        return TBD2()\n\n    def delete(self, arg0):\n        return TBD3()\nitems = TBD0()\n__original_start_marker = None\n\nclass Node(object):\n\n    def __init__(self, value=None, next=None, prev=None):\n        self.value = value\n        self.next = next\n        self.prev = prev\nitems.append_item('PHP')\nitems.append_item('Python')\nitems.append_item('C#')\nitems.append_item('C++')\nitems.append_item('Java')\nitems.append_item('SQL')\nprint('Original list:')\nitems.print_foward()\nitems.delete('Java')\nitems.delete('Python')\nprint('\\nList after deleting two items:')\nitems.print_foward()"""	items	TBD0	doubly_linked_list
"""import numpy as np\nprint('\\nOriginal arrays:')\nx = np.array((1, 2, 3))\ny = np.array((2, 3, 4))\nprint('Array-1')\nprint(x)\nprint('Array-2')\nprint(y)\nprint('\\nStack 1-D arrays as rows wise:')\nprint(new_array)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnew_array = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('\\nOriginal arrays:')\nx = np.array((1, 2, 3))\ny = np.array((2, 3, 4))\nprint('Array-1')\nprint(x)\nprint('Array-2')\nprint(y)\nprint('\\nStack 1-D arrays as rows wise:')\nprint(new_array)"""	new_array	TBD0	ndarray
'import numpy as np\nx = np.array(a)\na2 = x.tolist()\nprint(a == a2)'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\na = TBD0()\n__original_start_marker = None\nimport numpy as np\nx = np.array(a)\na2 = x.tolist()\nprint((a == a2))'	a	TBD0	list
"""def inset_element_list(lst, x, n):\n    i = n\n    while i < len(lst):\n        lst.insert(i, x)\n        i += n + 1\n    return lst\nnums = [1, 3, 5, 7, 9, 11, 0, 2, 4, 6, 8, 10, 8, 9, 0, 4, 3, 0]\nprint('Original list:')\nprint(nums)\nx = 20\nprint('\\nInsert', x, 'in said list after every', n, 'th element:')\nprint(inset_element_list(nums, x, n))\nchars = ['s', 'd', 'f', 'j', 's', 'a', 'j', 'd', 'f', 'd']\nprint('\\nOriginal list:')\nprint(chars)\nx = 'Z'\nn = 3\nprint('\\nInsert', x, 'in said list after every', n, 'th element:')\nprint(inset_element_list(chars, x, n))"""	"""class TBD5():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\nn = 0\n\nclass TBD0():\n\n    def __init__(self):\n        self.container = {0: 1, 1: 3, 2: 5, 3: 7, 4: 9, 5: 11, 6: 0, 7: 2, 8: 4, 9: 6, 10: 8, 11: 10, 12: 8, 13: 9, 14: 0, 15: 4, 16: 3, 17: 0}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n\n    def insert(self, arg0, arg1):\n        return TBD4()\n__original_start_marker = None\n\ndef inset_element_list(lst, x, n):\n    i = n\n    while (i < len(lst)):\n        lst.insert(i, x)\n        i += (n + 1)\n    return lst\nnums = TBD0()\nprint('Original list:')\nprint(nums)\nx = 20\nprint('\\nInsert', x, 'in said list after every', n, 'th element:')\nprint(inset_element_list(nums, x, n))\nchars = ['s', 'd', 'f', 'j', 's', 'a', 'j', 'd', 'f', 'd']\nprint('\\nOriginal list:')\nprint(chars)\nx = 'Z'\nn = 3\nprint('\\nInsert', x, 'in said list after every', n, 'th element:')\nprint(inset_element_list(chars, x, n))"""	n	TBD2	int
"""import itertools\ndef interleave_multiple_lists(list1, list2, list3):\n    result = list(itertools.chain(*zip(list1, list2, list3)))\n    return result\nlist1 = [100, 200, 300, 400, 500, 600, 700]\nlist3 = [1, 2, 3, 4, 5, 6, 7]\nprint('Original list:')\nprint('list1:', list1)\nprint('list2:', list2)\nprint('list3:', list3)\nprint('\\nInterleave multiple lists:')\nprint(interleave_multiple_lists(list1, list2, list3))"""	"""list2 = {}\n__original_start_marker = None\nimport itertools\n\ndef interleave_multiple_lists(list1, list2, list3):\n    result = list(itertools.chain(*zip(list1, list2, list3)))\n    return result\nlist1 = [100, 200, 300, 400, 500, 600, 700]\nlist3 = [1, 2, 3, 4, 5, 6, 7]\nprint('Original list:')\nprint('list1:', list1)\nprint('list2:', list2)\nprint('list3:', list3)\nprint('\\nInterleave multiple lists:')\nprint(interleave_multiple_lists(list1, list2, list3))"""	list2	TBD2	list
"""def interleave_multiple_lists(list1, list2, list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nlist2 = [10, 20, 30, 40, 50, 60, 70]\nprint('Original list:')\nprint('list1:', list1)\nprint('list2:', list2)\nprint('list3:', list3)\nprint('\\nInterleave multiple lists:')\nprint(interleave_multiple_lists(list1, list2, list3))"""	"""list3 = {}\n__original_start_marker = None\n\ndef interleave_multiple_lists(list1, list2, list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nlist2 = [10, 20, 30, 40, 50, 60, 70]\nprint('Original list:')\nprint('list1:', list1)\nprint('list2:', list2)\nprint('list3:', list3)\nprint('\\nInterleave multiple lists:')\nprint(interleave_multiple_lists(list1, list2, list3))"""	list3	TBD2	list
"""from collections import Counter\nl1 = [1, 1, 2, 3, 3, 4, 4, 5, 6, 7]\nl2 = [1, 1, 2, 4, 5, 6]\nprint('Original lists:')\nc2 = Counter(l2)\ndiff = c1 - c2\nprint(list(diff.elements()))"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def elements(self):\n        return {}\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __sub__(self, other):\n        return TBD3()\nc1 = TBD2()\n__original_start_marker = None\nfrom collections import Counter\nl1 = [1, 1, 2, 3, 3, 4, 4, 5, 6, 7]\nl2 = [1, 1, 2, 4, 5, 6]\nprint('Original lists:')\nc2 = Counter(l2)\ndiff = (c1 - c2)\nprint(list(diff.elements()))"""	c1	TBD2	Counter
"'import pandas as pd\npd.set_option(\'display.max_rows\', None)\nprint(\'Original DataFrame:\')\nprint(student_data)\nprint(\'\\nSplit the said data on school_code wise:\')\ngrouped = student_data.groupby([\'school_code\'])\nprint(""Call school code \'s001\':"")\nprint(grouped.get_group(\'s001\'))\nprint(""\\nCall school code \'s004\':"")\nprint(grouped.get_group(\'s004\'))'"	"'class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def get_group(self, arg0):\n        return TBD3()\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def groupby(self, arg0):\n        return TBD2()\nstudent_data = TBD1()\n__original_start_marker = None\nimport pandas as pd\npd.set_option(\'display.max_rows\', None)\nprint(\'Original DataFrame:\')\nprint(student_data)\nprint(\'\\nSplit the said data on school_code wise:\')\ngrouped = student_data.groupby([\'school_code\'])\nprint(""Call school code \'s001\':"")\nprint(grouped.get_group(\'s001\'))\nprint(""\\nCall school code \'s004\':"")\nprint(grouped.get_group(\'s004\'))'"	student_data	TBD1	DataFrame
"""from bisect import bisect_left\ndef Binary_Search(l, x):\n    i = bisect_left(l, x)\n    if i:\n        return i - 1\n    else:\n        return -1\nx = 5\nnum_position = Binary_Search(nums, x)\nif num_position == -1:\n    print('Not found..!')\nelse:\n    print('Largest value smaller than ', x, ' is at index ', num_position)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __len__(self):\n        return 0\nnums = TBD0()\n__original_start_marker = None\nfrom bisect import bisect_left\n\ndef Binary_Search(l, x):\n    i = bisect_left(l, x)\n    if i:\n        return (i - 1)\n    else:\n        return (- 1)\nx = 5\nnum_position = Binary_Search(nums, x)\nif (num_position == (- 1)):\n    print('Not found..!')\nelse:\n    print('Largest value smaller than ', x, ' is at index ', num_position)"""	nums	TBD0	list
"""import numpy as np\narray_nums1 = np.arange(20).reshape(4, 5)\nprint('Original arrays:')\nprint(array_nums1)\nprint('\\nItems greater than 6 and a multiple of 3 of the said array:')\nprint(result)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD0()\n__original_start_marker = None\nimport numpy as np\narray_nums1 = np.arange(20).reshape(4, 5)\nprint('Original arrays:')\nprint(array_nums1)\nprint('\\nItems greater than 6 and a multiple of 3 of the said array:')\nprint(result)"""	result	TBD0	ndarray
"'from collections import Counter\nstr = \'abcd\'\nprint(\'Orginal list of strings:\')\nprint(texts)\nresult = list(filter(lambda x: Counter(str) == Counter(x), texts))\nprint(""\\nAnagrams of \'abcd\' in the above string: "")\nprint(result)'"	"'texts = {}\n__original_start_marker = None\nfrom collections import Counter\nstr = \'abcd\'\nprint(\'Orginal list of strings:\')\nprint(texts)\nresult = list(filter((lambda x: (Counter(str) == Counter(x))), texts))\nprint(""\\nAnagrams of \'abcd\' in the above string: "")\nprint(result)'"	texts	TBD0	list
'def test(students):\n    return {value: key for key, value in students.items()}\nprint(test(students))'	'students = {}\n__original_start_marker = None\n\ndef test(students):\n    return {value: key for (key, value) in students.items()}\nprint(test(students))'	students	TBD0	dict
"""import pandas as pd\nfrom pandas.tseries.offsets import *\nimport datetime\nfrom datetime import datetime, date\ndt = datetime(2020, 1, 4)\nprint('Specified date:')\nprint(dt)\nprint('\\nOne business day from the said date:')\nprint(obday)\nprint('\\nTwo business days from the said date:')\ntbday = dt + 2 * BusinessDay()\nprint(tbday)\nprint('\\nThree business days from the said date:')\nthbday = dt + 3 * BusinessDay()\nprint(thbday)\nprint('\\nNext business month end from the said date:')\nnbday = dt + BMonthEnd()\nprint(nbday)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nobday = TBD0()\n__original_start_marker = None\nimport pandas as pd\nfrom pandas.tseries.offsets import *\nimport datetime\nfrom datetime import datetime, date\ndt = datetime(2020, 1, 4)\nprint('Specified date:')\nprint(dt)\nprint('\\nOne business day from the said date:')\nprint(obday)\nprint('\\nTwo business days from the said date:')\ntbday = (dt + (2 * BusinessDay()))\nprint(tbday)\nprint('\\nThree business days from the said date:')\nthbday = (dt + (3 * BusinessDay()))\nprint(thbday)\nprint('\\nNext business month end from the said date:')\nnbday = (dt + BMonthEnd())\nprint(nbday)"""	obday	TBD0	Timestamp
"""def test(dictt):\n    result = sum((len(values) for values in dictt.values()))\n    return result\nprint('\\nOriginal dictionary:')\nprint(color)\nprint('\\nTotal length of all values of the said dictionary with string values:')\nprint(test(color))"""	"""color = {}\n__original_start_marker = None\n\ndef test(dictt):\n    result = sum((len(values) for values in dictt.values()))\n    return result\nprint('\\nOriginal dictionary:')\nprint(color)\nprint('\\nTotal length of all values of the said dictionary with string values:')\nprint(test(color))"""	color	TBD0	dict
"""def cast_list(val):\n    return list(val) if isinstance(val, (tuple, list, set, dict)) else [val]\nprint(type(d1))\nprint(cast_list(d1))\nd2 = ('Red', 'Green')\nprint(type(d2))\nprint(cast_list(d2))\nd3 = {'Red', 'Green'}\nprint(type(d3))\nprint(cast_list(d3))\nd4 = {1: 'Red', 2: 'Green', 3: 'Black'}\nprint(type(d4))\nprint(cast_list(d4))"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\nval = TBD3()\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nd1 = TBD2()\n__original_start_marker = None\n\ndef cast_list(val):\n    return (list(val) if isinstance(val, (tuple, list, set, dict)) else [val])\nprint(type(d1))\nprint(cast_list(d1))\nd2 = ('Red', 'Green')\nprint(type(d2))\nprint(cast_list(d2))\nd3 = {'Red', 'Green'}\nprint(type(d3))\nprint(cast_list(d3))\nd4 = ['Red', 'Green', 'Black']\nprint(type(d4))\nprint(cast_list(d4))"""	d1	TBD2	list
'import numpy as np\nprint(x)'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint(x)'	x	TBD0	ndarray
"""def same_order(l1, l2):\n    common_elements = set(l1) & set(l2)\n    l1 = [e for e in l1 if e in common_elements]\n    l2 = [e for e in l2 if e in common_elements]\n    return l1 == l2\ncolor1 = ['red', 'green', 'black', 'orange']\ncolor3 = ['white', 'orange', 'pink', 'black']\nprint('Original lists:')\nprint(color1)\nprint(color2)\nprint(color3)\nprint('\\nTest common elements between color1 and color2 are in same order?')\nprint(same_order(color1, color2))\nprint('\\nTest common elements between color1 and color3 are in same order?')\nprint(same_order(color1, color3))\nprint('\\nTest common elements between color2 and color3 are in same order?')\nprint(same_order(color2, color3))"""	"""color2 = {}\n__original_start_marker = None\n\ndef same_order(l1, l2):\n    common_elements = (set(l1) & set(l2))\n    l1 = [e for e in l1 if (e in common_elements)]\n    l2 = [e for e in l2 if (e in common_elements)]\n    return (l1 == l2)\ncolor1 = ['red', 'green', 'black', 'orange']\ncolor3 = ['white', 'orange', 'pink', 'black']\nprint('Original lists:')\nprint(color1)\nprint(color2)\nprint(color3)\nprint('\\nTest common elements between color1 and color2 are in same order?')\nprint(same_order(color1, color2))\nprint('\\nTest common elements between color1 and color3 are in same order?')\nprint(same_order(color1, color3))\nprint('\\nTest common elements between color2 and color3 are in same order?')\nprint(same_order(color2, color3))"""	color2	TBD2	list
"""from array import array\ndef array_sum(nums_arr):\n    sum_n = 0\n    for n in nums_arr:\n        sum_n += n\n    return sum_n\nnums = array('i', [1, 2, 3, 4, 5, -15])\nprint('Original array:', nums)\nnums_arr = list(map(int, nums))\nprint('Sum of all elements of the said array:')\nprint(result)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD1()\n__original_start_marker = None\nfrom array import array\n\ndef array_sum(nums_arr):\n    sum_n = 0\n    for n in nums_arr:\n        sum_n += n\n    return sum_n\nnums = array('i', [1, 2, 3, 4, 5, (- 15)])\nprint('Original array:', nums)\nnums_arr = list(map(int, nums))\nprint('Sum of all elements of the said array:')\nprint(result)"""	result	TBD1	int
"""def value_check(students, n):\n    result = all((x == n for x in students.values()))\n    return result\nprint('Original Dictionary:')\nprint(students)\nn = 12\nprint('\\nCheck all are ', n, 'in the dictionary.')\nprint(value_check(students, n))\nn = 10\nprint('\\nCheck all are ', n, 'in the dictionary.')\nprint(value_check(students, n))"""	"""students = {}\n__original_start_marker = None\n\ndef value_check(students, n):\n    result = all(((x == n) for x in students.values()))\n    return result\nprint('Original Dictionary:')\nprint(students)\nn = 12\nprint('\\nCheck all are ', n, 'in the dictionary.')\nprint(value_check(students, n))\nn = 10\nprint('\\nCheck all are ', n, 'in the dictionary.')\nprint(value_check(students, n))"""	students	TBD0	dict
"""def extract_index_ele(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if m == n == o:\n            result.append(m)\n    return result\nnums1 = [1, 1, 3, 4, 5, 6, 7]\nnums2 = [0, 1, 2, 3, 4, 5, 7]\nprint('Original lists:')\nprint(nums1)\nprint(nums2)\nprint(nums3)\nprint('\\nCommon index elements of the said lists:')\nprint(extract_index_ele(nums1, nums2, nums3))"""	"""nums3 = {}\n__original_start_marker = None\n\ndef extract_index_ele(l1, l2, l3):\n    result = {}\n    for (m, n, o) in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result\nnums1 = [1, 1, 3, 4, 5, 6, 7]\nnums2 = [0, 1, 2, 3, 4, 5, 7]\nprint('Original lists:')\nprint(nums1)\nprint(nums2)\nprint(nums3)\nprint('\\nCommon index elements of the said lists:')\nprint(extract_index_ele(nums1, nums2, nums3))"""	nums3	TBD3	list
"""import numpy as np\nprint('Original array:')\nprint(x)\nprint('1 on the border and 0 inside in the array')\nx[1:-1, 1:-1] = 0\nprint(x)"""	"""class TBD0():\n\n    def __init__(self):\n        self.container = {}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\nx = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Original array:')\nprint(x)\nprint('1 on the border and 0 inside in the array')\nx[(1:(- 1), 1:(- 1))] = 0\nprint(x)"""	x	TBD0	ndarray
"""def check_string(str1):\n    messg = [lambda str1: any((x.isupper() for x in str1)) or 'String must have 1 upper case character.', lambda str1: any((x.islower() for x in str1)) or 'String must have 1 lower case character.', lambda str1: any((x.isdigit() for x in str1)) or 'String must have 1 number.', lambda str1: len(str1) >= 7 or 'String length should be atleast 8.']\n    result = [x for x in [i(str1) for i in messg] if x != True]\n    if not result:\n        result.append('Valid string.')\n    return result\nprint(check_string(s))"""	"""s = {}\n__original_start_marker = None\n\ndef check_string(str1):\n    messg = [(lambda str1: (any((x.isupper() for x in str1)) or 'String must have 1 upper case character.')), (lambda str1: (any((x.islower() for x in str1)) or 'String must have 1 lower case character.')), (lambda str1: (any((x.isdigit() for x in str1)) or 'String must have 1 number.')), (lambda str1: ((len(str1) >= 7) or 'String length should be atleast 8.'))]\n    result = [x for x in [i(str1) for i in messg] if (x != True)]\n    if (not result):\n        result.append('Valid string.')\n    return result\nprint(check_string(s))"""	s	TBD1	str
"""import collections\nodd_deque = collections.deque(odd_nums)\nprint('Original Deque object with odd numbers:')\nprint(odd_deque)\nprint('Deque length: %d' % len(odd_deque))\nodd_deque.clear()\nprint('Deque object after removing all numbers-')\nprint(odd_deque)\nprint('Deque length:%d' % len(odd_deque))"""	"""odd_nums = {}\n__original_start_marker = None\nimport collections\nodd_deque = collections.deque(odd_nums)\nprint('Original Deque object with odd numbers:')\nprint(odd_deque)\nprint(('Deque length: %d' % len(odd_deque)))\nodd_deque.clear()\nprint('Deque object after removing all numbers-')\nprint(odd_deque)\nprint(('Deque length:%d' % len(odd_deque)))"""	odd_nums	TBD0	tuple
"""def extract_string(str_list1, l):\n    result = [e for e in str_list1 if len(e) == l]\n    return result\nstr_list1 = ['Python', 'list', 'exercises', 'practice', 'solution']\nprint('Original list:')\nprint(str_list1)\nprint('\\nlength of the string to extract:')\nprint(l)\nprint('\\nAfter extracting strings of specified length from the said list:')\nprint(extract_string(str_list1, l))"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nl = TBD1()\n__original_start_marker = None\n\ndef extract_string(str_list1, l):\n    result = [e for e in str_list1 if (len(e) == l)]\n    return result\nstr_list1 = ['Python', 'list', 'exercises', 'practice', 'solution']\nprint('Original list:')\nprint(str_list1)\nprint('\\nlength of the string to extract:')\nprint(l)\nprint('\\nAfter extracting strings of specified length from the said list:')\nprint(extract_string(str_list1, l))"""	l	TBD1	int
"""def check_string(s):\n    messg = []\n    if not any((x.isupper() for x in s)):\n        messg.append('String must have 1 upper case character.')\n    if not any((x.islower() for x in s)):\n        messg.append('String must have 1 lower case character.')\n    if not any((x.isdigit() for x in s)):\n        messg.append('String must have 1 number.')\n    if len(s) < 8:\n        messg.append('String length should be atleast 8.')\n    if not messg:\n        messg.append('Valid string.')\n    return messg\nprint(check_string(s))"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\ns = {}\n__original_start_marker = None\n\ndef check_string(s):\n    messg = []\n    if (not any((x.isupper() for x in s))):\n        messg.append('String must have 1 upper case character.')\n    if (not any((x.islower() for x in s))):\n        messg.append('String must have 1 lower case character.')\n    if (not any((x.isdigit() for x in s))):\n        messg.append('String must have 1 number.')\n    if (len(s) < 8):\n        messg.append('String length should be atleast 8.')\n    if (not messg):\n        messg.append('Valid string.')\n    return messg\nprint(check_string(s))"""	s	TBD1	str
"""import numpy as np\nx = np.array([1, 3, 5, 7, 0])\nprint('Original array: ')\nprint(x)\nr1 = np.ediff1d(x, to_begin=[0, 0], to_end=[200])\nassert np.array_equiv(r1, r2)\nprint('Difference between neighboring elements, element-wise, and prepend [0, 0] and append[200] to the said array:')\nprint(r2)"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\nr2 = TBD3()\n__original_start_marker = None\nimport numpy as np\nx = np.array([1, 3, 5, 7, 0])\nprint('Original array: ')\nprint(x)\nr1 = np.ediff1d(x, to_begin=[0, 0], to_end=[200])\nassert np.array_equiv(r1, r2)\nprint('Difference between neighboring elements, element-wise, and prepend [0, 0] and append[200] to the said array:')\nprint(r2)"""	r2	TBD3	ndarray
"""import numpy as np\nprint('Original array:')\nprint(array_nums)\nprint('\\nNew array of shape(5, 4):')\nnew_array = array_nums.reshape(5, 4)\nprint(new_array)\nprint('\\nRestore the reshaped array into a 1-D array:')\nprint(new_array.flatten())"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def flatten(self):\n        return TBD2()\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def reshape(self, arg0, arg1):\n        return TBD1()\narray_nums = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Original array:')\nprint(array_nums)\nprint('\\nNew array of shape(5, 4):')\nnew_array = array_nums.reshape(5, 4)\nprint(new_array)\nprint('\\nRestore the reshaped array into a 1-D array:')\nprint(new_array.flatten())"""	array_nums	TBD0	ndarray
"""def filter_data(students):\n    result = {k: s for k, s in students.items() if s[0] >= 6.0 and s[1] >= 70}\n    return result\nprint('Original Dictionary:')\nprint(students)\nprint('\\nHeight > 6ft and Weight> 70kg:')\nprint(filter_data(students))"""	"""students = {}\n__original_start_marker = None\n\ndef filter_data(students):\n    result = {k: s for (k, s) in students.items() if ((s[0] >= 6.0) and (s[1] >= 70))}\n    return result\nprint('Original Dictionary:')\nprint(students)\nprint('\\nHeight > 6ft and Weight> 70kg:')\nprint(filter_data(students))"""	students	TBD0	dict
"""def combination(n, n_list):\n    if n <= 0:\n        yield []\n        return\n    for i in range(len(n_list)):\n        c_num = n_list[i:i + 1]\n        for a_num in combination(n - 1, n_list[i + 1:]):\n            yield (c_num + a_num)\nn_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint('Original list:')\nprint(n_list)\nresult = combination(n, n_list)\nprint('\\nCombinations of', n, 'distinct objects:')\nfor e in result:\n    print(e)"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\nn = 0\n__original_start_marker = None\n\ndef combination(n, n_list):\n    if (n <= 0):\n        (yield {})\n        return\n    for i in range(len(n_list)):\n        c_num = n_list[i:(i + 1)]\n        for a_num in combination((n - 1), n_list[(i + 1):]):\n            (yield (c_num + a_num))\nn_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint('Original list:')\nprint(n_list)\nresult = combination(n, n_list)\nprint('\\nCombinations of', n, 'distinct objects:')\nfor e in result:\n    print(e)"""	n	TBD2	int
"""import pandas as pd\ns = pd.Series([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nprint('Original Data Series:')\nprint(s)\nprint('\\nSubset of the above Data Series:')\nnew_s = s[s < n]\nprint(new_s)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nn = 0\n__original_start_marker = None\nimport pandas as pd\ns = pd.Series([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nprint('Original Data Series:')\nprint(s)\nprint('\\nSubset of the above Data Series:')\nnew_s = s[(s < n)]\nprint(new_s)"""	n	TBD1	int
"'import pandas as pd\nprint(\'Original DataFrame with single index:\')\nprint(df)\ndate_of_birth = [\'15/05/2002\', \'17/05/2002\', \'16/02/1999\', \'25/09/1998\', \'11/05/2002\', \'15/09/1997\']\nidx = 3\nprint(""\\nInsert \'date_of_birth\' column in 3rd position of the said DataFrame:"")\ndf.insert(loc=idx, column=\'date_of_birth\', value=date_of_birth)\nprint(df)'"	"'class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def insert(self, loc=None, column=None, value=None):\n        return TBD2()\ndf = TBD1()\n__original_start_marker = None\nimport pandas as pd\nprint(\'Original DataFrame with single index:\')\nprint(df)\ndate_of_birth = [\'15/05/2002\', \'17/05/2002\', \'16/02/1999\', \'25/09/1998\', \'11/05/2002\', \'15/09/1997\']\nidx = 3\nprint(""\\nInsert \'date_of_birth\' column in 3rd position of the said DataFrame:"")\ndf.insert(loc=idx, column=\'date_of_birth\', value=date_of_birth)\nprint(df)'"	df	TBD1	DataFrame
"""nums2 = [4, 5, 6]\nprint('Original list:')\nprint(nums1)\nprint(nums2)\nresult = map(lambda x, y: x + y, nums1, nums2)\nprint('\\nResult: after adding two list')\nprint(list(result))"""	"""nums1 = {}\n__original_start_marker = None\nnums2 = [4, 5, 6]\nprint('Original list:')\nprint(nums1)\nprint(nums2)\nresult = map((lambda x, y: (x + y)), nums1, nums2)\nprint('\\nResult: after adding two list')\nprint(list(result))"""	nums1	TBD1	list
"""def remove_words(list1, remove_words):\n    result = list(filter(lambda word: word not in remove_words, list1))\n    return result\ncolors = ['orange', 'red', 'green', 'blue', 'white', 'black']\nprint('Original list:')\nprint(colors)\nprint('\\nRemove words:')\nprint(remove_colors)\nprint('\\nAfter removing the specified words from the said list:')\nprint(remove_words(colors, remove_colors))"""	"""remove_colors = {}\n__original_start_marker = None\n\ndef remove_words(list1, remove_words):\n    result = list(filter((lambda word: (word not in remove_words)), list1))\n    return result\ncolors = ['orange', 'red', 'green', 'blue', 'white', 'black']\nprint('Original list:')\nprint(colors)\nprint('\\nRemove words:')\nprint(remove_colors)\nprint('\\nAfter removing the specified words from the said list:')\nprint(remove_words(colors, remove_colors))"""	remove_colors	TBD1	list
"""import pandas as pd\nprint('Monthly time perid: ', mtp)\nprint('\\nList of names in the current local scope:')\nprint(dir(mtp))"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nmtp = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Monthly time perid: ', mtp)\nprint('\\nList of names in the current local scope:')\nprint(dir(mtp))"""	mtp	TBD0	Period
"""words = [word for word in items.split(',')]\nprint(','.join(sorted(list(set(words)))))"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def split(self, arg0):\n        return {}\nitems = TBD0()\n__original_start_marker = None\nwords = [word for word in items.split(',')]\nprint(','.join(sorted(list(set(words)))))"""	items	TBD0	str
"""import numpy as np\nnums2 = 3 * np.ones((2, 2))\nprint('Original array:')\nprint(nums1)\nnew_array = nums1 * nums2[:, :, None]\nprint('\\nNew array:')\nprint(new_array)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnums1 = 0\n__original_start_marker = None\nimport numpy as np\nnums2 = (3 * np.ones((2, 2)))\nprint('Original array:')\nprint(nums1)\nnew_array = (nums1 * nums2[(:, :, None)])\nprint('\\nNew array:')\nprint(new_array)"""	nums1	TBD0	ndarray
'import numpy as np\nx = np.array([-180.0, -90.0, 90.0, 180.0])\nr2 = np.deg2rad(x)\nassert np.array_equiv(r1, r2)\nprint(r1)'	'class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nr1 = TBD1()\n__original_start_marker = None\nimport numpy as np\nx = np.array([(- 180.0), (- 90.0), 90.0, 180.0])\nr2 = np.deg2rad(x)\nassert np.array_equiv(r1, r2)\nprint(r1)'	r1	TBD1	ndarray
'num = [10, 20, 30, (10, 20), 40]\nfor n in num:\n    if isinstance(n, tuple):\n        break\n    ctr += 1\nprint(ctr)'	'class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\nctr = 0\n__original_start_marker = None\nnum = [10, 20, 30, (10, 20), 40]\nfor n in num:\n    if isinstance(n, tuple):\n        break\n    ctr += 1\nprint(ctr)'	ctr	TBD1	int
"""import pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nReplacing NaNs with the value from the previous row (purch_amt):')\ndf['purch_amt'].fillna(method='pad', inplace=True)\nprint(df)\nprint('\\nReplacing NaNs with the value from the next row (sale_amt):')\ndf['sale_amt'].fillna(method='bfill', inplace=True)\nprint(df)"""	"""class TBD6():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def fillna(self, method=None, inplace=None):\n        return TBD6()\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def fillna(self, method=None, inplace=None):\n        return TBD3()\ndf = {'purch_amt': TBD1(), 'sale_amt': TBD4()}\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nReplacing NaNs with the value from the previous row (purch_amt):')\ndf['purch_amt'].fillna(method='pad', inplace=True)\nprint(df)\nprint('\\nReplacing NaNs with the value from the next row (sale_amt):')\ndf['sale_amt'].fillna(method='bfill', inplace=True)\nprint(df)"""	df	TBD0	DataFrame
"""def test(lst):\n    result = sorted(lst, key=lambda x: not x)\n    return result\nprint('\\nOriginal list:')\nprint(nums)\nprint('\\nMove all zero digits to end of the said list of numbers:')\nprint(test(nums))"""	"""nums = {}\n__original_start_marker = None\n\ndef test(lst):\n    result = sorted(lst, key=(lambda x: (not x)))\n    return result\nprint('\\nOriginal list:')\nprint(nums)\nprint('\\nMove all zero digits to end of the said list of numbers:')\nprint(test(nums))"""	nums	TBD0	list
"""def sort_sublists(input_list):\n    result = sorted(input_list, key=lambda l: (len(l), l))\n    return result\nprint('Original list:')\nprint(list1)\nprint('\\nSort the list of lists by length and value:')\nprint(sort_sublists(list1))"""	"""list1 = {}\n__original_start_marker = None\n\ndef sort_sublists(input_list):\n    result = sorted(input_list, key=(lambda l: (len(l), l)))\n    return result\nprint('Original list:')\nprint(list1)\nprint('\\nSort the list of lists by length and value:')\nprint(sort_sublists(list1))"""	list1	TBD0	list
"""for i in range(3):\n    nums.append([])\n    for j in range(2):\n        nums[i].append(0)\nprint('Multidimensional list:')\nprint(nums)"""	"""class TBD9():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD8():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def append(self, arg0):\n        return TBD9()\n\nclass TBD7():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD6():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def append(self, arg0):\n        return TBD7()\n\nclass TBD5():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def append(self, arg0):\n        return TBD5()\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnums = [TBD4(), TBD6(), TBD8()]\n__original_start_marker = None\nfor i in range(3):\n    nums.append({})\n    for j in range(2):\n        nums[i].append(0)\nprint('Multidimensional list:')\nprint(nums)"""	nums	TBD1	list
"""from random import shuffle\ndef shuffle_word(text_list):\n    text_list = list(text_list)\n    shuffle(text_list)\n    return ''.join(text_list)\ntext_list = ['Python', 'list', 'exercises', 'practice', 'solution']\nprint('Original list:')\nprint(text_list)\nprint('\\nAfter scrambling the letters of the strings of the said list:')\nprint(result)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD1()\n__original_start_marker = None\nfrom random import shuffle\n\ndef shuffle_word(text_list):\n    text_list = list(text_list)\n    shuffle(text_list)\n    return ''.join(text_list)\ntext_list = ['Python', 'list', 'exercises', 'practice', 'solution']\nprint('Original list:')\nprint(text_list)\nprint('\\nAfter scrambling the letters of the strings of the said list:')\nprint(result)"""	result	TBD1	list
"""import numpy as np\nprint('List to array: ')\nprint(np.asarray(my_list))\nmy_tuple = ([8, 4, 6], [1, 2, 3])\nprint('Tuple to array: ')\nprint(np.asarray(my_tuple))"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nmy_list = TBD2()\n__original_start_marker = None\nimport numpy as np\nprint('List to array: ')\nprint(np.asarray(my_list))\nmy_tuple = ([8, 4, 6], [1, 2, 3])\nprint('Tuple to array: ')\nprint(np.asarray(my_tuple))"""	my_list	TBD2	list
"""marks = {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}\nprint('Original Dictionary:')\nprint(marks)\nprint('Marks greater than 170:')\nprint(result)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD1()\n__original_start_marker = None\nmarks = {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}\nprint('Original Dictionary:')\nprint(marks)\nprint('Marks greater than 170:')\nprint(result)"""	result	TBD1	dict
"""import pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nNumeric values present in company_code column:')\ndf['company_code_is_digit'] = list(map(lambda x: x.isdigit(), df['company_code']))\nprint(df)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self):\n        self.container = {'company_code': TBD1()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\ndf = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nNumeric values present in company_code column:')\ndf['company_code_is_digit'] = list(map((lambda x: x.isdigit()), df['company_code']))\nprint(df)"""	df	TBD0	DataFrame
"""def is_sort_list(nums):\n    result = all((nums[i] <= nums[i + 1] for i in range(len(nums) - 1)))\n    return result\nprint('Original list:')\nprint(nums1)\nprint('\\nIs the said list is sorted!')\nprint(is_sort_list(nums1))\nnums2 = [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2]\nprint('\\nOriginal list:')\nprint(nums1)\nprint('\\nIs the said list is sorted!')\nprint(is_sort_list(nums2))"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __len__(self):\n        return 0\nnums1 = TBD1()\n__original_start_marker = None\n\ndef is_sort_list(nums):\n    result = all(((nums[i] <= nums[(i + 1)]) for i in range((len(nums) - 1))))\n    return result\nprint('Original list:')\nprint(nums1)\nprint('\\nIs the said list is sorted!')\nprint(is_sort_list(nums1))\nnums2 = [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2]\nprint('\\nOriginal list:')\nprint(nums1)\nprint('\\nIs the said list is sorted!')\nprint(is_sort_list(nums2))"""	nums1	TBD1	list
"""import copy\nnums_x = {'a': 1, 'b': 2, 'cc': {'c': 3}}\nprint('Original dictionary: ', nums_x)\nprint('\\nDeep copy of the said list:')\nprint(nums_y)\nprint('\\nChange the value of an element of the original dictionary:')\nnums_x['cc']['c'] = 10\nprint(nums_x)\nprint('\\nSecond dictionary (Deep copy):')\nprint(nums_y)\nnums = {'x': 1, 'y': 2, 'zz': {'z': 3}}\nnums_copy = copy.deepcopy(nums)\nprint('\\nOriginal dictionary :')\nprint(nums)\nprint('\\nDeep copy of the said list:')\nprint(nums_copy)\nprint('\\nChange the value of an element of the original dictionary:')\nnums['zz']['z'] = 10\nprint('\\nFirst dictionary:')\nprint(nums)\nprint('\\nSecond dictionary (Deep copy):')\nprint(nums_copy)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnums_y = TBD2()\n__original_start_marker = None\nimport copy\nnums_x = {'a': 1, 'b': 2, 'cc': {'c': 3}}\nprint('Original dictionary: ', nums_x)\nprint('\\nDeep copy of the said list:')\nprint(nums_y)\nprint('\\nChange the value of an element of the original dictionary:')\nnums_x['cc']['c'] = 10\nprint(nums_x)\nprint('\\nSecond dictionary (Deep copy):')\nprint(nums_y)\nnums = {'x': 1, 'y': 2, 'zz': {'z': 3}}\nnums_copy = copy.deepcopy(nums)\nprint('\\nOriginal dictionary :')\nprint(nums)\nprint('\\nDeep copy of the said list:')\nprint(nums_copy)\nprint('\\nChange the value of an element of the original dictionary:')\nnums['zz']['z'] = 10\nprint('\\nFirst dictionary:')\nprint(nums)\nprint('\\nSecond dictionary (Deep copy):')\nprint(nums_copy)"""	nums_y	TBD2	dict
"""def number_of_substrings(str):\n    str_len = len(str)\n    return int(str_len * (str_len + 1) / 2)\nprint('Number of substrings:')\nprint(number_of_substrings(str1))"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __len__(self):\n        return 0\nstr1 = TBD0()\n__original_start_marker = None\n\ndef number_of_substrings(str):\n    str_len = len(str)\n    return int(((str_len * (str_len + 1)) / 2))\nprint('Number of substrings:')\nprint(number_of_substrings(str1))"""	str1	TBD0	str
"""import csv\nwith open('temp.csv', 'w', newline='') as f:\n    writer = csv.writer(f)\n    writer.writerows(data)\nwith open('temp.csv', newline='') as csvfile:\n    data = csv.reader(csvfile, delimiter=' ')\n    for row in data:\n        print(', '.join(row))"""	"""data = {}\n__original_start_marker = None\nimport csv\nwith open('temp.csv', 'w', newline='') as f:\n    writer = csv.writer(f)\n    writer.writerows(data)\nwith open('temp.csv', newline='') as csvfile:\n    data = csv.reader(csvfile, delimiter=' ')\n    for row in data:\n        print(', '.join(row))"""	data	TBD0	list
"""import numpy as np\nprint('Original array:')\nprint(array_nums)\nprint('\\nAfter reversing:')\narray_nums[:] = array_nums[3::-1]\nprint(array_nums)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\narray_nums = [TBD1(), TBD2()]\n__original_start_marker = None\nimport numpy as np\nprint('Original array:')\nprint(array_nums)\nprint('\\nAfter reversing:')\narray_nums[:] = array_nums[3::(- 1)]\nprint(array_nums)"""	array_nums	TBD0	ndarray
"""def unique_values_in_list_of_lists(lst):\n    result = set((x for l in lst for x in l))\n    return list(result)\nprint('Original list:')\nprint(nums)\nprint('Unique values of the said list of lists:')\nprint(unique_values_in_list_of_lists(nums))\nchars = [['h', 'g', 'l', 'k'], ['a', 'b', 'd', 'e', 'c'], ['j', 'i', 'y'], ['n', 'b', 'v', 'c'], ['x', 'z']]\nprint('\\nOriginal list:')\nprint(chars)\nprint('Unique values of the said list of lists:')\nprint(unique_values_in_list_of_lists(chars))"""	"""nums = {}\n__original_start_marker = None\n\ndef unique_values_in_list_of_lists(lst):\n    result = set((x for l in lst for x in l))\n    return list(result)\nprint('Original list:')\nprint(nums)\nprint('Unique values of the said list of lists:')\nprint(unique_values_in_list_of_lists(nums))\nchars = [['h', 'g', 'l', 'k'], ['a', 'b', 'd', 'e', 'c'], ['j', 'i', 'y'], ['n', 'b', 'v', 'c'], ['x', 'z']]\nprint('\\nOriginal list:')\nprint(chars)\nprint('Unique values of the said list of lists:')\nprint(unique_values_in_list_of_lists(chars))"""	nums	TBD1	list
"""from collections import Counter\nfrom itertools import chain\ndef max_aggregate(list_str, N):\n    temp = (set(sub) for sub in list_str)\n    counts = Counter(chain.from_iterable(temp))\n    gt_N = [chr for chr, count in counts.items() if count > N]\n    lt_N = [chr for chr, count in counts.items() if count < N]\n    return (gt_N, lt_N)\nlist_str = ['abcd', 'iabhef', 'dsalsdf', 'sdfsas', 'jlkdfgd']\nprint('Original list:')\nprint(list_str)\nN = 3\nprint('\\nCharacters of the said list of strings which occur more than:', N)\nprint(result[0])\nprint('\\nCharacters of the said list of strings which occur less than:', N)\nprint(result[1])"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = [TBD2(), TBD3()]\n__original_start_marker = None\nfrom collections import Counter\nfrom itertools import chain\n\ndef max_aggregate(list_str, N):\n    temp = (set(sub) for sub in list_str)\n    counts = Counter(chain.from_iterable(temp))\n    gt_N = [chr for (chr, count) in counts.items() if (count > N)]\n    lt_N = [chr for (chr, count) in counts.items() if (count < N)]\n    return (gt_N, lt_N)\nlist_str = ['abcd', 'iabhef', 'dsalsdf', 'sdfsas', 'jlkdfgd']\nprint('Original list:')\nprint(list_str)\nN = 3\nprint('\\nCharacters of the said list of strings which occur more than:', N)\nprint(result[0])\nprint('\\nCharacters of the said list of strings which occur less than:', N)\nprint(result[1])"""	result	TBD1	tuple
"""def intersection_nested_lists(l1, l2):\n    result = [list(filter(lambda x: x in l1, sublist)) for sublist in l2]\n    return result\nnums2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]\nprint('\\nOriginal lists:')\nprint(nums1)\nprint(nums2)\nprint('\\nIntersection of said nested lists:')\nprint(intersection_nested_lists(nums1, nums2))"""	"""nums1 = {}\n__original_start_marker = None\n\ndef intersection_nested_lists(l1, l2):\n    result = [list(filter((lambda x: (x in l1)), sublist)) for sublist in l2]\n    return result\nnums2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]\nprint('\\nOriginal lists:')\nprint(nums1)\nprint(nums2)\nprint('\\nIntersection of said nested lists:')\nprint(intersection_nested_lists(nums1, nums2))"""	nums1	TBD1	list
"""import pandas as pd\nimport numpy as np\nnp.random.seed(24)\ndf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\ndf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))], axis=1)\ndf.iloc[0, 2] = np.nan\ndf.iloc[3, 3] = np.nan\ndf.iloc[4, 1] = np.nan\ndf.iloc[9, 4] = np.nan\nprint('Original array:')\nprint(df)\nprint('\\nDataframe - table style:')\nth_props = [('font-size', '12px'), ('text-align', 'center'), ('font-weight', 'bold'), ('color', '#6d6d6d'), ('background-color', '#f7ffff')]\nstyles = [dict(selector='th', props=th_props), dict(selector='td', props=td_props)]\ndf.style.set_table_styles(styles)"""	"""class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\ntd_props = TBD4()\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\nnp.random.seed(24)\ndf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\ndf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))], axis=1)\ndf.iloc[(0, 2)] = np.nan\ndf.iloc[(3, 3)] = np.nan\ndf.iloc[(4, 1)] = np.nan\ndf.iloc[(9, 4)] = np.nan\nprint('Original array:')\nprint(df)\nprint('\\nDataframe - table style:')\nth_props = [('font-size', '12px'), ('text-align', 'center'), ('font-weight', 'bold'), ('color', '#6d6d6d'), ('background-color', '#f7ffff')]\nstyles = [dict(selector='th', props=th_props), dict(selector='td', props=td_props)]\ndf.style.set_table_styles(styles)"""	td_props	TBD4	list
"""import numpy as np\nm = np.array([[1, 2], [3, 4]])\nprint('Original matrix:')\nprint(m)\nprint('Condition number of the said matrix:')\nprint(result)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD1()\n__original_start_marker = None\nimport numpy as np\nm = np.array([[1, 2], [3, 4]])\nprint('Original matrix:')\nprint(m)\nprint('Condition number of the said matrix:')\nprint(result)"""	result	TBD1	float64
"""import numpy as np\nimport pandas as pd\nchar_list = list('ABCDEFGHIJKLMNOP')\nnum_arra = np.arange(8)\nnum_ser = pd.Series(num_dict)\ndf = num_ser.to_frame().reset_index()\nprint(df.head())"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnum_dict = TBD0()\n__original_start_marker = None\nimport numpy as np\nimport pandas as pd\nchar_list = list('ABCDEFGHIJKLMNOP')\nnum_arra = np.arange(8)\nnum_ser = pd.Series(num_dict)\ndf = num_ser.to_frame().reset_index()\nprint(df.head())"""	num_dict	TBD0	dict
"""import pandas as pd\nprint('Sequences of fixed-frequency dates and time spans (1 H):\\n')\nprint(r1)\nprint('\\nSequences of fixed-frequency dates and time spans (3 H):\\n')\nr2 = pd.date_range('2030-01-01', periods=10, freq='3H')\nprint(r2)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nr1 = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Sequences of fixed-frequency dates and time spans (1 H):\\n')\nprint(r1)\nprint('\\nSequences of fixed-frequency dates and time spans (3 H):\\n')\nr2 = pd.date_range('2030-01-01', periods=10, freq='3H')\nprint(r2)"""	r1	TBD0	DatetimeIndex
"""word_list = string_words.split()\nword_freq = [word_list.count(n) for n in word_list]\nprint('String:\\n {} \\n'.format(string_words))\nprint('List:\\n {} \\n'.format(str(word_list)))\nprint('Pairs (Words and Frequencies:\\n {}'.format(str(list(zip(word_list, word_freq)))))"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def split(self):\n        return {}\nstring_words = TBD0()\n__original_start_marker = None\nword_list = string_words.split()\nword_freq = [word_list.count(n) for n in word_list]\nprint('String:\\n {} \\n'.format(string_words))\nprint('List:\\n {} \\n'.format(str(word_list)))\nprint('Pairs (Words and Frequencies:\\n {}'.format(str(list(zip(word_list, word_freq)))))"""	string_words	TBD0	str
"""student_data = {'id1': {'name': ['Sara'], 'class': ['V'], 'subject_integration': ['english, math, science']}, 'id2': {'name': ['David'], 'class': ['V'], 'subject_integration': ['english, math, science']}, 'id3': {'name': ['Sara'], 'class': ['V'], 'subject_integration': ['english, math, science']}, 'id4': {'name': ['Surya'], 'class': ['V'], 'subject_integration': ['english, math, science']}}\nfor key, value in student_data.items():\n    if value not in result.values():\n        result[key] = value\nprint(result)"""	"""class TBD14():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD14()\n\nclass TBD12():\n\n    def __init__(self):\n        self.container = {'id1': {'name': ['Sara'], 'class': ['V'], 'subject_integration': ['english, math, science']}, 'id2': {'name': ['David'], 'class': ['V'], 'subject_integration': ['english, math, science']}, 'id3': {'name': ['Sara'], 'class': ['V'], 'subject_integration': ['english, math, science']}, 'id4': {'name': ['Surya'], 'class': ['V'], 'subject_integration': ['english, math, science']}}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n\n    def items(self):\n        return {}\n__original_start_marker = None\nstudent_data = TBD12()\nfor (key, value) in student_data.items():\n    if (value not in result.values()):\n        result[key] = value\nprint(result)"""	result	TBD14	dict
"""import decimal\nprint('Construct a Decimal from a float:')\npi_val = decimal.Decimal(3.14159)\nprint(pi_val)\nprint(pi_val.as_tuple())\nprint('\\nConstruct a Decimal from a string:')\nprint(num_str)\nprint(num_str.as_tuple())"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def as_tuple(self):\n        return TBD1()\nnum_str = TBD0()\n__original_start_marker = None\nimport decimal\nprint('Construct a Decimal from a float:')\npi_val = decimal.Decimal(3.14159)\nprint(pi_val)\nprint(pi_val.as_tuple())\nprint('\\nConstruct a Decimal from a string:')\nprint(num_str)\nprint(num_str.as_tuple())"""	num_str	TBD0	Decimal
"""from itertools import groupby\nprint('Original list:')\nprint(uno_list)\nuno_list.sort()\nprint(uno_list)\nprint('\\nSort the said unordered list:')\nprint(uno_list)\nprint('\\nFrequency of the elements of the said unordered list:')\nresult = [len(list(group)) for key, group in groupby(uno_list)]\nprint(result)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nuno_list = []\n__original_start_marker = None\nfrom itertools import groupby\nprint('Original list:')\nprint(uno_list)\nuno_list.sort()\nprint(uno_list)\nprint('\\nSort the said unordered list:')\nprint(uno_list)\nprint('\\nFrequency of the elements of the said unordered list:')\nresult = [len(list(group)) for (key, group) in groupby(uno_list)]\nprint(result)"""	uno_list	TBD0	list
'print(sum(my_dict.values()))'	'my_dict = {}\n__original_start_marker = None\nprint(sum(my_dict.values()))'	my_dict	TBD0	dict
"""import pandas as pd\nnewday = pd.Timestamp('2020-02-07')\nprint('First date:')\nprint(newday)\nprint('\\nThe day name of the said date:')\nprint(newday.day_name())\nprint('\\nAdd 2 days with the said date:')\nnewday1 = newday + pd.Timedelta('2 day')\nprint(newday1.day_name())\nprint('\\nNext business day:')\nprint(nbday.day_name())"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def day_name(self):\n        return TBD1()\nnbday = TBD0()\n__original_start_marker = None\nimport pandas as pd\nnewday = pd.Timestamp('2020-02-07')\nprint('First date:')\nprint(newday)\nprint('\\nThe day name of the said date:')\nprint(newday.day_name())\nprint('\\nAdd 2 days with the said date:')\nnewday1 = (newday + pd.Timedelta('2 day'))\nprint(newday1.day_name())\nprint('\\nNext business day:')\nprint(nbday.day_name())"""	nbday	TBD0	Timestamp
"""import itertools as it\nnums = [[0, 1, 2], [2, 3, 4], [3, 4, 5, 6], [7, 8, 9, 10, 11], [12, 13, 14]]\nprint('Original list:')\nprint(nums)\ndef get_avg(x):\n    x = [i for i in x if i is not None]\n    return sum(x, 0.0) / len(x)\nprint('\\nAverage of n-th elements in the said list of lists with different lengths:')\nprint(list(result))"""	"""result = {}\n__original_start_marker = None\nimport itertools as it\nnums = [[0, 1, 2], [2, 3, 4], [3, 4, 5, 6], [7, 8, 9, 10, 11], [12, 13, 14]]\nprint('Original list:')\nprint(nums)\n\ndef get_avg(x):\n    x = [i for i in x if (i is not None)]\n    return (sum(x, 0.0) / len(x))\nprint('\\nAverage of n-th elements in the said list of lists with different lengths:')\nprint(list(result))"""	result	TBD1	map
"""import pandas as pd\nimport re as re\npd.set_option('display.max_columns', 10)\nprint('Original DataFrame:')\nprint(df)\ndef test_num_less(n):\n    nums = []\n    for i in n.split():\n        result = re.findall('\\\\b(0*(?:[1-9][0-9]?|100))\\\\b', i)\n        nums.append(result)\n        all_num = [','.join(x) for x in nums if x != []]\n    return ' '.join(all_num)\ndf['num_less'] = df['address'].apply(lambda x: test_num_less(x))\nprint('\\nNumber less than 100:')\nprint(df)"""	"""class TBD5():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def apply(self, arg0):\n        return TBD5()\ndf = {'address': TBD3()}\n__original_start_marker = None\nimport pandas as pd\nimport re as re\npd.set_option('display.max_columns', 10)\nprint('Original DataFrame:')\nprint(df)\n\ndef test_num_less(n):\n    nums = {}\n    for i in n.split():\n        result = re.findall('\\\\b(0*(?:[1-9][0-9]?|100))\\\\b', i)\n        nums.append(result)\n        all_num = [','.join(x) for x in nums if (x != {})]\n    return ' '.join(all_num)\ndf['num_less'] = df['address'].apply((lambda x: test_num_less(x)))\nprint('\\nNumber less than 100:')\nprint(df)"""	df	TBD2	DataFrame
"""def permute(nums):\n    result_perms = [[]]\n    for n in nums:\n        new_perms = []\n        for perm in result_perms:\n            for i in range(len(perm) + 1):\n                new_perms.append(perm[:i] + [n] + perm[i:])\n                result_perms = new_perms\n    return result_perms\nprint('Original Cofllection: ', my_nums)\nprint('Collection of distinct numbers:\\n', permute(my_nums))"""	"""my_nums = {}\n__original_start_marker = None\n\ndef permute(nums):\n    result_perms = [[]]\n    for n in nums:\n        new_perms = {}\n        for perm in result_perms:\n            for i in range((len(perm) + 1)):\n                new_perms.append(((perm[:i] + [n]) + perm[i:]))\n                result_perms = new_perms\n    return result_perms\nprint('Original Cofllection: ', my_nums)\nprint('Collection of distinct numbers:\\n', permute(my_nums))"""	my_nums	TBD3	list
'import datetime\nnow = datetime.datetime.now()\nprint(now)\nmonth = lambda x: x.month\nday = lambda x: x.day\nt = lambda x: x.time()\nprint(year(now))\nprint(month(now))\nprint(day(now))\nprint(t(now))'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\ndef year(arg0):\n    return TBD0()\n__original_start_marker = None\nimport datetime\nnow = datetime.datetime.now()\nprint(now)\nmonth = (lambda x: x.month)\nday = (lambda x: x.day)\nt = (lambda x: x.time())\nprint(year(now))\nprint(month(now))\nprint(day(now))\nprint(t(now))'	year	TBD0	function
"""def max_min_list_tuples(nums):\n    zip(*nums)\n    result1 = map(max, zip(*nums))\n    result2 = map(min, zip(*nums))\n    return (list(result1), list(result2))\nnums = [(2, 3), (2, 4), (0, 6), (7, 1)]\nprint('Original list:')\nprint(nums)\nprint('\\nMaximum value  for each tuple position in the said list of tuples:')\nprint(result[0])\nprint('\\nMinimum value  for each tuple position in the said list of tuples:')\nprint(result[1])"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = [TBD2(), TBD3()]\n__original_start_marker = None\n\ndef max_min_list_tuples(nums):\n    zip(*nums)\n    result1 = map(max, zip(*nums))\n    result2 = map(min, zip(*nums))\n    return (list(result1), list(result2))\nnums = [(2, 3), (2, 4), (0, 6), (7, 1)]\nprint('Original list:')\nprint(nums)\nprint('\\nMaximum value  for each tuple position in the said list of tuples:')\nprint(result[0])\nprint('\\nMinimum value  for each tuple position in the said list of tuples:')\nprint(result[1])"""	result	TBD1	tuple
"""from itertools import accumulate\ndef cumsum(lst):\n    return list(accumulate(lst))\nprint('Original list elements:')\nprint(nums)\nprint('Cumulative sum of the elements of the said list:')\nprint(cumsum(nums))\nnums = [-1, -2, -3, 4]\nprint('\\nOriginal list elements:')\nprint(nums)\nprint('Cumulative sum of the elements of the said list:')\nprint(cumsum(nums))"""	"""nums = {}\n__original_start_marker = None\nfrom itertools import accumulate\n\ndef cumsum(lst):\n    return list(accumulate(lst))\nprint('Original list elements:')\nprint(nums)\nprint('Cumulative sum of the elements of the said list:')\nprint(cumsum(nums))\nnums = [(- 1), (- 2), (- 3), 4]\nprint('\\nOriginal list elements:')\nprint(nums)\nprint('Cumulative sum of the elements of the said list:')\nprint(cumsum(nums))"""	nums	TBD1	list
"""from array import array\ndef plusMinus(nums):\n    n = len(nums)\n    n1 = n2 = n3 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        elif x < 0:\n            n2 += 1\n        else:\n            n3 += 1\n    return (round(n1 / n, 2), round(n2 / n, 2), round(n3 / n, 2))\nnums = array('i', [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\nprint('Original array:', nums)\nnums_arr = list(map(int, nums))\nprint('Ratio of positive numbers, negative numbers and zeroes:')\nprint(result)\nnums = array('i', [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\nprint('\\nOriginal array:', nums)\nnums_arr = list(map(int, nums))\nresult = plusMinus(nums_arr)\nprint('Ratio of positive numbers, negative numbers and zeroes:')\nprint(result)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD2()\n__original_start_marker = None\nfrom array import array\n\ndef plusMinus(nums):\n    n = len(nums)\n    n1 = n2 = n3 = 0\n    for x in nums:\n        if (x > 0):\n            n1 += 1\n        elif (x < 0):\n            n2 += 1\n        else:\n            n3 += 1\n    return (round((n1 / n), 2), round((n2 / n), 2), round((n3 / n), 2))\nnums = array('i', [0, 1, 2, (- 1), (- 5), 6, 0, (- 3), (- 2), 3, 4, 6, 8])\nprint('Original array:', nums)\nnums_arr = list(map(int, nums))\nprint('Ratio of positive numbers, negative numbers and zeroes:')\nprint(result)\nnums = array('i', [2, 1, 2, (- 1), (- 5), 6, 4, (- 3), (- 2), 3, 4, 6, 8])\nprint('\\nOriginal array:', nums)\nnums_arr = list(map(int, nums))\nresult = plusMinus(nums_arr)\nprint('Ratio of positive numbers, negative numbers and zeroes:')\nprint(result)"""	result	TBD2	tuple
'import numpy as np\nprint(x)\ny = np.full((3, 3), 6)\nprint(y)'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint(x)\ny = np.full((3, 3), 6)\nprint(y)'	x	TBD0	ndarray
"""class Node:\n    def __init__(self, data=None):\n        self.data = data\n        self.next = None\nclass singly_linked_list:\n    def __init__(self):\n        self.tail = None\n        self.head = None\n        self.count = 0\n    def append_item(self, data):\n        node = Node(data)\n        if self.head:\n            self.head.next = node\n            self.head = node\n        else:\n            self.tail = node\n            self.head = node\n        self.count += 1\n    def __getitem__(self, index):\n        if index > self.count - 1:\n            return 'Index out of range'\n        current_val = self.tail\n        for n in range(index):\n            current_val = current_val.next\n        return current_val.data\n    def __setitem__(self, index, value):\n        if index > self.count - 1:\n            raise Exception('Index out of range.')\n        current = self.tail\n        for n in range(index):\n            current = current.next\n        current.data = value\nitems.append_item('PHP')\nitems.append_item('Python')\nitems.append_item('C#')\nitems.append_item('C++')\nitems.append_item('Java')\nprint('Modify items by index:')\nitems[1] = 'SQL'\nprint('New value: ', items[1])\nitems[4] = 'Perl'\nprint('New value: ', items[4])"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self):\n        self.container = {}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n\n    def append_item(self, arg0):\n        return TBD2()\nitems = TBD0()\n__original_start_marker = None\n\nclass Node():\n\n    def __init__(self, data=None):\n        self.data = data\n        self.next = None\nitems.append_item('PHP')\nitems.append_item('Python')\nitems.append_item('C#')\nitems.append_item('C++')\nitems.append_item('Java')\nprint('Modify items by index:')\nitems[1] = 'SQL'\nprint('New value: ', items[1])\nitems[4] = 'Perl'\nprint('New value: ', items[4])"""	items	TBD0	singly_linked_list
"""import numpy as np\nm = np.array([[1, 2], [3, 4]])\nprint('Original matrix:')\nprint(m)\nprint('Decomposition of the said matrix:')\nprint(result)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD1()\n__original_start_marker = None\nimport numpy as np\nm = np.array([[1, 2], [3, 4]])\nprint('Original matrix:')\nprint(m)\nprint('Decomposition of the said matrix:')\nprint(result)"""	result	TBD1	tuple
"""def remove_last_n(nums, N):\n    result = nums[:len(nums) - N]\n    return result\nprint('Original lists:')\nprint(nums)\nN = 3\nprint('\\nRemove the last', N, 'elements from the said list:')\nprint(remove_last_n(nums, N))\nN = 5\nprint('\\nRemove the last', N, 'elements from the said list:')\nprint(remove_last_n(nums, N))\nN = 1\nprint('\\nRemove the last', N, 'element from the said list:')\nprint(remove_last_n(nums, N))"""	"""class TBD0():\n\n    def __init__(self):\n        self.container = {}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\nnums = TBD0()\n__original_start_marker = None\n\ndef remove_last_n(nums, N):\n    result = nums[:(len(nums) - N)]\n    return result\nprint('Original lists:')\nprint(nums)\nN = 3\nprint('\\nRemove the last', N, 'elements from the said list:')\nprint(remove_last_n(nums, N))\nN = 5\nprint('\\nRemove the last', N, 'elements from the said list:')\nprint(remove_last_n(nums, N))\nN = 1\nprint('\\nRemove the last', N, 'element from the said list:')\nprint(remove_last_n(nums, N))"""	nums	TBD0	list
"""nums = [2, 4, -6, -9, 11, -12, 14, -5, 17]\nprint('Original list:', nums)\ntotal_negative_nums = list(filter(lambda nums: nums < 0, nums))\nprint('Sum of the positive numbers: ', sum(total_negative_nums))\nprint('Sum of the negative numbers: ', sum(total_positive_nums))"""	"""total_positive_nums = {}\n__original_start_marker = None\nnums = [2, 4, (- 6), (- 9), 11, (- 12), 14, (- 5), 17]\nprint('Original list:', nums)\ntotal_negative_nums = list(filter((lambda nums: (nums < 0)), nums))\nprint('Sum of the positive numbers: ', sum(total_negative_nums))\nprint('Sum of the negative numbers: ', sum(total_positive_nums))"""	total_positive_nums	TBD1	list
"""def first_index(l1):\n    return sum((1 for i in l1 if i > 45 and i % 2 == 0))\nprint('Original list:')\nprint(nums)\nn = 45\nprint('\\nNumber of Items of the said list which are even and greater than', n)\nprint(first_index(nums))"""	"""nums = {}\n__original_start_marker = None\n\ndef first_index(l1):\n    return sum((1 for i in l1 if ((i > 45) and ((i % 2) == 0))))\nprint('Original list:')\nprint(nums)\nn = 45\nprint('\\nNumber of Items of the said list which are even and greater than', n)\nprint(first_index(nums))"""	nums	TBD0	list
"""import numpy as np\nx = np.random.rand(10, 4)\nprint('Original array: ')\nprint(x)\nprint('First 5 rows of the above array:')\nprint(y)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\ny = TBD0()\n__original_start_marker = None\nimport numpy as np\nx = np.random.rand(10, 4)\nprint('Original array: ')\nprint(x)\nprint('First 5 rows of the above array:')\nprint(y)"""	y	TBD0	ndarray
"""index = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint('Base numbers abd index: ')\nprint(bases_num)\nprint(index)\nresult = list(map(pow, bases_num, index))\nprint('\\nPower of said number in bases raised to the corresponding number in the index:')\nprint(result)"""	"""bases_num = {}\n__original_start_marker = None\nindex = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint('Base numbers abd index: ')\nprint(bases_num)\nprint(index)\nresult = list(map(pow, bases_num, index))\nprint('\\nPower of said number in bases raised to the corresponding number in the index:')\nprint(result)"""	bases_num	TBD1	list
"""def remove_chars(str1, unwanted_chars):\n    for i in unwanted_chars:\n        str1 = str1.replace(i, '')\n    return str1\nstr1 = 'Pyth*^on Exercis^es'\nstr2 = 'A%^!B#*CD'\nprint('Original String : ' + str1)\nprint('After removing unwanted characters:')\nprint(remove_chars(str1, unwanted_chars))\nprint('\\nOriginal String : ' + str2)\nprint('After removing unwanted characters:')\nprint(remove_chars(str2, unwanted_chars))"""	"""unwanted_chars = {}\n__original_start_marker = None\n\ndef remove_chars(str1, unwanted_chars):\n    for i in unwanted_chars:\n        str1 = str1.replace(i, '')\n    return str1\nstr1 = 'Pyth*^on Exercis^es'\nstr2 = 'A%^!B#*CD'\nprint(('Original String : ' + str1))\nprint('After removing unwanted characters:')\nprint(remove_chars(str1, unwanted_chars))\nprint(('\\nOriginal String : ' + str2))\nprint('After removing unwanted characters:')\nprint(remove_chars(str2, unwanted_chars))"""	unwanted_chars	TBD0	list
"'import pandas as pd\npd.set_option(\'display.max_rows\', None)\ndf = pd.DataFrame({\'ord_no\': [70001, 70009, 70002, 70004, 70007, 70005, 70008, 70010, 70003, 70012, 70011, 70013], \'purch_amt\': [150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6], \'ord_date\': [\'2012-10-05\', \'2012-09-10\', \'2012-10-05\', \'2012-08-17\', \'2012-09-10\', \'2012-07-27\', \'2012-09-10\', \'2012-10-10\', \'2012-10-10\', \'2012-06-27\', \'2012-08-17\', \'2012-04-25\'], \'customer_id\': [3002, 3001, 3001, 3003, 3002, 3002, 3001, 3004, 3003, 3002, 3003, 3001], \'salesman_id\': [5002, 5003, 5001, 5003, 5002, 5001, 5001, 5003, 5003, 5002, 5003, 5001]})\nprint(\'Original Orders DataFrame:\')\nprint(df)\nprint(""\\nSplit the said data on \'salesman_id\', \'customer_id\' wise:"")\nresult = df.groupby([\'salesman_id\', \'customer_id\'])\nfor name, group in result:\n    print(\'\\nGroup:\')\n    print(name)\n    print(group)\nn = 2\nprint(\'\\nDroping last two records:\')\nprint(result1)'"	"'class TBD10():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult1 = TBD10()\n\nclass TBD9():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD7():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __lt__(self, other):\n        return TBD9()\n__original_start_marker = None\nimport pandas as pd\npd.set_option(\'display.max_rows\', None)\ndf = pd.DataFrame({\'ord_no\': [70001, 70009, 70002, 70004, 70007, 70005, 70008, 70010, 70003, 70012, 70011, 70013], \'purch_amt\': [150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6], \'ord_date\': [\'2012-10-05\', \'2012-09-10\', \'2012-10-05\', \'2012-08-17\', \'2012-09-10\', \'2012-07-27\', \'2012-09-10\', \'2012-10-10\', \'2012-10-10\', \'2012-06-27\', \'2012-08-17\', \'2012-04-25\'], \'customer_id\': [3002, 3001, 3001, 3003, 3002, 3002, 3001, 3004, 3003, 3002, 3003, 3001], \'salesman_id\': [5002, 5003, 5001, 5003, 5002, 5001, 5001, 5003, 5003, 5002, 5003, 5001]})\nprint(\'Original Orders DataFrame:\')\nprint(df)\nprint(""\\nSplit the said data on \'salesman_id\', \'customer_id\' wise:"")\nresult = df.groupby([\'salesman_id\', \'customer_id\'])\nfor (name, group) in result:\n    print(\'\\nGroup:\')\n    print(name)\n    print(group)\nn = 2\nprint(\'\\nDroping last two records:\')\nprint(result1)'"	result1	TBD10	DataFrame
"""class Node(object):\n    def __init__(self, data=None, next=None, prev=None):\n        self.data = data\n        self.next = next\n        self.prev = prev\nclass doubly_linked_list(object):\n    def __init__(self):\n        self.head = None\n        self.tail = None\n        self.count = 0\n    def append_item(self, data):\n        new_item = Node(data, None, None)\n        if self.head is None:\n            self.head = new_item\n            self.tail = self.head\n        else:\n            new_item.prev = self.tail\n            self.tail.next = new_item\n            self.tail = new_item\n        self.count += 1\nitems.append_item('PHP')\nitems.append_item('Python')\nitems.append_item('C#')\nitems.append_item('C++')\nitems.append_item('Java')\nitems.append_item('SQL')\nprint('Number of items of the  Doubly linked list:', items.count)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        self.count = TBD2()\n        pass\n\n    def append_item(self, arg0):\n        return TBD1()\nitems = TBD0()\n__original_start_marker = None\n\nclass Node(object):\n\n    def __init__(self, data=None, next=None, prev=None):\n        self.data = data\n        self.next = next\n        self.prev = prev\nitems.append_item('PHP')\nitems.append_item('Python')\nitems.append_item('C#')\nitems.append_item('C++')\nitems.append_item('Java')\nitems.append_item('SQL')\nprint('Number of items of the  Doubly linked list:', items.count)"""	items	TBD0	doubly_linked_list
"""import collections\nnums = (2, 9, 0, 8, 2, 4, 0, 9, 2, 4, 8, 2, 0, 4, 2, 3, 4, 0)\nprint('Number of 2 in the sequence')\nprint(nums_dq.count(2))\nprint('Number of 4 in the sequence')\nprint(nums_dq.count(4))"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnums_dq = []\n__original_start_marker = None\nimport collections\nnums = (2, 9, 0, 8, 2, 4, 0, 9, 2, 4, 8, 2, 0, 4, 2, 3, 4, 0)\nprint('Number of 2 in the sequence')\nprint(nums_dq.count(2))\nprint('Number of 4 in the sequence')\nprint(nums_dq.count(4))"""	nums_dq	TBD0	deque
'print(num.index(30))'	'class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def index(self, arg0):\n        return TBD1()\nnum = TBD0()\n__original_start_marker = None\nprint(num.index(30))'	num	TBD0	list
"""def concatenate_lists(l1, l2, l3):\n    return [i + j + k for i, j, k in zip(l1, l2, l3)]\nl2 = ['red', 'green', 'black', 'blue', 'white']\nl3 = ['100', '200', '300', '400', '500']\nprint('Original lists:')\nprint(l1)\nprint(l2)\nprint(l3)\nprint('\\nConcatenate element-wise three said lists:')\nprint(concatenate_lists(l1, l2, l3))"""	"""l1 = {}\n__original_start_marker = None\n\ndef concatenate_lists(l1, l2, l3):\n    return [((i + j) + k) for (i, j, k) in zip(l1, l2, l3)]\nl2 = ['red', 'green', 'black', 'blue', 'white']\nl3 = ['100', '200', '300', '400', '500']\nprint('Original lists:')\nprint(l1)\nprint(l2)\nprint(l3)\nprint('\\nConcatenate element-wise three said lists:')\nprint(concatenate_lists(l1, l2, l3))"""	l1	TBD2	list
"""import numpy as np\nprint('Original array:')\nprint(a)\nresult = np.where(np.logical_and(a >= 7, a <= 20))\nprint('\\nElements within range: index position')\nprint(result)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\na = 0\n__original_start_marker = None\nimport numpy as np\nprint('Original array:')\nprint(a)\nresult = np.where(np.logical_and((a >= 7), (a <= 20)))\nprint('\\nElements within range: index position')\nprint(result)"""	a	TBD0	ndarray
"""def count_same_pair(nums1, nums2, nums3):\n    result = sum((m == n == o for m, n, o in zip(nums1, nums2, nums3)))\n    return result\nnums2 = [2, 2, 3, 1, 2, 6, 7, 9]\nnums3 = [2, 1, 3, 1, 2, 6, 7, 9]\nprint('Original lists:')\nprint(nums1)\nprint(nums2)\nprint(nums3)\nprint('\\nNumber of same pair of the said three given lists:')\nprint(count_same_pair(nums1, nums2, nums3))"""	"""nums1 = {}\n__original_start_marker = None\n\ndef count_same_pair(nums1, nums2, nums3):\n    result = sum(((m == n == o) for (m, n, o) in zip(nums1, nums2, nums3)))\n    return result\nnums2 = [2, 2, 3, 1, 2, 6, 7, 9]\nnums3 = [2, 1, 3, 1, 2, 6, 7, 9]\nprint('Original lists:')\nprint(nums1)\nprint(nums2)\nprint(nums3)\nprint('\\nNumber of same pair of the said three given lists:')\nprint(count_same_pair(nums1, nums2, nums3))"""	nums1	TBD2	list
'print()\nprint(all((x > 1 for x in num)))\nprint(all((x > 4 for x in num)))\nprint()'	'num = {}\n__original_start_marker = None\nprint()\nprint(all(((x > 1) for x in num)))\nprint(all(((x > 4) for x in num)))\nprint()'	num	TBD0	list
"""import itertools as it\nmums1 = [1, 2, 3, 4]\nmums2 = [5, 6, 7, 8]\nmums4 = [13, 14, 15, 16]\nprint('Original lists:')\nprint(mums1)\nprint(mums2)\nprint(mums3)\nprint(mums4)\nprint('\\nSum of the specified range:')\nfor i in it.product([tuple(mums1)], it.permutations(mums2), it.permutations(mums3), it.permutations(mums4)):\n    print(i)"""	"""mums3 = {}\n__original_start_marker = None\nimport itertools as it\nmums1 = [1, 2, 3, 4]\nmums2 = [5, 6, 7, 8]\nmums4 = [13, 14, 15, 16]\nprint('Original lists:')\nprint(mums1)\nprint(mums2)\nprint(mums3)\nprint(mums4)\nprint('\\nSum of the specified range:')\nfor i in it.product([tuple(mums1)], it.permutations(mums2), it.permutations(mums3), it.permutations(mums4)):\n    print(i)"""	mums3	TBD4	list
"""import textwrap\nsample_text = '\\nPython is a widely used high-level, general-purpose, interpreted, dynamic\\nprogramming language. Its design philosophy emphasizes code readability,\\nand its syntax allows programmers to express concepts in fewer lines of\\ncode than possible in languages such as C++ or Java.\\n    '\nprint()\nprint(textwrap.fill(text1, initial_indent='', subsequent_indent=' ' * 4, width=80))\nprint()"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __call__(self, *args, **kwargs):\n        return ''\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        self.translate = TBD3()\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __call__(self, *args, **kwargs):\n        return TBD2()\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        self.expandtabs = TBD1()\n        pass\ntext1 = TBD0()\n__original_start_marker = None\nimport textwrap\nsample_text = '\\nPython is a widely used high-level, general-purpose, interpreted, dynamic\\nprogramming language. Its design philosophy emphasizes code readability,\\nand its syntax allows programmers to express concepts in fewer lines of\\ncode than possible in languages such as C++ or Java.\\n    '\nprint()\nprint(textwrap.fill(text1, initial_indent='', subsequent_indent=(' ' * 4), width=80))\nprint()"""	text1	TBD0	str
"""import numpy as np\nprint('Original array:')\nprint(x)\nprint('Mean of each column:')\nprint(x.mean(axis=0))\nprint('Mean of each row:')\nprint(x.mean(axis=1))"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def mean(self, axis=None):\n        return TBD1()\nx = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Original array:')\nprint(x)\nprint('Mean of each column:')\nprint(x.mean(axis=0))\nprint('Mean of each row:')\nprint(x.mean(axis=1))"""	x	TBD0	ndarray
"""from functools import reduce\nprint('Fibonacci series upto 2:')\nprint(fib_series(2))\nprint('\\nFibonacci series upto 5:')\nprint(fib_series(5))\nprint('\\nFibonacci series upto 6:')\nprint(fib_series(6))\nprint('\\nFibonacci series upto 9:')\nprint(fib_series(9))"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\ndef fib_series(arg0):\n    return TBD0()\n__original_start_marker = None\nfrom functools import reduce\nprint('Fibonacci series upto 2:')\nprint(fib_series(2))\nprint('\\nFibonacci series upto 5:')\nprint(fib_series(5))\nprint('\\nFibonacci series upto 6:')\nprint(fib_series(6))\nprint('\\nFibonacci series upto 9:')\nprint(fib_series(9))"""	fib_series	TBD0	function
"""import numpy as np\nnum = np.arange(20)\nprint('Original array:')\nprint(arr1)\nprint([0, 1, 2, 3, 4] in arr1.tolist())\nprint([0, 1, 2, 3, 5] in arr1.tolist())\nprint([15, 16, 17, 18, 19] in arr1.tolist())"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def tolist(self):\n        return {}\narr1 = TBD3()\n\nclass TBD2():\n\n    def __init__(self):\n        self.container = {0: 15, 1: 16, 2: 17, 3: 18, 4: 19}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n\nclass TBD1():\n\n    def __init__(self):\n        self.container = {0: 0, 1: 1, 2: 2, 3: 3, 4: 5}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n\nclass TBD0():\n\n    def __init__(self):\n        self.container = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n__original_start_marker = None\nimport numpy as np\nnum = np.arange(20)\nprint('Original array:')\nprint(arr1)\nprint((TBD0() in arr1.tolist()))\nprint((TBD1() in arr1.tolist()))\nprint((TBD2() in arr1.tolist()))"""	arr1	TBD3	ndarray
"""import numpy as np\nprint('\\nOriginal arrays:')\nx = np.arange(16.0).reshape(4, 4)\nprint(x)\nprint('\\nSplit an array into multiple sub-arrays vertically:')\nprint(new_array1)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnew_array1 = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('\\nOriginal arrays:')\nx = np.arange(16.0).reshape(4, 4)\nprint(x)\nprint('\\nSplit an array into multiple sub-arrays vertically:')\nprint(new_array1)"""	new_array1	TBD0	list
'from collections import Counter\ndef compare_lists(x, y):\n    return Counter(x) == Counter(y)\nn1 = [20, 10, 30, 10, 20, 30]\nprint(compare_lists(n1, n2))'	'n2 = {}\n__original_start_marker = None\nfrom collections import Counter\n\ndef compare_lists(x, y):\n    return (Counter(x) == Counter(y))\nn1 = [20, 10, 30, 10, 20, 30]\nprint(compare_lists(n1, n2))'	n2	TBD1	list
"""nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint('Original list of integers:')\nprint(nums)\nprint('\\nEven numbers from the said list:')\neven_nums = list(filter(lambda x: x % 2 == 0, nums))\nprint(even_nums)\nprint('\\nOdd numbers from the said list:')\nprint(odd_nums)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nodd_nums = TBD1()\n__original_start_marker = None\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint('Original list of integers:')\nprint(nums)\nprint('\\nEven numbers from the said list:')\neven_nums = list(filter((lambda x: ((x % 2) == 0)), nums))\nprint(even_nums)\nprint('\\nOdd numbers from the said list:')\nprint(odd_nums)"""	odd_nums	TBD1	list
"""import pandas as pd\nnums1 = pd.Series([1, 8, 7, 5, 6, 5, 3, 4, 7, 1])\nprint('Original Series:')\nprint(nums1)\nprint(nums2)\nprint('Check 2 series are equal or not?')\nprint(nums1 == nums2)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnums2 = TBD1()\n__original_start_marker = None\nimport pandas as pd\nnums1 = pd.Series([1, 8, 7, 5, 6, 5, 3, 4, 7, 1])\nprint('Original Series:')\nprint(nums1)\nprint(nums2)\nprint('Check 2 series are equal or not?')\nprint((nums1 == nums2))"""	nums2	TBD1	Series
"""numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9)\ncount_even = 0\nfor x in numbers:\n    if not x % 2:\n        count_even += 1\n    else:\n        count_odd += 1\nprint('Number of even numbers :', count_even)\nprint('Number of odd numbers :', count_odd)"""	"""class TBD5():\n\n    def __init__(self, *args, **kwargs):\n        pass\ncount_odd = 0\n__original_start_marker = None\nnumbers = (1, 2, 3, 4, 5, 6, 7, 8, 9)\ncount_even = 0\nfor x in numbers:\n    if (not (x % 2)):\n        count_even += 1\n    else:\n        count_odd += 1\nprint('Number of even numbers :', count_even)\nprint('Number of odd numbers :', count_odd)"""	count_odd	TBD0	int
"""from collections import Counter\nprint('Original string: ' + s)\nprint('Most common three characters of the said string:')\nprint(Counter(s).most_common(3))"""	"""s = ''\n__original_start_marker = None\nfrom collections import Counter\nprint(('Original string: ' + s))\nprint('Most common three characters of the said string:')\nprint(Counter(s).most_common(3))"""	s	TBD0	str
"""def find_longest_word(words_list):\n    word_len = []\n    for n in words_list:\n        word_len.append((len(n), n))\n    word_len.sort()\n    return (word_len[-1][0], word_len[-1][1])\nprint('\\nLongest word: ', result[1])\nprint('Length of the longest word: ', result[0])"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = [TBD2(), TBD3()]\n__original_start_marker = None\n\ndef find_longest_word(words_list):\n    word_len = {}\n    for n in words_list:\n        word_len.append((len(n), n))\n    word_len.sort()\n    return (word_len[(- 1)][0], word_len[(- 1)][1])\nprint('\\nLongest word: ', result[1])\nprint('Length of the longest word: ', result[0])"""	result	TBD1	tuple
"""def first_index(l1):\n    return sum((1 for i in l1 if i > 45 and i % 2 == 0))\nnums = [12, 45, 23, 67, 78, 90, 45, 32, 100, 76, 38, 62, 73, 29, 83]\nprint('Original list:')\nprint(nums)\nprint('\\nNumber of Items of the said list which are even and greater than', n)\nprint(first_index(nums))"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nn = TBD1()\n__original_start_marker = None\n\ndef first_index(l1):\n    return sum((1 for i in l1 if ((i > 45) and ((i % 2) == 0))))\nnums = [12, 45, 23, 67, 78, 90, 45, 32, 100, 76, 38, 62, 73, 29, 83]\nprint('Original list:')\nprint(nums)\nprint('\\nNumber of Items of the said list which are even and greater than', n)\nprint(first_index(nums))"""	n	TBD1	int
"""nums = [2, 4, -6, -9, 11, -12, 14, -5, 17]\nprint('Original list:', nums)\ntotal_positive_nums = list(filter(lambda nums: nums > 0, nums))\nprint('Sum of the positive numbers: ', sum(total_negative_nums))\nprint('Sum of the negative numbers: ', sum(total_positive_nums))"""	"""total_negative_nums = {}\n__original_start_marker = None\nnums = [2, 4, (- 6), (- 9), 11, (- 12), 14, (- 5), 17]\nprint('Original list:', nums)\ntotal_positive_nums = list(filter((lambda nums: (nums > 0)), nums))\nprint('Sum of the positive numbers: ', sum(total_negative_nums))\nprint('Sum of the negative numbers: ', sum(total_positive_nums))"""	total_negative_nums	TBD1	list
"""import pandas as pd\nprint('Hourly range of perods 49:')\nprint(date_range)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\ndate_range = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Hourly range of perods 49:')\nprint(date_range)"""	date_range	TBD0	TimedeltaIndex
"""import numpy as np\np = [[1, 0], [0, 1]]\nq = [[1, 2], [3, 4]]\nprint('original matrix:')\nprint(p)\nprint(q)\nresult2 = np.cross(q, p)\nprint('cross product of the said two vectors(p, q):')\nprint(result1)\nprint('cross product of the said two vectors(q, p):')\nprint(result2)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult1 = TBD2()\n__original_start_marker = None\nimport numpy as np\np = [[1, 0], [0, 1]]\nq = [[1, 2], [3, 4]]\nprint('original matrix:')\nprint(p)\nprint(q)\nresult2 = np.cross(q, p)\nprint('cross product of the said two vectors(p, q):')\nprint(result1)\nprint('cross product of the said two vectors(q, p):')\nprint(result2)"""	result1	TBD2	ndarray
"""import pandas as pd\nprint('Original DataFrame with single index:')\nprint(df)\nprint('\\nDataFrame without index:')\nprint(df.to_string(index=False))"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def to_string(self, index=None):\n        return TBD1()\ndf = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Original DataFrame with single index:')\nprint(df)\nprint('\\nDataFrame without index:')\nprint(df.to_string(index=False))"""	df	TBD0	DataFrame
"""class Node(object):\n    def __init__(self, data=None, next=None, prev=None):\n        self.data = data\n        self.next = next\n        self.prev = prev\nclass doubly_linked_list(object):\n    def __init__(self):\n        self.head = None\n        self.tail = None\n        self.count = 0\n    def append_item(self, data):\n        new_item = Node(data, None, None)\n        if self.head is None:\n            self.head = new_item\n            self.tail = self.head\n        else:\n            new_item.prev = self.tail\n            self.tail.next = new_item\n            self.tail = new_item\n        self.count += 1\n    def print_foward(self):\n        for node in self.iter():\n            print(node)\n    def iter(self):\n        current = self.head\n        while current:\n            item_val = current.data\n            current = current.next\n            yield item_val\nitems.append_item('PHP')\nitems.append_item('Python')\nitems.append_item('C#')\nitems.append_item('C++')\nitems.append_item('Java')\nprint('Items in the Doubly linked list: ')\nitems.print_foward()"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def append_item(self, arg0):\n        return TBD1()\n\n    def print_foward(self):\n        return TBD2()\nitems = TBD0()\n__original_start_marker = None\n\nclass Node(object):\n\n    def __init__(self, data=None, next=None, prev=None):\n        self.data = data\n        self.next = next\n        self.prev = prev\nitems.append_item('PHP')\nitems.append_item('Python')\nitems.append_item('C#')\nitems.append_item('C++')\nitems.append_item('Java')\nprint('Items in the Doubly linked list: ')\nitems.print_foward()"""	items	TBD0	doubly_linked_list
"""import pandas as pd\nimport re as re\npd.set_option('display.max_columns', 10)\nprint('Original DataFrame:')\nprint(df)\ndef test_num_great(text):\n    result = re.findall('95[5-9]|9[6-9]\\\\d|[1-9]\\\\d{3,}', text)\n    return ' '.join(result)\ndf['num_great'] = df['address'].apply(lambda x: test_num_great(x))\nprint('\\nNumber greater than 940:')\nprint(df)"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def apply(self, arg0):\n        return TBD3()\ndf = {'address': TBD1()}\n__original_start_marker = None\nimport pandas as pd\nimport re as re\npd.set_option('display.max_columns', 10)\nprint('Original DataFrame:')\nprint(df)\n\ndef test_num_great(text):\n    result = re.findall('95[5-9]|9[6-9]\\\\d|[1-9]\\\\d{3,}', text)\n    return ' '.join(result)\ndf['num_great'] = df['address'].apply((lambda x: test_num_great(x)))\nprint('\\nNumber greater than 940:')\nprint(df)"""	df	TBD0	DataFrame
"""def relative_order(lst):\n    result = [i for i in range(len(lst)) if lst[i] == None]\n    return result\nprint('Original list:')\nprint(nums)\nprint('\\nIndexes of all None items of the list:')\nprint(relative_order(nums))"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __len__(self):\n        return 0\nnums = TBD0()\n__original_start_marker = None\n\ndef relative_order(lst):\n    result = [i for i in range(len(lst)) if (lst[i] == None)]\n    return result\nprint('Original list:')\nprint(nums)\nprint('\\nIndexes of all None items of the list:')\nprint(relative_order(nums))"""	nums	TBD0	list
"""import collections\nnums_dq = collections.deque(nums)\nprint('Number of 2 in the sequence')\nprint(nums_dq.count(2))\nprint('Number of 4 in the sequence')\nprint(nums_dq.count(4))"""	"""nums = {}\n__original_start_marker = None\nimport collections\nnums_dq = collections.deque(nums)\nprint('Number of 2 in the sequence')\nprint(nums_dq.count(2))\nprint('Number of 4 in the sequence')\nprint(nums_dq.count(4))"""	nums	TBD0	tuple
"""import pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nLength of sale_amount:')\ndf['sale_amount_length'] = df['sale_amount'].map(str).apply(len)\nprint(df)"""	"""class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def apply(self, arg0):\n        return TBD4()\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def map(self, arg0):\n        return TBD3()\ndf = {'sale_amount': TBD1()}\n__original_start_marker = None\nimport pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nLength of sale_amount:')\ndf['sale_amount_length'] = df['sale_amount'].map(str).apply(len)\nprint(df)"""	df	TBD0	DataFrame
"""def count_dups(nums):\n    element = []\n    freque = []\n    if not nums:\n        return element\n    running_count = 1\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i + 1]:\n            running_count += 1\n        else:\n            freque.append(running_count)\n            element.append(nums[i])\n            running_count = 1\n    freque.append(running_count)\n    element.append(nums[i + 1])\n    return (element, freque)\nprint('Original lists:')\nprint(nums)\nprint('\\nConsecutive duplicate elements and their frequency:')\nprint(count_dups(nums))"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __len__(self):\n        return 0\nnums = TBD2()\n__original_start_marker = None\n\ndef count_dups(nums):\n    element = {}\n    freque = {}\n    if (not nums):\n        return element\n    running_count = 1\n    for i in range((len(nums) - 1)):\n        if (nums[i] == nums[(i + 1)]):\n            running_count += 1\n        else:\n            freque.append(running_count)\n            element.append(nums[i])\n            running_count = 1\n    freque.append(running_count)\n    element.append(nums[(i + 1)])\n    return (element, freque)\nprint('Original lists:')\nprint(nums)\nprint('\\nConsecutive duplicate elements and their frequency:')\nprint(count_dups(nums))"""	nums	TBD2	list
"'import pandas as pd\npd.set_option(\'display.max_rows\', None)\ndf = pd.DataFrame({\'ord_no\': [70001, 70009, 70002, 70004, 70007, 70005, 70008, 70010, 70003, 70012, 70011, 70013], \'purch_amt\': [150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6], \'ord_date\': [\'2012-10-05\', \'2012-09-10\', \'2012-10-05\', \'2012-08-17\', \'2012-09-10\', \'2012-07-27\', \'2012-09-10\', \'2012-10-10\', \'2012-10-10\', \'2012-06-27\', \'2012-08-17\', \'2012-04-25\'], \'customer_id\': [3002, 3001, 3001, 3003, 3002, 3002, 3001, 3004, 3003, 3002, 3003, 3001], \'salesman_id\': [5002, 5003, 5001, 5003, 5002, 5001, 5001, 5003, 5003, 5002, 5003, 5001]})\nprint(\'Original Orders DataFrame:\')\nprint(df)\nprint(""\\nSplit the said data on \'salesman_id\', \'customer_id\' wise:"")\nfor name, group in result:\n    print(\'\\nGroup:\')\n    print(name)\n    print(group)\nn = 2\nprint(\'\\nDroping last two records:\')\nresult1 = df.drop(df.groupby([\'salesman_id\', \'customer_id\']).tail(n).index, axis=0)\nprint(result1)'"	"'class TBD10():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD8():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __lt__(self, other):\n        return TBD10()\nresult = {}\n__original_start_marker = None\nimport pandas as pd\npd.set_option(\'display.max_rows\', None)\ndf = pd.DataFrame({\'ord_no\': [70001, 70009, 70002, 70004, 70007, 70005, 70008, 70010, 70003, 70012, 70011, 70013], \'purch_amt\': [150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6], \'ord_date\': [\'2012-10-05\', \'2012-09-10\', \'2012-10-05\', \'2012-08-17\', \'2012-09-10\', \'2012-07-27\', \'2012-09-10\', \'2012-10-10\', \'2012-10-10\', \'2012-06-27\', \'2012-08-17\', \'2012-04-25\'], \'customer_id\': [3002, 3001, 3001, 3003, 3002, 3002, 3001, 3004, 3003, 3002, 3003, 3001], \'salesman_id\': [5002, 5003, 5001, 5003, 5002, 5001, 5001, 5003, 5003, 5002, 5003, 5001]})\nprint(\'Original Orders DataFrame:\')\nprint(df)\nprint(""\\nSplit the said data on \'salesman_id\', \'customer_id\' wise:"")\nfor (name, group) in result:\n    print(\'\\nGroup:\')\n    print(name)\n    print(group)\nn = 2\nprint(\'\\nDroping last two records:\')\nresult1 = df.drop(df.groupby([\'salesman_id\', \'customer_id\']).tail(n).index, axis=0)\nprint(result1)'"	result	TBD7	DataFrameGroupBy
"""import textwrap\ntext1 = textwrap.dedent(sample_text).strip()\nprint()\nprint(textwrap.fill(text1, initial_indent='', subsequent_indent=' ' * 4, width=80))\nprint()"""	"""sample_text = ''\n__original_start_marker = None\nimport textwrap\ntext1 = textwrap.dedent(sample_text).strip()\nprint()\nprint(textwrap.fill(text1, initial_indent='', subsequent_indent=(' ' * 4), width=80))\nprint()"""	sample_text	TBD0	str
"""import itertools as it\nmums1 = [1, 2, 3, 4]\nmums2 = [5, 6, 7, 8]\nmums3 = [9, 10, 11, 12]\nprint('Original lists:')\nprint(mums1)\nprint(mums2)\nprint(mums3)\nprint(mums4)\nprint('\\nSum of the specified range:')\nfor i in it.product([tuple(mums1)], it.permutations(mums2), it.permutations(mums3), it.permutations(mums4)):\n    print(i)"""	"""mums4 = {}\n__original_start_marker = None\nimport itertools as it\nmums1 = [1, 2, 3, 4]\nmums2 = [5, 6, 7, 8]\nmums3 = [9, 10, 11, 12]\nprint('Original lists:')\nprint(mums1)\nprint(mums2)\nprint(mums3)\nprint(mums4)\nprint('\\nSum of the specified range:')\nfor i in it.product([tuple(mums1)], it.permutations(mums2), it.permutations(mums3), it.permutations(mums4)):\n    print(i)"""	mums4	TBD4	list
"""import numpy as np\na = np.array([1, 3, 7, 9, 10, 13, 14, 17, 29])\nprint('Original array:')\nprint(a)\nprint('\\nElements within range: index position')\nprint(result)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD1()\n__original_start_marker = None\nimport numpy as np\na = np.array([1, 3, 7, 9, 10, 13, 14, 17, 29])\nprint('Original array:')\nprint(a)\nprint('\\nElements within range: index position')\nprint(result)"""	result	TBD1	tuple
"""def concatenate_lists(l1, l2, l3):\n    return [i + j + k for i, j, k in zip(l1, l2, l3)]\nl1 = ['0', '1', '2', '3', '4']\nl2 = ['red', 'green', 'black', 'blue', 'white']\nprint('Original lists:')\nprint(l1)\nprint(l2)\nprint(l3)\nprint('\\nConcatenate element-wise three said lists:')\nprint(concatenate_lists(l1, l2, l3))"""	"""l3 = {}\n__original_start_marker = None\n\ndef concatenate_lists(l1, l2, l3):\n    return [((i + j) + k) for (i, j, k) in zip(l1, l2, l3)]\nl1 = ['0', '1', '2', '3', '4']\nl2 = ['red', 'green', 'black', 'blue', 'white']\nprint('Original lists:')\nprint(l1)\nprint(l2)\nprint(l3)\nprint('\\nConcatenate element-wise three said lists:')\nprint(concatenate_lists(l1, l2, l3))"""	l3	TBD2	list
"""from collections import Counter\nl2 = [1, 1, 2, 4, 5, 6]\nprint('Original lists:')\nc1 = Counter(l1)\nc2 = Counter(l2)\ndiff = c1 - c2\nprint(list(diff.elements()))"""	"""l1 = {}\n__original_start_marker = None\nfrom collections import Counter\nl2 = [1, 1, 2, 4, 5, 6]\nprint('Original lists:')\nc1 = Counter(l1)\nc2 = Counter(l2)\ndiff = (c1 - c2)\nprint(list(diff.elements()))"""	l1	TBD1	list
'def selectionSort(nlist):\n    for fillslot in range(len(nlist) - 1, 0, -1):\n        maxpos = 0\n        for location in range(1, fillslot + 1):\n            if nlist[location] > nlist[maxpos]:\n                maxpos = location\n        temp = nlist[fillslot]\n        nlist[fillslot] = nlist[maxpos]\n        nlist[maxpos] = temp\nselectionSort(nlist)\nprint(nlist)'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __len__(self):\n        return 0\nnlist = TBD0()\n__original_start_marker = None\n\ndef selectionSort(nlist):\n    for fillslot in range((len(nlist) - 1), 0, (- 1)):\n        maxpos = 0\n        for location in range(1, (fillslot + 1)):\n            if (nlist[location] > nlist[maxpos]):\n                maxpos = location\n        temp = nlist[fillslot]\n        nlist[fillslot] = nlist[maxpos]\n        nlist[maxpos] = temp\nselectionSort(nlist)\nprint(nlist)'	nlist	TBD0	list
"""import pandas as pd\nnums2 = pd.Series([1, 8, 7, 5, 6, 5, 3, 4, 7, 1])\nprint('Original Series:')\nprint(nums1)\nprint(nums2)\nprint('Check 2 series are equal or not?')\nprint(nums1 == nums2)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnums1 = TBD1()\n__original_start_marker = None\nimport pandas as pd\nnums2 = pd.Series([1, 8, 7, 5, 6, 5, 3, 4, 7, 1])\nprint('Original Series:')\nprint(nums1)\nprint(nums2)\nprint('Check 2 series are equal or not?')\nprint((nums1 == nums2))"""	nums1	TBD1	Series
'import numpy as np\nprint(x)'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint(x)'	x	TBD0	ndarray
"""nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint('Original list of integers:')\nprint(nums)\nprint('\\nEven numbers from the said list:')\nprint(even_nums)\nprint('\\nOdd numbers from the said list:')\nodd_nums = list(filter(lambda x: x % 2 != 0, nums))\nprint(odd_nums)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\neven_nums = TBD1()\n__original_start_marker = None\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint('Original list of integers:')\nprint(nums)\nprint('\\nEven numbers from the said list:')\nprint(even_nums)\nprint('\\nOdd numbers from the said list:')\nodd_nums = list(filter((lambda x: ((x % 2) != 0)), nums))\nprint(odd_nums)"""	even_nums	TBD1	list
'from collections import Counter\ndef compare_lists(x, y):\n    return Counter(x) == Counter(y)\nn2 = [30, 20, 10, 30, 20, 50]\nprint(compare_lists(n1, n2))'	'n1 = {}\n__original_start_marker = None\nfrom collections import Counter\n\ndef compare_lists(x, y):\n    return (Counter(x) == Counter(y))\nn2 = [30, 20, 10, 30, 20, 50]\nprint(compare_lists(n1, n2))'	n1	TBD1	list
"'import pandas as pd\nimport re as re\nprint(\'Original DataFrame:\')\nprint(df)\ndef find_capital_word(str1):\n    result = re.findall(\'\\\\b[A-Z]\\\\w+\', str1)\n    return result\ndf[\'caps_word_in\'] = df[\'address\'].apply(lambda cw: find_capital_word(cw))\nprint(""\\nExtract words starting with capital words from the sentences\':"")\nprint(df)'"	"'class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def apply(self, arg0):\n        return TBD3()\ndf = {\'address\': TBD1()}\n__original_start_marker = None\nimport pandas as pd\nimport re as re\nprint(\'Original DataFrame:\')\nprint(df)\n\ndef find_capital_word(str1):\n    result = re.findall(\'\\\\b[A-Z]\\\\w+\', str1)\n    return result\ndf[\'caps_word_in\'] = df[\'address\'].apply((lambda cw: find_capital_word(cw)))\nprint(""\\nExtract words starting with capital words from the sentences\':"")\nprint(df)'"	df	TBD0	DataFrame
'result = {}\nfor key, value in student_data.items():\n    if value not in result.values():\n        result[key] = value\nprint(result)'	'student_data = {}\n__original_start_marker = None\nresult = {}\nfor (key, value) in student_data.items():\n    if (value not in result.values()):\n        result[key] = value\nprint(result)'	student_data	TBD1	dict
"""import pandas as pd\nnum_series = pd.Series(list('2390238923902390239023'))\nelement_pos = [0, 2, 6, 11, 21]\nprint('Original Series:')\nprint(num_series)\nprint('\\nExtract items at given positions of the said series:')\nprint(result)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD1()\n__original_start_marker = None\nimport pandas as pd\nnum_series = pd.Series(list('2390238923902390239023'))\nelement_pos = [0, 2, 6, 11, 21]\nprint('Original Series:')\nprint(num_series)\nprint('\\nExtract items at given positions of the said series:')\nprint(result)"""	result	TBD1	Series
"""import pandas as pd\nprint('Sequences of fixed-frequency dates and time spans (1 H):\\n')\nr1 = pd.date_range('2030-01-01', periods=10, freq='H')\nprint(r1)\nprint('\\nSequences of fixed-frequency dates and time spans (3 H):\\n')\nprint(r2)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nr2 = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Sequences of fixed-frequency dates and time spans (1 H):\\n')\nr1 = pd.date_range('2030-01-01', periods=10, freq='H')\nprint(r1)\nprint('\\nSequences of fixed-frequency dates and time spans (3 H):\\n')\nprint(r2)"""	r2	TBD0	DatetimeIndex
"""def list_difference(l1, l2):\n    result = list(l1)\n    for el in l2:\n        result.remove(el)\n    return result\nl1 = [1, 1, 2, 3, 3, 4, 4, 5, 6, 7]\nprint('Original lists:')\nprint(l1)\nprint(l2)\nprint('\\nDifference between two said list including duplicate elements):')\nprint(list_difference(l1, l2))"""	"""l2 = {}\n__original_start_marker = None\n\ndef list_difference(l1, l2):\n    result = list(l1)\n    for el in l2:\n        result.remove(el)\n    return result\nl1 = [1, 1, 2, 3, 3, 4, 4, 5, 6, 7]\nprint('Original lists:')\nprint(l1)\nprint(l2)\nprint('\\nDifference between two said list including duplicate elements):')\nprint(list_difference(l1, l2))"""	l2	TBD1	list
"""import numpy as np\nimport pandas as pd\nchar_list = list('ABCDEFGHIJKLMNOP')\nnum_arra = np.arange(8)\nnum_dict = dict(zip(char_list, num_arra))\nnum_ser = pd.Series(num_dict)\nprint(df.head())"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def head(self):\n        return TBD1()\ndf = TBD0()\n__original_start_marker = None\nimport numpy as np\nimport pandas as pd\nchar_list = list('ABCDEFGHIJKLMNOP')\nnum_arra = np.arange(8)\nnum_dict = dict(zip(char_list, num_arra))\nnum_ser = pd.Series(num_dict)\nprint(df.head())"""	df	TBD0	DataFrame
"""import pandas as pd\nimport numpy as np\nnp.random.seed(24)\ndf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\ndf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))], axis=1)\ndf.iloc[0, 2] = np.nan\ndf.iloc[3, 3] = np.nan\ndf.iloc[4, 1] = np.nan\ndf.iloc[9, 4] = np.nan\nprint('Original array:')\nprint(df)\nprint('\\nDataframe - table style:')\ntd_props = [('font-size', '12px')]\nstyles = [dict(selector='th', props=th_props), dict(selector='td', props=td_props)]\ndf.style.set_table_styles(styles)"""	"""class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\nth_props = TBD4()\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\nnp.random.seed(24)\ndf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\ndf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))], axis=1)\ndf.iloc[(0, 2)] = np.nan\ndf.iloc[(3, 3)] = np.nan\ndf.iloc[(4, 1)] = np.nan\ndf.iloc[(9, 4)] = np.nan\nprint('Original array:')\nprint(df)\nprint('\\nDataframe - table style:')\ntd_props = [('font-size', '12px')]\nstyles = [dict(selector='th', props=th_props), dict(selector='td', props=td_props)]\ndf.style.set_table_styles(styles)"""	th_props	TBD4	list
"""import collections\nprint(deque_colors)\nprint('\\nAdding to the left: ')\ndeque_colors.appendleft('Pink')\nprint(deque_colors)\nprint('\\nAdding to the right: ')\ndeque_colors.append('Orange')\nprint(deque_colors)\nprint('\\nRemoving from the right: ')\ndeque_colors.pop()\nprint(deque_colors)\nprint('\\nRemoving from the left: ')\ndeque_colors.popleft()\nprint(deque_colors)\nprint('\\nReversing the deque: ')\ndeque_colors.reverse()\nprint(deque_colors)"""	"""class TBD5():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def appendleft(self, arg0):\n        return TBD1()\n\n    def append(self, arg0):\n        return TBD2()\n\n    def pop(self):\n        return TBD3()\n\n    def popleft(self):\n        return TBD4()\n\n    def reverse(self):\n        return TBD5()\ndeque_colors = TBD0()\n__original_start_marker = None\nimport collections\nprint(deque_colors)\nprint('\\nAdding to the left: ')\ndeque_colors.appendleft('Pink')\nprint(deque_colors)\nprint('\\nAdding to the right: ')\ndeque_colors.append('Orange')\nprint(deque_colors)\nprint('\\nRemoving from the right: ')\ndeque_colors.pop()\nprint(deque_colors)\nprint('\\nRemoving from the left: ')\ndeque_colors.popleft()\nprint(deque_colors)\nprint('\\nReversing the deque: ')\ndeque_colors.reverse()\nprint(deque_colors)"""	deque_colors	TBD0	deque
"""import pandas as pd\nprint('First date:')\nprint(newday)\nprint('\\nThe day name of the said date:')\nprint(newday.day_name())\nprint('\\nAdd 2 days with the said date:')\nnewday1 = newday + pd.Timedelta('2 day')\nprint(newday1.day_name())\nprint('\\nNext business day:')\nnbday = newday + pd.offsets.BDay()\nprint(nbday.day_name())"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def day_name(self):\n        return TBD3()\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def day_name(self):\n        return TBD1()\n\n    def __add__(self, other):\n        return TBD2()\nnewday = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('First date:')\nprint(newday)\nprint('\\nThe day name of the said date:')\nprint(newday.day_name())\nprint('\\nAdd 2 days with the said date:')\nnewday1 = (newday + pd.Timedelta('2 day'))\nprint(newday1.day_name())\nprint('\\nNext business day:')\nnbday = (newday + pd.offsets.BDay())\nprint(nbday.day_name())"""	newday	TBD0	Timestamp
"""from itertools import groupby\nuno_list = [2, 1, 3, 8, 5, 1, 4, 2, 3, 4, 0, 8, 2, 0, 8, 4, 2, 3, 4, 2]\nprint('Original list:')\nprint(uno_list)\nuno_list.sort()\nprint(uno_list)\nprint('\\nSort the said unordered list:')\nprint(uno_list)\nprint('\\nFrequency of the elements of the said unordered list:')\nprint(result)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD2()\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n__original_start_marker = None\nfrom itertools import groupby\nuno_list = [2, 1, 3, 8, 5, 1, 4, 2, 3, 4, 0, 8, 2, 0, 8, 4, 2, 3, 4, 2]\nprint('Original list:')\nprint(uno_list)\nuno_list.sort()\nprint(uno_list)\nprint('\\nSort the said unordered list:')\nprint(uno_list)\nprint('\\nFrequency of the elements of the said unordered list:')\nprint(result)"""	result	TBD2	list
"""def pair_consecutive_elements(lst):\n    result = [[lst[i], lst[i + 1]] for i in range(len(lst) - 1)]\n    return result\nprint('Original lists:')\nprint(nums)\nprint('Pair up the consecutive elements of the said list:')\nprint(pair_consecutive_elements(nums))\nnums = [1, 2, 3, 4, 5]\nprint('\\nOriginal lists:')\nprint(nums)\nprint('Pair up the consecutive elements of the said list:')\nprint(pair_consecutive_elements(nums))"""	"""class TBD7():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD6():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD4():\n\n    def __init__(self):\n        self.container = {'TBD5': TBD5(), 0: TBD7(), 'TBD6': TBD6()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n\nclass TBD5(int):\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __add__(self, other):\n        return TBD6()\ni = TBD5()\nlst = TBD4()\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __len__(self):\n        return 0\nnums = TBD2()\n__original_start_marker = None\n\ndef pair_consecutive_elements(lst):\n    result = [[lst[i], lst[(i + 1)]] for i in range((len(lst) - 1))]\n    return result\nprint('Original lists:')\nprint(nums)\nprint('Pair up the consecutive elements of the said list:')\nprint(pair_consecutive_elements(nums))\nnums = [1, 2, 3, 4, 5]\nprint('\\nOriginal lists:')\nprint(nums)\nprint('Pair up the consecutive elements of the said list:')\nprint(pair_consecutive_elements(nums))"""	nums	TBD2	list
"""import decimal\nprint('Construct a Decimal from a float:')\nprint(pi_val)\nprint(pi_val.as_tuple())\nprint('\\nConstruct a Decimal from a string:')\nnum_str = decimal.Decimal('123.25')\nprint(num_str)\nprint(num_str.as_tuple())"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def as_tuple(self):\n        return TBD1()\npi_val = TBD0()\n__original_start_marker = None\nimport decimal\nprint('Construct a Decimal from a float:')\nprint(pi_val)\nprint(pi_val.as_tuple())\nprint('\\nConstruct a Decimal from a string:')\nnum_str = decimal.Decimal('123.25')\nprint(num_str)\nprint(num_str.as_tuple())"""	pi_val	TBD0	Decimal
"""class Node(object):\n    def __init__(self, data=None, next=None, prev=None):\n        self.data = data\n        self.next = next\n        self.prev = prev\nclass doubly_linked_list(object):\n    def __init__(self):\n        self.head = None\n        self.tail = None\n        self.count = 0\n    def append_item(self, data):\n        new_item = Node(data, None, None)\n        if self.head is None:\n            self.head = new_item\n            self.tail = self.head\n        else:\n            new_item.prev = self.tail\n            self.tail.next = new_item\n            self.tail = new_item\n        self.count += 1\n    def iter(self):\n        current = self.head\n        while current:\n            item_val = current.data\n            current = current.next\n            yield item_val\n    def print_foward(self):\n        for node in self.iter():\n            print(node)\n    def search_item(self, val):\n        for node in self.iter():\n            if val == node:\n                return True\n        return False\nitems.append_item('PHP')\nitems.append_item('Python')\nitems.append_item('C#')\nitems.append_item('C++')\nitems.append_item('Java')\nitems.append_item('SQL')\nprint('Original list:')\nitems.print_foward()\nprint('\\n')\nif items.search_item('SQL'):\n    print('True')\nelse:\n    print('False')\nif items.search_item('C+'):\n    print('True')\nelse:\n    print('False')"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def append_item(self, arg0):\n        return TBD1()\n\n    def print_foward(self):\n        return TBD2()\n\n    def search_item(self, arg0):\n        return TBD3()\nitems = TBD0()\n__original_start_marker = None\n\nclass Node(object):\n\n    def __init__(self, data=None, next=None, prev=None):\n        self.data = data\n        self.next = next\n        self.prev = prev\nitems.append_item('PHP')\nitems.append_item('Python')\nitems.append_item('C#')\nitems.append_item('C++')\nitems.append_item('Java')\nitems.append_item('SQL')\nprint('Original list:')\nitems.print_foward()\nprint('\\n')\nif items.search_item('SQL'):\n    print('True')\nelse:\n    print('False')\nif items.search_item('C+'):\n    print('True')\nelse:\n    print('False')"""	items	TBD0	doubly_linked_list
'import numpy as np\nprint(x)\nx = np.array([[1, 2], [3, 4]])\nprint(np.repeat(x, 2))'	'class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = TBD1()\n__original_start_marker = None\nimport numpy as np\nprint(x)\nx = np.array([[1, 2], [3, 4]])\nprint(np.repeat(x, 2))'	x	TBD1	ndarray
"""from itertools import groupby\ndef encode_list(s_list):\n    return [[len(list(group)), key] for key, group in groupby(s_list)]\nprint('Original list:')\nprint(n_list)\nprint('\\nList reflecting the run-length encoding from the said list:')\nprint(encode_list(n_list))\nn_list = 'automatically'\nprint('\\nOriginal String:')\nprint(n_list)\nprint('\\nList reflecting the run-length encoding from the said string:')\nprint(encode_list(n_list))"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\nkey = TBD3()\ngroup = {}\nn_list = {}\n__original_start_marker = None\nfrom itertools import groupby\n\ndef encode_list(s_list):\n    return [[len(list(group)), key] for (key, group) in groupby(s_list)]\nprint('Original list:')\nprint(n_list)\nprint('\\nList reflecting the run-length encoding from the said list:')\nprint(encode_list(n_list))\nn_list = 'automatically'\nprint('\\nOriginal String:')\nprint(n_list)\nprint('\\nList reflecting the run-length encoding from the said string:')\nprint(encode_list(n_list))"""	n_list	TBD1	list
"""n = 4\nnew_list = ['{}{}'.format(x, y) for y in range(1, n + 1) for x in my_list]\nprint(new_list)"""	"""my_list = {}\n__original_start_marker = None\nn = 4\nnew_list = ['{}{}'.format(x, y) for y in range(1, (n + 1)) for x in my_list]\nprint(new_list)"""	my_list	TBD0	list
"""from copy import deepcopy\nfrom random import randint\ndef shuffle_list(lst):\n    temp_lst = deepcopy(lst)\n    m = len(temp_lst)\n    while m:\n        m -= 1\n        i = randint(0, m)\n        temp_lst[m], temp_lst[i] = (temp_lst[i], temp_lst[m])\n    return temp_lst\nprint('Original list: ', nums)\nprint('\\nShuffle the elements of the said list:')\nprint(shuffle_list(nums))"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __len__(self):\n        return 0\nnums = TBD0()\n__original_start_marker = None\nfrom copy import deepcopy\nfrom random import randint\n\ndef shuffle_list(lst):\n    temp_lst = deepcopy(lst)\n    m = len(temp_lst)\n    while m:\n        m -= 1\n        i = randint(0, m)\n        (temp_lst[m], temp_lst[i]) = (temp_lst[i], temp_lst[m])\n    return temp_lst\nprint('Original list: ', nums)\nprint('\\nShuffle the elements of the said list:')\nprint(shuffle_list(nums))"""	nums	TBD0	list
'import datetime\nnow = datetime.datetime.now()\nprint(now)\nyear = lambda x: x.year\nmonth = lambda x: x.month\nt = lambda x: x.time()\nprint(year(now))\nprint(month(now))\nprint(day(now))\nprint(t(now))'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\ndef day(arg0):\n    return TBD0()\n__original_start_marker = None\nimport datetime\nnow = datetime.datetime.now()\nprint(now)\nyear = (lambda x: x.year)\nmonth = (lambda x: x.month)\nt = (lambda x: x.time())\nprint(year(now))\nprint(month(now))\nprint(day(now))\nprint(t(now))'	day	TBD0	function
'import numpy as np\nx = np.empty((3, 4))\nprint(x)\nprint(y)'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\ny = TBD0()\n__original_start_marker = None\nimport numpy as np\nx = np.empty((3, 4))\nprint(x)\nprint(y)'	y	TBD0	ndarray
"""def test(d):\n    return list(d.items())\nprint('Original Dictionary:')\nprint(d)\nprint('\\nConvert the said dictionary to a list of tuples:')\nprint(test(d))"""	"""d = {}\n__original_start_marker = None\n\ndef test(d):\n    return list(d.items())\nprint('Original Dictionary:')\nprint(d)\nprint('\\nConvert the said dictionary to a list of tuples:')\nprint(test(d))"""	d	TBD0	dict
"""dict = {'Alex': ['subj1', 'subj2', 'subj3'], 'David': ['subj1', 'subj2']}\nprint(ctr)"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\nctr = TBD3()\n__original_start_marker = None\ndict = {'Alex': ['subj1', 'subj2', 'subj3'], 'David': ['subj1', 'subj2']}\nprint(ctr)"""	ctr	TBD3	int
"""import numpy as np\nx = np.array([[1, 2], [3, 4]])\ny = np.array([[1, 2], [1, 2]])\nprint('Array1: ')\nprint(x)\nprint('Array1: ')\nprint(y)\nprint('Result- x^y:')\nprint(r1)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nr1 = TBD2()\n__original_start_marker = None\nimport numpy as np\nx = np.array([[1, 2], [3, 4]])\ny = np.array([[1, 2], [1, 2]])\nprint('Array1: ')\nprint(x)\nprint('Array1: ')\nprint(y)\nprint('Result- x^y:')\nprint(r1)"""	r1	TBD2	ndarray
"""bases_num = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nindex = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint('Base numbers abd index: ')\nprint(bases_num)\nprint(index)\nprint('\\nPower of said number in bases raised to the corresponding number in the index:')\nprint(result)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD2()\n__original_start_marker = None\nbases_num = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nindex = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint('Base numbers abd index: ')\nprint(bases_num)\nprint(index)\nprint('\\nPower of said number in bases raised to the corresponding number in the index:')\nprint(result)"""	result	TBD2	list
"""def remove_chars(str1, unwanted_chars):\n    for i in unwanted_chars:\n        str1 = str1.replace(i, '')\n    return str1\nstr2 = 'A%^!B#*CD'\nunwanted_chars = ['#', '*', '!', '^', '%']\nprint('Original String : ' + str1)\nprint('After removing unwanted characters:')\nprint(remove_chars(str1, unwanted_chars))\nprint('\\nOriginal String : ' + str2)\nprint('After removing unwanted characters:')\nprint(remove_chars(str2, unwanted_chars))"""	"""str1 = ''\n__original_start_marker = None\n\ndef remove_chars(str1, unwanted_chars):\n    for i in unwanted_chars:\n        str1 = str1.replace(i, '')\n    return str1\nstr2 = 'A%^!B#*CD'\nunwanted_chars = ['#', '*', '!', '^', '%']\nprint(('Original String : ' + str1))\nprint('After removing unwanted characters:')\nprint(remove_chars(str1, unwanted_chars))\nprint(('\\nOriginal String : ' + str2))\nprint('After removing unwanted characters:')\nprint(remove_chars(str2, unwanted_chars))"""	str1	TBD1	str
"""import numpy as np\nprint('Array1: ', array1)\narray2 = [10, 30, 40, 50, 70]\nprint('Array2: ', array2)\nprint('Unique sorted array of values that are in either of the two input arrays:')\nprint(np.union1d(array1, array2))"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\narray1 = 0\n__original_start_marker = None\nimport numpy as np\nprint('Array1: ', array1)\narray2 = [10, 30, 40, 50, 70]\nprint('Array2: ', array2)\nprint('Unique sorted array of values that are in either of the two input arrays:')\nprint(np.union1d(array1, array2))"""	array1	TBD1	ndarray
"'import pandas as pd\npd.set_option(\'display.max_rows\', None)\nprint(\'Original Orders DataFrame:\')\nprint(df)\nprint(""\\nSplit the said data on \'salesman_id\', \'customer_id\' wise:"")\nresult = df.groupby([\'salesman_id\', \'customer_id\'])\nfor name, group in result:\n    print(\'\\nGroup:\')\n    print(name)\n    print(group)\nn = 2\nprint(\'\\nDroping last two records:\')\nresult1 = df.drop(df.groupby([\'salesman_id\', \'customer_id\']).tail(n).index, axis=0)\nprint(result1)'"	"'class TBD6():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD5():\n\n    def __init__(self, *args, **kwargs):\n        self.index = TBD6()\n        pass\n\nclass TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD3():\n\n    def __init__(self):\n        self.container = {}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = \'\'\n        ret_str += \'[ \'\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += \', \'\n        ret_str += \' ]\'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print(\'[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]\'.format(type(self).__name__, key, \'TBD\'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print(\'[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]\'.format(type(self).__name__, type(key).__name__, \'TBD\'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n\n    def tail(self, arg0):\n        return TBD5()\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def groupby(self, arg0):\n        return TBD3()\n\n    def drop(self, arg0, axis=None):\n        return TBD4()\ndf = TBD2()\n__original_start_marker = None\nimport pandas as pd\npd.set_option(\'display.max_rows\', None)\nprint(\'Original Orders DataFrame:\')\nprint(df)\nprint(""\\nSplit the said data on \'salesman_id\', \'customer_id\' wise:"")\nresult = df.groupby([\'salesman_id\', \'customer_id\'])\nfor (name, group) in result:\n    print(\'\\nGroup:\')\n    print(name)\n    print(group)\nn = 2\nprint(\'\\nDroping last two records:\')\nresult1 = df.drop(df.groupby([\'salesman_id\', \'customer_id\']).tail(n).index, axis=0)\nprint(result1)'"	df	TBD2	DataFrame
"""import numpy as np\nprint('Original array:')\nprint(arra_data)\nprint('\\nExtracted data: First element of the second row and fourth element of fourth row  ')\nprint(arra_data[[1, 3], [0, 3]])"""	"""class TBD2():\n\n    def __init__(self):\n        self.container = {'tuple': tuple()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\narra_data = TBD2()\n\nclass TBD1():\n\n    def __init__(self):\n        self.container = {0: 0, 1: 3}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n\nclass TBD0():\n\n    def __init__(self):\n        self.container = {0: 1, 1: 3}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n__original_start_marker = None\nimport numpy as np\nprint('Original array:')\nprint(arra_data)\nprint('\\nExtracted data: First element of the second row and fourth element of fourth row  ')\nprint(arra_data[(TBD0(), TBD1())])"""	arra_data	TBD2	ndarray
"""import numpy as np\nprint('Original array:')\nprint(nums)\nprint(np.count_nonzero(nums == 10))\nprint(np.count_nonzero(nums == 20))\nprint(np.count_nonzero(nums == 30))\nprint(np.count_nonzero(nums == 0))"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnums = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Original array:')\nprint(nums)\nprint(np.count_nonzero((nums == 10)))\nprint(np.count_nonzero((nums == 20)))\nprint(np.count_nonzero((nums == 30)))\nprint(np.count_nonzero((nums == 0)))"""	nums	TBD0	ndarray
"""import numpy as np\np = [[1, 0], [0, 1]]\nq = [[1, 2], [3, 4]]\nprint('original matrix:')\nprint(p)\nprint(q)\nresult1 = np.cross(p, q)\nprint('cross product of the said two vectors(p, q):')\nprint(result1)\nprint('cross product of the said two vectors(q, p):')\nprint(result2)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult2 = TBD2()\n__original_start_marker = None\nimport numpy as np\np = [[1, 0], [0, 1]]\nq = [[1, 2], [3, 4]]\nprint('original matrix:')\nprint(p)\nprint(q)\nresult1 = np.cross(p, q)\nprint('cross product of the said two vectors(p, q):')\nprint(result1)\nprint('cross product of the said two vectors(q, p):')\nprint(result2)"""	result2	TBD2	ndarray
"""print('Original list:', nums)\ntotal_negative_nums = list(filter(lambda nums: nums < 0, nums))\ntotal_positive_nums = list(filter(lambda nums: nums > 0, nums))\nprint('Sum of the positive numbers: ', sum(total_negative_nums))\nprint('Sum of the negative numbers: ', sum(total_positive_nums))"""	"""nums = {}\n__original_start_marker = None\nprint('Original list:', nums)\ntotal_negative_nums = list(filter((lambda nums: (nums < 0)), nums))\ntotal_positive_nums = list(filter((lambda nums: (nums > 0)), nums))\nprint('Sum of the positive numbers: ', sum(total_negative_nums))\nprint('Sum of the negative numbers: ', sum(total_positive_nums))"""	nums	TBD0	list
"""import numpy as np\narra = np.ones((1, 8, 8))\nprint('Original array:')\nprint(arra)\nprint('\\nResult:')\nprint(result)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD0()\n__original_start_marker = None\nimport numpy as np\narra = np.ones((1, 8, 8))\nprint('Original array:')\nprint(arra)\nprint('\\nResult:')\nprint(result)"""	result	TBD0	ndarray
"""def position_max_min(nums):\n    max_val = max(nums)\n    min_val = min(nums)\n    max_result = [i for i, j in enumerate(nums) if j == max_val]\n    min_result = [i for i, j in enumerate(nums) if j == min_val]\n    return (max_result, min_result)\nnums = [12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54]\nprint('Original list:')\nprint(nums)\nprint('\\nIndex positions of the maximum value of the said list:')\nprint(result[0])\nprint('\\nIndex positions of the minimum value of the said list:')\nprint(result[1])"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = [TBD2(), TBD3()]\n__original_start_marker = None\n\ndef position_max_min(nums):\n    max_val = max(nums)\n    min_val = min(nums)\n    max_result = [i for (i, j) in enumerate(nums) if (j == max_val)]\n    min_result = [i for (i, j) in enumerate(nums) if (j == min_val)]\n    return (max_result, min_result)\nnums = [12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54]\nprint('Original list:')\nprint(nums)\nprint('\\nIndex positions of the maximum value of the said list:')\nprint(result[0])\nprint('\\nIndex positions of the minimum value of the said list:')\nprint(result[1])"""	result	TBD1	tuple
'import numpy as np\nx = np.random.uniform(1, 12, 5)\nn = x.flat[np.abs(x - v).argmin()]\nprint(n)'	'class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nv = 0\n__original_start_marker = None\nimport numpy as np\nx = np.random.uniform(1, 12, 5)\nn = x.flat[np.abs((x - v)).argmin()]\nprint(n)'	v	TBD0	int
"""import numpy as np\nprint('\\nOriginal arrays:')\nx = np.arange(9).reshape(3, 3)\ny = x * 3\nprint('Array-1')\nprint(x)\nprint('Array-2')\nprint(y)\nprint('\\nStack arrays in sequence horizontally:')\nprint(new_array)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnew_array = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('\\nOriginal arrays:')\nx = np.arange(9).reshape(3, 3)\ny = (x * 3)\nprint('Array-1')\nprint(x)\nprint('Array-2')\nprint(y)\nprint('\\nStack arrays in sequence horizontally:')\nprint(new_array)"""	new_array	TBD0	ndarray
"""import pandas as pd\ndateset1 = pd.date_range('2029-01-01 00:00:00', periods=20, freq='3h10min')\nprint('Time series with frequency 3h10min:')\nprint(dateset1)\nprint('\\nTime series with frequency 1 day 10 minutes and 20 microseconds:')\nprint(dateset2)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\ndateset2 = TBD0()\n__original_start_marker = None\nimport pandas as pd\ndateset1 = pd.date_range('2029-01-01 00:00:00', periods=20, freq='3h10min')\nprint('Time series with frequency 3h10min:')\nprint(dateset1)\nprint('\\nTime series with frequency 1 day 10 minutes and 20 microseconds:')\nprint(dateset2)"""	dateset2	TBD0	DatetimeIndex
"""import pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nReplace the missing values with the most frequent values present in each column:')\nresult = df.fillna(df.mode().iloc[0])\nprint(result)"""	"""class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        self.iloc = [TBD4()]\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def fillna(self, arg0):\n        return TBD1()\n\n    def mode(self):\n        return TBD2()\ndf = TBD0()\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nReplace the missing values with the most frequent values present in each column:')\nresult = df.fillna(df.mode().iloc[0])\nprint(result)"""	df	TBD0	DataFrame
"""numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9)\ncount_odd = 0\nfor x in numbers:\n    if not x % 2:\n        count_even += 1\n    else:\n        count_odd += 1\nprint('Number of even numbers :', count_even)\nprint('Number of odd numbers :', count_odd)"""	"""class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\ncount_even = 0\n__original_start_marker = None\nnumbers = (1, 2, 3, 4, 5, 6, 7, 8, 9)\ncount_odd = 0\nfor x in numbers:\n    if (not (x % 2)):\n        count_even += 1\n    else:\n        count_odd += 1\nprint('Number of even numbers :', count_even)\nprint('Number of odd numbers :', count_odd)"""	count_even	TBD0	int
"""def condition_match(x):\n    return x % 2 == 0\ndef remove_items_con(data, N):\n    ctr = 1\n    result = []\n    for x in data:\n        if ctr > N or not condition_match(x):\n            result.append(x)\n        else:\n            ctr = ctr + 1\n    return result\nnums = [3, 10, 4, 7, 5, 7, 8, 3, 3, 4, 5, 9, 3, 4, 9, 8, 5]\nprint('Original list:')\nprint(nums)\nprint('\\nRemove first 4 even numbers from the said list:')\nprint(remove_items_con(nums, N))"""	"""class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\nN = 0\n__original_start_marker = None\n\ndef condition_match(x):\n    return ((x % 2) == 0)\n\ndef remove_items_con(data, N):\n    ctr = 1\n    result = []\n    for x in data:\n        if ((ctr > N) or (not condition_match(x))):\n            result.append(x)\n        else:\n            ctr = (ctr + 1)\n    return result\nnums = [3, 10, 4, 7, 5, 7, 8, 3, 3, 4, 5, 9, 3, 4, 9, 8, 5]\nprint('Original list:')\nprint(nums)\nprint('\\nRemove first 4 even numbers from the said list:')\nprint(remove_items_con(nums, N))"""	N	TBD2	int
"""import pandas as pd\nprint('Original Series:')\nprint(series1)\nresult = series1.map(lambda x: len(x))\nprint('\\nNumber of characters in each word in the said series:')\nprint(result)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def map(self, arg0):\n        return TBD1()\nseries1 = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Original Series:')\nprint(series1)\nresult = series1.map((lambda x: len(x)))\nprint('\\nNumber of characters in each word in the said series:')\nprint(result)"""	series1	TBD0	Series
"""import numpy as np\nx = np.array([1.0, 2.0, 0.2, 0.3])\nprint('Original array: ')\nprint(x)\nr1 = np.reciprocal(x)\nassert np.array_equal(r1, r2)\nprint('Reciprocal for all elements of the said array:')\nprint(r1)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nr2 = TBD1()\n__original_start_marker = None\nimport numpy as np\nx = np.array([1.0, 2.0, 0.2, 0.3])\nprint('Original array: ')\nprint(x)\nr1 = np.reciprocal(x)\nassert np.array_equal(r1, r2)\nprint('Reciprocal for all elements of the said array:')\nprint(r1)"""	r2	TBD1	ndarray
"""print('Original list of integers:')\nprint(nums)\nprint('\\nEven numbers from the said list:')\neven_nums = list(filter(lambda x: x % 2 == 0, nums))\nprint(even_nums)\nprint('\\nOdd numbers from the said list:')\nodd_nums = list(filter(lambda x: x % 2 != 0, nums))\nprint(odd_nums)"""	"""nums = {}\n__original_start_marker = None\nprint('Original list of integers:')\nprint(nums)\nprint('\\nEven numbers from the said list:')\neven_nums = list(filter((lambda x: ((x % 2) == 0)), nums))\nprint(even_nums)\nprint('\\nOdd numbers from the said list:')\nodd_nums = list(filter((lambda x: ((x % 2) != 0)), nums))\nprint(odd_nums)"""	nums	TBD0	list
"""from collections import defaultdict\ndef find_sub_string(str):\n    str_len = len(str)\n    dist_count_char = len(set([x for x in str]))\n    ctr, start_pos, start_pos_index, min_len = (0, 0, -1, 9999999999)\n    curr_count = defaultdict(lambda: 0)\n    for i in range(str_len):\n        curr_count[str[i]] += 1\n        if curr_count[str[i]] == 1:\n            ctr += 1\n        if ctr == dist_count_char:\n            while curr_count[str[start_pos]] > 1:\n                if curr_count[str[start_pos]] > 1:\n                    curr_count[str[start_pos]] -= 1\n                start_pos += 1\n            len_window = i - start_pos + 1\n            if min_len > len_window:\n                min_len = len_window\n                start_pos_index = start_pos\n    return str[start_pos_index:start_pos_index + min_len]\nprint('Original Strings:\\n', str1)\nprint('\\nSmallest window that contains all characters of the said string:')\nprint(find_sub_string(str1))"""	"""class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nstr1 = [TBD2(), TBD3(), TBD4()]\n__original_start_marker = None\nfrom collections import defaultdict\n\ndef find_sub_string(str):\n    str_len = len(str)\n    dist_count_char = len(set([x for x in str]))\n    (ctr, start_pos, start_pos_index, min_len) = (0, 0, (- 1), 9999999999)\n    curr_count = defaultdict((lambda : 0))\n    for i in range(str_len):\n        curr_count[str[i]] += 1\n        if (curr_count[str[i]] == 1):\n            ctr += 1\n        if (ctr == dist_count_char):\n            while (curr_count[str[start_pos]] > 1):\n                if (curr_count[str[start_pos]] > 1):\n                    curr_count[str[start_pos]] -= 1\n                start_pos += 1\n            len_window = ((i - start_pos) + 1)\n            if (min_len > len_window):\n                min_len = len_window\n                start_pos_index = start_pos\n    return str[start_pos_index:(start_pos_index + min_len)]\nprint('Original Strings:\\n', str1)\nprint('\\nSmallest window that contains all characters of the said string:')\nprint(find_sub_string(str1))"""	str1	TBD0	str
"""import pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('Count unique values:')\nprint(df.groupby('value')['id'].nunique())"""	"""class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def nunique(self):\n        return TBD4()\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def groupby(self, arg0):\n        return {'id': TBD2()}\ndf = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('Count unique values:')\nprint(df.groupby('value')['id'].nunique())"""	df	TBD0	DataFrame
"""import pandas as pd\nimport numpy as np\nsales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'], ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]\nsales_tuples = list(zip(*sales_arrays))\nsales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])\nprint(sales_tuples)\nprint('\\nConstruct a Dataframe using the said MultiIndex levels: ')\nprint(df)\nprint('\\nExtract a single row from the said dataframe:')\nprint(df.loc['sale2', 'city2'])\nprint('\\nExtract a single row from the said dataframe:')\nprint(df.loc['sale2', 'city2'])\nprint('\\nExtract number of rows from the said dataframe:')\nprint(df.loc['sale1'])\nprint('\\nExtract number of rows from the said dataframe:')\nprint(df.loc['sale3'])\nprint('\\nExtract a single value from the said dataframe:')\nprint(df.loc[('sale1', 'city2'), 1])\nprint('\\nExtract a single value from the said dataframe:')\nprint(df.loc[('sale4', 'city1'), 4])"""	"""class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD3():\n\n    def __init__(self):\n        self.container = {'sale1': TBD4(), 'tuple': tuple()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        self.loc = TBD3()\n        pass\ndf = TBD2()\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\nsales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'], ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]\nsales_tuples = list(zip(*sales_arrays))\nsales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])\nprint(sales_tuples)\nprint('\\nConstruct a Dataframe using the said MultiIndex levels: ')\nprint(df)\nprint('\\nExtract a single row from the said dataframe:')\nprint(df.loc[('sale2', 'city2')])\nprint('\\nExtract a single row from the said dataframe:')\nprint(df.loc[('sale2', 'city2')])\nprint('\\nExtract number of rows from the said dataframe:')\nprint(df.loc['sale1'])\nprint('\\nExtract number of rows from the said dataframe:')\nprint(df.loc['sale3'])\nprint('\\nExtract a single value from the said dataframe:')\nprint(df.loc[(('sale1', 'city2'), 1)])\nprint('\\nExtract a single value from the said dataframe:')\nprint(df.loc[(('sale4', 'city1'), 4)])"""	df	TBD2	DataFrame
'import numpy as np\nprint(x)'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint(x)'	x	TBD0	ndarray
"""import pandas as pd\nimport numpy as np\nsales_arrays = [['sale1', 'sale1', 'sale3', 'sale3', 'sale2', 'sale2', 'sale4', 'sale4'], ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]\nsales_tuples = list(zip(*sales_arrays))\nsales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])\nprint(sales_tuples)\nprint('\\nConstruct a Dataframe using the said MultiIndex levels: ')\ndf = pd.DataFrame(np.random.randn(8, 5), index=sales_index)\nprint(df)\nprint('\\nSort on MultiIndex DataFrame:')\ndf1 = df.sort_index()\nprint('\\nSort on Index level=0 of the DataFrame:')\ndf2 = df.sort_index(level=0)\nprint(df2)\nprint('\\nSort on Index level=1 of the DataFrame:')\ndf2 = df.sort_index(level=1)\nprint(df2)\nprint('\\nPass a level name to sort the DataFrame:')\nprint(df3)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\ndf3 = TBD2()\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\nsales_arrays = [['sale1', 'sale1', 'sale3', 'sale3', 'sale2', 'sale2', 'sale4', 'sale4'], ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]\nsales_tuples = list(zip(*sales_arrays))\nsales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])\nprint(sales_tuples)\nprint('\\nConstruct a Dataframe using the said MultiIndex levels: ')\ndf = pd.DataFrame(np.random.randn(8, 5), index=sales_index)\nprint(df)\nprint('\\nSort on MultiIndex DataFrame:')\ndf1 = df.sort_index()\nprint('\\nSort on Index level=0 of the DataFrame:')\ndf2 = df.sort_index(level=0)\nprint(df2)\nprint('\\nSort on Index level=1 of the DataFrame:')\ndf2 = df.sort_index(level=1)\nprint(df2)\nprint('\\nPass a level name to sort the DataFrame:')\nprint(df3)"""	df3	TBD2	DataFrame
"""from collections import Counter\ndef common_chars(str1, str2):\n    d1 = Counter(str1)\n    d2 = Counter(str2)\n    common_dict = d1 & d2\n    if len(common_dict) == 0:\n        return 'No common characters.'\n    common_chars = list(common_dict.elements())\n    common_chars = sorted(common_chars)\n    return ''.join(common_chars)\nstr1 = 'Python'\nprint('Two strings: ' + str1 + ' : ' + str2)\nprint(common_chars(str1, str2))\nstr1 = 'Java'\nstr2 = 'PHP'\nprint('Two strings: ' + str1 + ' : ' + str2)\nprint(common_chars(str1, str2))"""	"""str2 = ''\n__original_start_marker = None\nfrom collections import Counter\n\ndef common_chars(str1, str2):\n    d1 = Counter(str1)\n    d2 = Counter(str2)\n    common_dict = (d1 & d2)\n    if (len(common_dict) == 0):\n        return 'No common characters.'\n    common_chars = list(common_dict.elements())\n    common_chars = sorted(common_chars)\n    return ''.join(common_chars)\nstr1 = 'Python'\nprint(((('Two strings: ' + str1) + ' : ') + str2))\nprint(common_chars(str1, str2))\nstr1 = 'Java'\nstr2 = 'PHP'\nprint(((('Two strings: ' + str1) + ' : ') + str2))\nprint(common_chars(str1, str2))"""	str2	TBD0	str
"""def count_same_pair(nums1, nums2, nums3):\n    result = sum((m == n == o for m, n, o in zip(nums1, nums2, nums3)))\n    return result\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8]\nnums3 = [2, 1, 3, 1, 2, 6, 7, 9]\nprint('Original lists:')\nprint(nums1)\nprint(nums2)\nprint(nums3)\nprint('\\nNumber of same pair of the said three given lists:')\nprint(count_same_pair(nums1, nums2, nums3))"""	"""nums2 = {}\n__original_start_marker = None\n\ndef count_same_pair(nums1, nums2, nums3):\n    result = sum(((m == n == o) for (m, n, o) in zip(nums1, nums2, nums3)))\n    return result\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8]\nnums3 = [2, 1, 3, 1, 2, 6, 7, 9]\nprint('Original lists:')\nprint(nums1)\nprint(nums2)\nprint(nums3)\nprint('\\nNumber of same pair of the said three given lists:')\nprint(count_same_pair(nums1, nums2, nums3))"""	nums2	TBD2	list
"""def strings_to_listOflists(colors):\n    result = [list(word) for word in colors]\n    return result\nprint('Original list of strings:')\nprint(colors)\nprint('\\nConvert the said list of strings into list of lists:')\nprint(strings_to_listOflists(colors))"""	"""colors = {}\n__original_start_marker = None\n\ndef strings_to_listOflists(colors):\n    result = [list(word) for word in colors]\n    return result\nprint('Original list of strings:')\nprint(colors)\nprint('\\nConvert the said list of strings into list of lists:')\nprint(strings_to_listOflists(colors))"""	colors	TBD0	list
"""import pandas as pd\npd.set_option('display.max_rows', None)\nprint('Original DataFrame:')\nprint(df)\nprint('\\nGroup by with multiple aggregations:')\nresult = df.groupby(['school_code', 'class']).agg({'height': ['max', 'mean'], 'weight': ['sum', 'min', 'count']})\nprint(result)"""	"""class TBD6():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD5():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def agg(self, arg0):\n        return TBD6()\n\nclass TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def groupby(self, arg0):\n        return TBD5()\ndf = TBD4()\n__original_start_marker = None\nimport pandas as pd\npd.set_option('display.max_rows', None)\nprint('Original DataFrame:')\nprint(df)\nprint('\\nGroup by with multiple aggregations:')\nresult = df.groupby(['school_code', 'class']).agg({'height': ['max', 'mean'], 'weight': ['sum', 'min', 'count']})\nprint(result)"""	df	TBD4	DataFrame
"""list1 = [[], [], [], 'Red', 'Green', [1, 2], 'Blue', [], []]\nprint('Original list:')\nprint(list1)\nprint('\\nAfter deleting the empty lists from the said lists of lists')\nprint(list2)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nlist2 = TBD1()\n__original_start_marker = None\nlist1 = [[], [], [], 'Red', 'Green', [1, 2], 'Blue', [], []]\nprint('Original list:')\nprint(list1)\nprint('\\nAfter deleting the empty lists from the said lists of lists')\nprint(list2)"""	list2	TBD1	list
'import numpy as np\na = np.random.random((10, 2))\nx, y = np.atleast_2d(a[:, 0], a[:, 1])\nprint(d)'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nd = TBD0()\n__original_start_marker = None\nimport numpy as np\na = np.random.random((10, 2))\n(x, y) = np.atleast_2d(a[(:, 0)], a[(:, 1)])\nprint(d)'	d	TBD0	ndarray
'import numpy as np\nimport sys\nnp.set_printoptions(threshold=sys.maxsize)\nprint(nums)'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnums = TBD0()\n__original_start_marker = None\nimport numpy as np\nimport sys\nnp.set_printoptions(threshold=sys.maxsize)\nprint(nums)'	nums	TBD0	ndarray
"""def remove_duplicate_dictionary(list_color):\n    result = [dict(e) for e in {tuple(d.items()) for d in list_color}]\n    return result\nprint('Original list with duplicate dictionary:')\nprint(list_color)\nprint('\\nAfter removing duplicate dictionary of the said list:')\nprint(remove_duplicate_dictionary(list_color))"""	"""list_color = {}\n__original_start_marker = None\n\ndef remove_duplicate_dictionary(list_color):\n    result = [dict(e) for e in {tuple(d.items()) for d in list_color}]\n    return result\nprint('Original list with duplicate dictionary:')\nprint(list_color)\nprint('\\nAfter removing duplicate dictionary of the said list:')\nprint(remove_duplicate_dictionary(list_color))"""	list_color	TBD0	list
"""def pairwise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = (l1[i], l1[i + 1])\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nprint('Original lists:')\nprint(l1)\nprint('\\nIterate over all pairs of consecutive items of the said list:')\nprint(pairwise(l1))"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __len__(self):\n        return 0\nl1 = TBD1()\n__original_start_marker = None\n\ndef pairwise(l1):\n    temp = {}\n    for i in range((len(l1) - 1)):\n        (current_element, next_element) = (l1[i], l1[(i + 1)])\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\nprint('Original lists:')\nprint(l1)\nprint('\\nIterate over all pairs of consecutive items of the said list:')\nprint(pairwise(l1))"""	l1	TBD1	list
"""import pandas as pd\nnewday = pd.Timestamp('2020-02-07')\nprint('First date:')\nprint(newday)\nprint('\\nThe day name of the said date:')\nprint(newday.day_name())\nprint('\\nAdd 2 days with the said date:')\nprint(newday1.day_name())\nprint('\\nNext business day:')\nnbday = newday + pd.offsets.BDay()\nprint(nbday.day_name())"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def day_name(self):\n        return TBD1()\nnewday1 = TBD0()\n__original_start_marker = None\nimport pandas as pd\nnewday = pd.Timestamp('2020-02-07')\nprint('First date:')\nprint(newday)\nprint('\\nThe day name of the said date:')\nprint(newday.day_name())\nprint('\\nAdd 2 days with the said date:')\nprint(newday1.day_name())\nprint('\\nNext business day:')\nnbday = (newday + pd.offsets.BDay())\nprint(nbday.day_name())"""	newday1	TBD0	Timestamp
'from collections import defaultdict\nclass_rollno = defaultdict(list)\nfor class_name, roll_id in classes:\n    class_rollno[class_name].append(roll_id)\nprint(class_rollno)'	'classes = {}\n__original_start_marker = None\nfrom collections import defaultdict\nclass_rollno = defaultdict(list)\nfor (class_name, roll_id) in classes:\n    class_rollno[class_name].append(roll_id)\nprint(class_rollno)'	classes	TBD0	tuple
"'import pandas as pd\npd.set_option(\'display.max_rows\', None)\ndf = pd.DataFrame({\'ord_no\': [70001, 70009, 70002, 70004, 70007, 70005, 70008, 70010, 70003, 70012, 70011, 70013], \'purch_amt\': [150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6], \'ord_date\': [\'2012-10-05\', \'2012-09-10\', \'2012-10-05\', \'2012-08-17\', \'2012-09-10\', \'2012-07-27\', \'2012-09-10\', \'2012-10-10\', \'2012-10-10\', \'2012-06-27\', \'2012-08-17\', \'2012-04-25\'], \'customer_id\': [3001, 3001, 3005, 3001, 3005, 3001, 3005, 3001, 3005, 3001, 3005, 3005], \'salesman_id\': [5002, 5005, 5001, 5003, 5002, 5001, 5001, 5006, 5003, 5002, 5007, 5001]})\nprint(\'Original Orders DataFrame:\')\nprint(df)\nresult = df_agg[\'purch_amt\'].groupby(level=0, group_keys=False)\nprint(""\\nGroup on \'customer_id\', \'salesman_id\' and then sort sum of purch_amt within the groups:"")\nprint(result.nlargest())'"	"'class TBD10():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD9():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def nlargest(self):\n        return TBD10()\n\nclass TBD7():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def groupby(self, level=None, group_keys=None):\n        return TBD9()\ndf_agg = {\'purch_amt\': TBD7()}\n__original_start_marker = None\nimport pandas as pd\npd.set_option(\'display.max_rows\', None)\ndf = pd.DataFrame({\'ord_no\': [70001, 70009, 70002, 70004, 70007, 70005, 70008, 70010, 70003, 70012, 70011, 70013], \'purch_amt\': [150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6], \'ord_date\': [\'2012-10-05\', \'2012-09-10\', \'2012-10-05\', \'2012-08-17\', \'2012-09-10\', \'2012-07-27\', \'2012-09-10\', \'2012-10-10\', \'2012-10-10\', \'2012-06-27\', \'2012-08-17\', \'2012-04-25\'], \'customer_id\': [3001, 3001, 3005, 3001, 3005, 3001, 3005, 3001, 3005, 3001, 3005, 3005], \'salesman_id\': [5002, 5005, 5001, 5003, 5002, 5001, 5001, 5006, 5003, 5002, 5007, 5001]})\nprint(\'Original Orders DataFrame:\')\nprint(df)\nresult = df_agg[\'purch_amt\'].groupby(level=0, group_keys=False)\nprint(""\\nGroup on \'customer_id\', \'salesman_id\' and then sort sum of purch_amt within the groups:"")\nprint(result.nlargest())'"	df_agg	TBD6	DataFrame
"""def is_sort_list(nums, key=lambda x: x):\n    for i, e in enumerate(nums[1:]):\n        if key(e) < key(nums[i]):\n            return False\n    return True\nprint('Original list:')\nprint(nums1)\nprint('\\nIs the said list is sorted!')\nprint(is_sort_list(nums1))\nnums2 = [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2]\nprint('\\nOriginal list:')\nprint(nums1)\nprint('\\nIs the said list is sorted!')\nprint(is_sort_list(nums2))"""	"""class TBD1():\n\n    def __init__(self):\n        self.container = {}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\nnums1 = TBD1()\n__original_start_marker = None\n\ndef is_sort_list(nums, key=(lambda x: x)):\n    for (i, e) in enumerate(nums[1:]):\n        if (key(e) < key(nums[i])):\n            return False\n    return True\nprint('Original list:')\nprint(nums1)\nprint('\\nIs the said list is sorted!')\nprint(is_sort_list(nums1))\nnums2 = [2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2]\nprint('\\nOriginal list:')\nprint(nums1)\nprint('\\nIs the said list is sorted!')\nprint(is_sort_list(nums2))"""	nums1	TBD1	list
"""def position_max_min(nums):\n    max_result = max(enumerate(nums), key=lambda x: x[1])\n    min_result = min(enumerate(nums), key=lambda x: x[1])\n    return (max_result, min_result)\nnums = [12, 33, 23, 10.11, 67, 89, 45, 66.7, 23, 12, 11, 10.25, 54]\nprint('Original list:')\nprint(nums)\nprint('\\nIndex position and value of the maximum value of the said list:')\nprint(result[0])\nprint('\\nIndex position and value of the minimum value of the said list:')\nprint(result[1])"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = [TBD2(), TBD3()]\n__original_start_marker = None\n\ndef position_max_min(nums):\n    max_result = max(enumerate(nums), key=(lambda x: x[1]))\n    min_result = min(enumerate(nums), key=(lambda x: x[1]))\n    return (max_result, min_result)\nnums = [12, 33, 23, 10.11, 67, 89, 45, 66.7, 23, 12, 11, 10.25, 54]\nprint('Original list:')\nprint(nums)\nprint('\\nIndex position and value of the maximum value of the said list:')\nprint(result[0])\nprint('\\nIndex position and value of the minimum value of the said list:')\nprint(result[1])"""	result	TBD1	tuple
"'string_words = \'United States Declaration of Independence\\nFrom Wikipedia, the free encyclopedia\\nThe United States Declaration of Independence is the statement\\nadopted by the Second Continental Congress meeting at the Pennsylvania State\\nHouse (Independence Hall) in Philadelphia on July 4, 1776, which announced\\nthat the thirteen American colonies, then at war with the Kingdom of Great\\nBritain, regarded themselves as thirteen independent sovereign states, no longer\\nunder British rule. These states would found a new nation – the United States of\\nAmerica. John Adams was a leader in pushing for independence, which was passed\\non July 2 with no opposing vote cast. A committee of five had already drafted the\\nformal declaration, to be ready when Congress voted on independence.\\n\\nJohn Adams persuaded the committee to select Thomas Jefferson to compose the original\\ndraft of the document, which Congress would edit to produce the final version.\\nThe Declaration was ultimately a formal explanation of why Congress had voted on July\\n2 to declare independence from Great Britain, more than a year after the outbreak of\\nthe American Revolutionary War. The next day, Adams wrote to his wife Abigail: ""The\\nSecond Day of July 1776, will be the most memorable Epocha, in the History of America.""\\nBut Independence Day is actually celebrated on July 4, the date that the Declaration of\\nIndependence was approved.\\n\\nAfter ratifying the text on July 4, Congress issued the Declaration of Independence in\\nseveral forms. It was initially published as the printed Dunlap broadside that was widely\\ndistributed and read to the public. The source copy used for this printing has been lost,\\nand may have been a copy in Thomas Jefferson\\\'s hand.[5] Jefferson\\\'s original draft, complete\\nwith changes made by John Adams and Benjamin Franklin, and Jefferson\\\'s notes of changes made\\nby Congress, are preserved at the Library of Congress. The best-known version of the Declaration\\nis a signed copy that is displayed at the National Archives in Washington, D.C., and which is\\npopularly regarded as the official document. This engrossed copy was ordered by Congress on\\nJuly 19 and signed primarily on August 2.\\n\\nThe sources and interpretation of the Declaration have been the subject of much scholarly inquiry.\\nThe Declaration justified the independence of the United States by listing colonial grievances against\\nKing George III, and by asserting certain natural and legal rights, including a right of revolution.\\nHaving served its original purpose in announcing independence, references to the text of the\\nDeclaration were few in the following years. Abraham Lincoln made it the centerpiece of his rhetoric\\n(as in the Gettysburg Address of 1863) and his policies. Since then, it has become a well-known statement\\non human rights, particularly its second sentence:\\n\\nWe hold these truths to be self-evident, that all men are created equal, that they are endowed by their\\nCreator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness.\\n\\nThis has been called ""one of the best-known sentences in the English language"", containing ""the most potent\\nand consequential words in American history"". The passage came to represent a moral standard to which\\nthe United States should strive. This view was notably promoted by Abraham Lincoln, who considered the\\nDeclaration to be the foundation of his political philosophy and argued that it is a statement of principles\\nthrough which the United States Constitution should be interpreted.\\n\\nThe U.S. Declaration of Independence inspired many other similar documents in other countries, the first\\nbeing the 1789 Declaration of Flanders issued during the Brabant Revolution in the Austrian Netherlands\\n(modern-day Belgium). It also served as the primary model for numerous declarations of independence across\\nEurope and Latin America, as well as Africa (Liberia) and Oceania (New Zealand) during the first half of the\\n19th century.\'\nword_freq = [word_list.count(n) for n in word_list]\nprint(\'String:\\n {} \\n\'.format(string_words))\nprint(\'List:\\n {} \\n\'.format(str(word_list)))\nprint(\'Pairs (Words and Frequencies:\\n {}\'.format(str(list(zip(word_list, word_freq)))))'"	"'word_list = {}\n__original_start_marker = None\nstring_words = \'United States Declaration of Independence\\nFrom Wikipedia, the free encyclopedia\\nThe United States Declaration of Independence is the statement\\nadopted by the Second Continental Congress meeting at the Pennsylvania State\\nHouse (Independence Hall) in Philadelphia on July 4, 1776, which announced\\nthat the thirteen American colonies, then at war with the Kingdom of Great\\nBritain, regarded themselves as thirteen independent sovereign states, no longer\\nunder British rule. These states would found a new nation – the United States of\\nAmerica. John Adams was a leader in pushing for independence, which was passed\\non July 2 with no opposing vote cast. A committee of five had already drafted the\\nformal declaration, to be ready when Congress voted on independence.\\n\\nJohn Adams persuaded the committee to select Thomas Jefferson to compose the original\\ndraft of the document, which Congress would edit to produce the final version.\\nThe Declaration was ultimately a formal explanation of why Congress had voted on July\\n2 to declare independence from Great Britain, more than a year after the outbreak of\\nthe American Revolutionary War. The next day, Adams wrote to his wife Abigail: ""The\\nSecond Day of July 1776, will be the most memorable Epocha, in the History of America.""\\nBut Independence Day is actually celebrated on July 4, the date that the Declaration of\\nIndependence was approved.\\n\\nAfter ratifying the text on July 4, Congress issued the Declaration of Independence in\\nseveral forms. It was initially published as the printed Dunlap broadside that was widely\\ndistributed and read to the public. The source copy used for this printing has been lost,\\nand may have been a copy in Thomas Jefferson\\\'s hand.[5] Jefferson\\\'s original draft, complete\\nwith changes made by John Adams and Benjamin Franklin, and Jefferson\\\'s notes of changes made\\nby Congress, are preserved at the Library of Congress. The best-known version of the Declaration\\nis a signed copy that is displayed at the National Archives in Washington, D.C., and which is\\npopularly regarded as the official document. This engrossed copy was ordered by Congress on\\nJuly 19 and signed primarily on August 2.\\n\\nThe sources and interpretation of the Declaration have been the subject of much scholarly inquiry.\\nThe Declaration justified the independence of the United States by listing colonial grievances against\\nKing George III, and by asserting certain natural and legal rights, including a right of revolution.\\nHaving served its original purpose in announcing independence, references to the text of the\\nDeclaration were few in the following years. Abraham Lincoln made it the centerpiece of his rhetoric\\n(as in the Gettysburg Address of 1863) and his policies. Since then, it has become a well-known statement\\non human rights, particularly its second sentence:\\n\\nWe hold these truths to be self-evident, that all men are created equal, that they are endowed by their\\nCreator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness.\\n\\nThis has been called ""one of the best-known sentences in the English language"", containing ""the most potent\\nand consequential words in American history"". The passage came to represent a moral standard to which\\nthe United States should strive. This view was notably promoted by Abraham Lincoln, who considered the\\nDeclaration to be the foundation of his political philosophy and argued that it is a statement of principles\\nthrough which the United States Constitution should be interpreted.\\n\\nThe U.S. Declaration of Independence inspired many other similar documents in other countries, the first\\nbeing the 1789 Declaration of Flanders issued during the Brabant Revolution in the Austrian Netherlands\\n(modern-day Belgium). It also served as the primary model for numerous declarations of independence across\\nEurope and Latin America, as well as Africa (Liberia) and Oceania (New Zealand) during the first half of the\\n19th century.\'\nword_freq = [word_list.count(n) for n in word_list]\nprint(\'String:\\n {} \\n\'.format(string_words))\nprint(\'List:\\n {} \\n\'.format(str(word_list)))\nprint(\'Pairs (Words and Frequencies:\\n {}\'.format(str(list(zip(word_list, word_freq)))))'"	word_list	TBD0	list
"""import numpy as np\nprint('Original arrays:')\nprint(x)\nnew_array = np.transpose(x)\nprint('After reverse the dimensions:')\nprint(new_array)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Original arrays:')\nprint(x)\nnew_array = np.transpose(x)\nprint('After reverse the dimensions:')\nprint(new_array)"""	x	TBD0	ndarray
"""import numpy as np\nimport pandas as pd\nchar_list = list('ABCDEFGHIJKLMNOP')\nnum_dict = dict(zip(char_list, num_arra))\nnum_ser = pd.Series(num_dict)\ndf = num_ser.to_frame().reset_index()\nprint(df.head())"""	"""num_arra = {}\n__original_start_marker = None\nimport numpy as np\nimport pandas as pd\nchar_list = list('ABCDEFGHIJKLMNOP')\nnum_dict = dict(zip(char_list, num_arra))\nnum_ser = pd.Series(num_dict)\ndf = num_ser.to_frame().reset_index()\nprint(df.head())"""	num_arra	TBD0	ndarray
"""import numpy as np\nx = np.array([0, 1, -1])\nprint('Original array: ')\nprint(x)\nr2 = -x\nassert np.array_equal(r1, r2)\nprint('Numerical negative value for all elements of the said array:')\nprint(r1)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nr1 = TBD1()\n__original_start_marker = None\nimport numpy as np\nx = np.array([0, 1, (- 1)])\nprint('Original array: ')\nprint(x)\nr2 = (- x)\nassert np.array_equal(r1, r2)\nprint('Numerical negative value for all elements of the said array:')\nprint(r1)"""	r1	TBD1	ndarray
"""def extract_string(str_list1, l):\n    result = list(filter(lambda e: len(e) == l, str_list1))\n    return result\nprint('Original list:')\nprint(str_list1)\nl = 8\nprint('\\nlength of the string to extract:')\nprint(l)\nprint('\\nAfter extracting strings of specified length from the said list:')\nprint(extract_string(str_list1, l))"""	"""str_list1 = {}\n__original_start_marker = None\n\ndef extract_string(str_list1, l):\n    result = list(filter((lambda e: (len(e) == l)), str_list1))\n    return result\nprint('Original list:')\nprint(str_list1)\nl = 8\nprint('\\nlength of the string to extract:')\nprint(l)\nprint('\\nAfter extracting strings of specified length from the said list:')\nprint(extract_string(str_list1, l))"""	str_list1	TBD0	list
"""def test(str1):\n    result = [int(str1) for str1 in str1.split() if str1.isdigit()]\n    return result\nprint('Original string:', str1)\nprint('Extract numbers from the said string:')\nprint(test(str1))"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def split(self):\n        return {}\nstr1 = TBD0()\n__original_start_marker = None\n\ndef test(str1):\n    result = [int(str1) for str1 in str1.split() if str1.isdigit()]\n    return result\nprint('Original string:', str1)\nprint('Extract numbers from the said string:')\nprint(test(str1))"""	str1	TBD0	str
"""import numpy as np\na = np.array([[4, 6], [2, 1]])\nprint('Original array: ')\nprint(a)\nprint('Sort along the first axis: ')\nx = np.sort(a, axis=0)\nprint(x)\nprint('Sort along the last axis: ')\nprint(y)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\ny = TBD1()\n__original_start_marker = None\nimport numpy as np\na = np.array([[4, 6], [2, 1]])\nprint('Original array: ')\nprint(a)\nprint('Sort along the first axis: ')\nx = np.sort(a, axis=0)\nprint(x)\nprint('Sort along the last axis: ')\nprint(y)"""	y	TBD1	ndarray
"""from array import *\nprint('Original array: ' + str(array_num))\narray_num.extend(array_num)\nprint('Extended array: ' + str(array_num))"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\narray_num = []\n__original_start_marker = None\nfrom array import *\nprint(('Original array: ' + str(array_num)))\narray_num.extend(array_num)\nprint(('Extended array: ' + str(array_num)))"""	array_num	TBD0	array
"""print('My favourite language is ', user_input.upper())\nprint('My favourite language is ', user_input.lower())"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def upper(self):\n        return TBD1()\n\n    def lower(self):\n        return TBD2()\nuser_input = TBD0()\n__original_start_marker = None\nprint('My favourite language is ', user_input.upper())\nprint('My favourite language is ', user_input.lower())"""	user_input	TBD0	str
'import datetime\nprint(now)\nyear = lambda x: x.year\nmonth = lambda x: x.month\nday = lambda x: x.day\nt = lambda x: x.time()\nprint(year(now))\nprint(month(now))\nprint(day(now))\nprint(t(now))'	'class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def year(self, arg0):\n        return TBD1()\n\n    def month(self, arg0):\n        return TBD2()\n\n    def day(self, arg0):\n        return TBD3()\n\n    def time(self):\n        return TBD4()\nnow = TBD0()\n__original_start_marker = None\nimport datetime\nprint(now)\nyear = (lambda x: x.year)\nmonth = (lambda x: x.month)\nday = (lambda x: x.day)\nt = (lambda x: x.time())\nprint(year(now))\nprint(month(now))\nprint(day(now))\nprint(t(now))'	now	TBD0	datetime
"""my_list = ['p', 'q']\nn = 4\nprint(new_list)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnew_list = TBD1()\n__original_start_marker = None\nmy_list = ['p', 'q']\nn = 4\nprint(new_list)"""	new_list	TBD1	list
"""print('Original list:')\nprint(nums)\nnums[6:10], nums[1:3] = (nums[1:3], nums[6:10])\nprint('\\nSwap two sublists of the said list:')\nprint(nums)\nnums[1:3], nums[4:6] = (nums[4:6], nums[1:3])\nprint('\\nSwap two sublists of the said list:')\nprint(nums)"""	"""class TBD6():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD5():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self):\n        self.container = {1: TBD1(), 2: TBD2(), 6: TBD3(), 7: TBD4(), 8: TBD5(), 9: TBD6()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\nnums = TBD0()\n__original_start_marker = None\nprint('Original list:')\nprint(nums)\n(nums[6:10], nums[1:3]) = (nums[1:3], nums[6:10])\nprint('\\nSwap two sublists of the said list:')\nprint(nums)\n(nums[1:3], nums[4:6]) = (nums[4:6], nums[1:3])\nprint('\\nSwap two sublists of the said list:')\nprint(nums)"""	nums	TBD0	list
"""import pandas as pd\nprint('Yearly time perid:', ytp)\nprint('\\nAll the properties of the said period:')\nprint(dir(ytp))"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nytp = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Yearly time perid:', ytp)\nprint('\\nAll the properties of the said period:')\nprint(dir(ytp))"""	ytp	TBD0	Period
"""import numpy as np\nnums2 = np.array([[5, 3, 4], [3, 2, 5]])\nprint('Array1:')\nprint(nums1)\nprint('Array2:')\nprint(nums2)\nprint('\\nMultiply said arrays of same size element-by-element:')\nprint(np.multiply(nums1, nums2))"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnums1 = 0\n__original_start_marker = None\nimport numpy as np\nnums2 = np.array([[5, 3, 4], [3, 2, 5]])\nprint('Array1:')\nprint(nums1)\nprint('Array2:')\nprint(nums2)\nprint('\\nMultiply said arrays of same size element-by-element:')\nprint(np.multiply(nums1, nums2))"""	nums1	TBD1	ndarray
"""def square_num(n):\n    return n * n\nnums = [4, 5, 2, 9]\nprint('Original List: ', nums)\nprint('Square the elements of the said list using map():')\nprint(list(result))"""	"""result = {}\n__original_start_marker = None\n\ndef square_num(n):\n    return (n * n)\nnums = [4, 5, 2, 9]\nprint('Original List: ', nums)\nprint('Square the elements of the said list using map():')\nprint(list(result))"""	result	TBD1	map
"""import pandas as pd\nprint('All Sundays of 2019:')\nprint(result)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('All Sundays of 2019:')\nprint(result)"""	result	TBD0	Series
"""from collections import defaultdict\nclasses = (('V', 1), ('VI', 1), ('V', 2), ('VI', 2), ('VI', 3), ('VII', 1))\nfor class_name, roll_id in classes:\n    class_rollno[class_name].append(roll_id)\nprint(class_rollno)"""	"""class TBD9():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD7():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def append(self, arg0):\n        return TBD9()\n\nclass TBD6():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def append(self, arg0):\n        return TBD6()\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def append(self, arg0):\n        return TBD3()\nclass_rollno = {'V': TBD1(), 'VI': TBD4(), 'VII': TBD7()}\n__original_start_marker = None\nfrom collections import defaultdict\nclasses = (('V', 1), ('VI', 1), ('V', 2), ('VI', 2), ('VI', 3), ('VII', 1))\nfor (class_name, roll_id) in classes:\n    class_rollno[class_name].append(roll_id)\nprint(class_rollno)"""	class_rollno	TBD0	defaultdict
"""import pandas as pd\nimport numpy as np\nsales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'], ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]\nsales_tuples = list(zip(*sales_arrays))\nprint('Create a MultiIndex:')\nsales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])\nprint(sales_tuples)\nprint('\\nConstruct a Dataframe using the said MultiIndex levels: ')\nprint(df)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\ndf = TBD2()\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\nsales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'], ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]\nsales_tuples = list(zip(*sales_arrays))\nprint('Create a MultiIndex:')\nsales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])\nprint(sales_tuples)\nprint('\\nConstruct a Dataframe using the said MultiIndex levels: ')\nprint(df)"""	df	TBD2	DataFrame
"""print('Original list:')\nprint(list1)\nprint('\\nAfter deleting the empty lists from the said lists of lists')\nlist2 = [x for x in list1 if x]\nprint(list2)"""	"""list1 = {}\n__original_start_marker = None\nprint('Original list:')\nprint(list1)\nprint('\\nAfter deleting the empty lists from the said lists of lists')\nlist2 = [x for x in list1 if x]\nprint(list2)"""	list1	TBD0	list
"""def remove_none(nums):\n    result = [x for x in nums if x is not None]\n    return result\nprint('Original list:')\nprint(nums)\nprint('\\nRemove None value from the said list:')\nprint(remove_none(nums))"""	"""nums = {}\n__original_start_marker = None\n\ndef remove_none(nums):\n    result = [x for x in nums if (x is not None)]\n    return result\nprint('Original list:')\nprint(nums)\nprint('\\nRemove None value from the said list:')\nprint(remove_none(nums))"""	nums	TBD0	list
"""import platform as pl\nfor key in os_profile:\n    if hasattr(pl, key):\n        print(key + ': ' + str(getattr(pl, key)()))"""	"""os_profile = {}\n__original_start_marker = None\nimport platform as pl\nfor key in os_profile:\n    if hasattr(pl, key):\n        print(((key + ': ') + str(getattr(pl, key)())))"""	os_profile	TBD0	list
"""import numpy as np\nx = np.array([0, 1, -1])\nprint('Original array: ')\nprint(x)\nr1 = np.negative(x)\nassert np.array_equal(r1, r2)\nprint('Numerical negative value for all elements of the said array:')\nprint(r1)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nr2 = TBD1()\n__original_start_marker = None\nimport numpy as np\nx = np.array([0, 1, (- 1)])\nprint('Original array: ')\nprint(x)\nr1 = np.negative(x)\nassert np.array_equal(r1, r2)\nprint('Numerical negative value for all elements of the said array:')\nprint(r1)"""	r2	TBD1	ndarray
"""import numpy as np\nimport pandas as pd\nchar_list = list('ABCDEFGHIJKLMNOP')\nnum_arra = np.arange(8)\nnum_dict = dict(zip(char_list, num_arra))\ndf = num_ser.to_frame().reset_index()\nprint(df.head())"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def head(self):\n        return TBD3()\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def reset_index(self):\n        return TBD2()\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def to_frame(self):\n        return TBD1()\nnum_ser = TBD0()\n__original_start_marker = None\nimport numpy as np\nimport pandas as pd\nchar_list = list('ABCDEFGHIJKLMNOP')\nnum_arra = np.arange(8)\nnum_dict = dict(zip(char_list, num_arra))\ndf = num_ser.to_frame().reset_index()\nprint(df.head())"""	num_ser	TBD0	Series
"""import pandas as pd\nimport numpy as np\nnp.random.seed(24)\ndf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\ndf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))], axis=1)\ndf.iloc[0, 2] = np.nan\ndf.iloc[3, 3] = np.nan\ndf.iloc[4, 1] = np.nan\ndf.iloc[9, 4] = np.nan\nprint('Original array:')\nprint(df)\nprint('\\nDataframe - table style:')\nth_props = [('font-size', '12px'), ('text-align', 'center'), ('font-weight', 'bold'), ('color', '#6d6d6d'), ('background-color', '#f7ffff')]\ntd_props = [('font-size', '12px')]\ndf.style.set_table_styles(styles)"""	"""styles = {}\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\nnp.random.seed(24)\ndf = pd.DataFrame({'A': np.linspace(1, 10, 10)})\ndf = pd.concat([df, pd.DataFrame(np.random.randn(10, 4), columns=list('BCDE'))], axis=1)\ndf.iloc[(0, 2)] = np.nan\ndf.iloc[(3, 3)] = np.nan\ndf.iloc[(4, 1)] = np.nan\ndf.iloc[(9, 4)] = np.nan\nprint('Original array:')\nprint(df)\nprint('\\nDataframe - table style:')\nth_props = [('font-size', '12px'), ('text-align', 'center'), ('font-weight', 'bold'), ('color', '#6d6d6d'), ('background-color', '#f7ffff')]\ntd_props = [('font-size', '12px')]\ndf.style.set_table_styles(styles)"""	styles	TBD4	list
"""import pandas as pd\nelement_pos = [0, 2, 6, 11, 21]\nprint('Original Series:')\nprint(num_series)\nresult = num_series.take(element_pos)\nprint('\\nExtract items at given positions of the said series:')\nprint(result)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def take(self, arg0):\n        return TBD2()\nnum_series = TBD1()\n__original_start_marker = None\nimport pandas as pd\nelement_pos = [0, 2, 6, 11, 21]\nprint('Original Series:')\nprint(num_series)\nresult = num_series.take(element_pos)\nprint('\\nExtract items at given positions of the said series:')\nprint(result)"""	num_series	TBD1	Series
"""import numpy as np\nx = np.arange(24).reshape((6, 4))\nprint('Original arrays:')\nprint(x)\nprint('After reverse the dimensions:')\nprint(new_array)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnew_array = TBD0()\n__original_start_marker = None\nimport numpy as np\nx = np.arange(24).reshape((6, 4))\nprint('Original arrays:')\nprint(x)\nprint('After reverse the dimensions:')\nprint(new_array)"""	new_array	TBD0	ndarray
"'string_words = \'United States Declaration of Independence\\nFrom Wikipedia, the free encyclopedia\\nThe United States Declaration of Independence is the statement\\nadopted by the Second Continental Congress meeting at the Pennsylvania State\\nHouse (Independence Hall) in Philadelphia on July 4, 1776, which announced\\nthat the thirteen American colonies, then at war with the Kingdom of Great\\nBritain, regarded themselves as thirteen independent sovereign states, no longer\\nunder British rule. These states would found a new nation – the United States of\\nAmerica. John Adams was a leader in pushing for independence, which was passed\\non July 2 with no opposing vote cast. A committee of five had already drafted the\\nformal declaration, to be ready when Congress voted on independence.\\n\\nJohn Adams persuaded the committee to select Thomas Jefferson to compose the original\\ndraft of the document, which Congress would edit to produce the final version.\\nThe Declaration was ultimately a formal explanation of why Congress had voted on July\\n2 to declare independence from Great Britain, more than a year after the outbreak of\\nthe American Revolutionary War. The next day, Adams wrote to his wife Abigail: ""The\\nSecond Day of July 1776, will be the most memorable Epocha, in the History of America.""\\nBut Independence Day is actually celebrated on July 4, the date that the Declaration of\\nIndependence was approved.\\n\\nAfter ratifying the text on July 4, Congress issued the Declaration of Independence in\\nseveral forms. It was initially published as the printed Dunlap broadside that was widely\\ndistributed and read to the public. The source copy used for this printing has been lost,\\nand may have been a copy in Thomas Jefferson\\\'s hand.[5] Jefferson\\\'s original draft, complete\\nwith changes made by John Adams and Benjamin Franklin, and Jefferson\\\'s notes of changes made\\nby Congress, are preserved at the Library of Congress. The best-known version of the Declaration\\nis a signed copy that is displayed at the National Archives in Washington, D.C., and which is\\npopularly regarded as the official document. This engrossed copy was ordered by Congress on\\nJuly 19 and signed primarily on August 2.\\n\\nThe sources and interpretation of the Declaration have been the subject of much scholarly inquiry.\\nThe Declaration justified the independence of the United States by listing colonial grievances against\\nKing George III, and by asserting certain natural and legal rights, including a right of revolution.\\nHaving served its original purpose in announcing independence, references to the text of the\\nDeclaration were few in the following years. Abraham Lincoln made it the centerpiece of his rhetoric\\n(as in the Gettysburg Address of 1863) and his policies. Since then, it has become a well-known statement\\non human rights, particularly its second sentence:\\n\\nWe hold these truths to be self-evident, that all men are created equal, that they are endowed by their\\nCreator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness.\\n\\nThis has been called ""one of the best-known sentences in the English language"", containing ""the most potent\\nand consequential words in American history"". The passage came to represent a moral standard to which\\nthe United States should strive. This view was notably promoted by Abraham Lincoln, who considered the\\nDeclaration to be the foundation of his political philosophy and argued that it is a statement of principles\\nthrough which the United States Constitution should be interpreted.\\n\\nThe U.S. Declaration of Independence inspired many other similar documents in other countries, the first\\nbeing the 1789 Declaration of Flanders issued during the Brabant Revolution in the Austrian Netherlands\\n(modern-day Belgium). It also served as the primary model for numerous declarations of independence across\\nEurope and Latin America, as well as Africa (Liberia) and Oceania (New Zealand) during the first half of the\\n19th century.\'\nword_list = string_words.split()\nprint(\'String:\\n {} \\n\'.format(string_words))\nprint(\'List:\\n {} \\n\'.format(str(word_list)))\nprint(\'Pairs (Words and Frequencies:\\n {}\'.format(str(list(zip(word_list, word_freq)))))'"	"'word_freq = {}\n__original_start_marker = None\nstring_words = \'United States Declaration of Independence\\nFrom Wikipedia, the free encyclopedia\\nThe United States Declaration of Independence is the statement\\nadopted by the Second Continental Congress meeting at the Pennsylvania State\\nHouse (Independence Hall) in Philadelphia on July 4, 1776, which announced\\nthat the thirteen American colonies, then at war with the Kingdom of Great\\nBritain, regarded themselves as thirteen independent sovereign states, no longer\\nunder British rule. These states would found a new nation – the United States of\\nAmerica. John Adams was a leader in pushing for independence, which was passed\\non July 2 with no opposing vote cast. A committee of five had already drafted the\\nformal declaration, to be ready when Congress voted on independence.\\n\\nJohn Adams persuaded the committee to select Thomas Jefferson to compose the original\\ndraft of the document, which Congress would edit to produce the final version.\\nThe Declaration was ultimately a formal explanation of why Congress had voted on July\\n2 to declare independence from Great Britain, more than a year after the outbreak of\\nthe American Revolutionary War. The next day, Adams wrote to his wife Abigail: ""The\\nSecond Day of July 1776, will be the most memorable Epocha, in the History of America.""\\nBut Independence Day is actually celebrated on July 4, the date that the Declaration of\\nIndependence was approved.\\n\\nAfter ratifying the text on July 4, Congress issued the Declaration of Independence in\\nseveral forms. It was initially published as the printed Dunlap broadside that was widely\\ndistributed and read to the public. The source copy used for this printing has been lost,\\nand may have been a copy in Thomas Jefferson\\\'s hand.[5] Jefferson\\\'s original draft, complete\\nwith changes made by John Adams and Benjamin Franklin, and Jefferson\\\'s notes of changes made\\nby Congress, are preserved at the Library of Congress. The best-known version of the Declaration\\nis a signed copy that is displayed at the National Archives in Washington, D.C., and which is\\npopularly regarded as the official document. This engrossed copy was ordered by Congress on\\nJuly 19 and signed primarily on August 2.\\n\\nThe sources and interpretation of the Declaration have been the subject of much scholarly inquiry.\\nThe Declaration justified the independence of the United States by listing colonial grievances against\\nKing George III, and by asserting certain natural and legal rights, including a right of revolution.\\nHaving served its original purpose in announcing independence, references to the text of the\\nDeclaration were few in the following years. Abraham Lincoln made it the centerpiece of his rhetoric\\n(as in the Gettysburg Address of 1863) and his policies. Since then, it has become a well-known statement\\non human rights, particularly its second sentence:\\n\\nWe hold these truths to be self-evident, that all men are created equal, that they are endowed by their\\nCreator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness.\\n\\nThis has been called ""one of the best-known sentences in the English language"", containing ""the most potent\\nand consequential words in American history"". The passage came to represent a moral standard to which\\nthe United States should strive. This view was notably promoted by Abraham Lincoln, who considered the\\nDeclaration to be the foundation of his political philosophy and argued that it is a statement of principles\\nthrough which the United States Constitution should be interpreted.\\n\\nThe U.S. Declaration of Independence inspired many other similar documents in other countries, the first\\nbeing the 1789 Declaration of Flanders issued during the Brabant Revolution in the Austrian Netherlands\\n(modern-day Belgium). It also served as the primary model for numerous declarations of independence across\\nEurope and Latin America, as well as Africa (Liberia) and Oceania (New Zealand) during the first half of the\\n19th century.\'\nword_list = string_words.split()\nprint(\'String:\\n {} \\n\'.format(string_words))\nprint(\'List:\\n {} \\n\'.format(str(word_list)))\nprint(\'Pairs (Words and Frequencies:\\n {}\'.format(str(list(zip(word_list, word_freq)))))'"	word_freq	TBD0	list
"'import pandas as pd\npd.set_option(\'display.max_rows\', None)\ndf = pd.DataFrame({\'ord_no\': [70001, 70009, 70002, 70004, 70007, 70005, 70008, 70010, 70003, 70012, 70011, 70013], \'purch_amt\': [150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6], \'ord_date\': [\'2012-10-05\', \'2012-09-10\', \'2012-10-05\', \'2012-08-17\', \'2012-09-10\', \'2012-07-27\', \'2012-09-10\', \'2012-10-10\', \'2012-10-10\', \'2012-06-27\', \'2012-08-17\', \'2012-04-25\'], \'customer_id\': [3001, 3001, 3005, 3001, 3005, 3001, 3005, 3001, 3005, 3001, 3005, 3005], \'salesman_id\': [5002, 5005, 5001, 5003, 5002, 5001, 5001, 5006, 5003, 5002, 5007, 5001]})\nprint(\'Original Orders DataFrame:\')\nprint(df)\ndf_agg = df.groupby([\'customer_id\', \'salesman_id\']).agg({\'purch_amt\': sum})\nprint(""\\nGroup on \'customer_id\', \'salesman_id\' and then sort sum of purch_amt within the groups:"")\nprint(result.nlargest())'"	"'class TBD12():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD11():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def nlargest(self):\n        return TBD12()\nresult = TBD11()\n\nclass TBD10():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD8():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __lt__(self, other):\n        return TBD10()\n\nclass TBD7():\n\n    def __init__(self):\n        self.container = {\'purch_amt\': sum}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = \'\'\n        ret_str += \'[ \'\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += \', \'\n        ret_str += \' ]\'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print(\'[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]\'.format(type(self).__name__, key, \'TBD\'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print(\'[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]\'.format(type(self).__name__, type(key).__name__, \'TBD\'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n__original_start_marker = None\nimport pandas as pd\npd.set_option(\'display.max_rows\', None)\ndf = pd.DataFrame({\'ord_no\': [70001, 70009, 70002, 70004, 70007, 70005, 70008, 70010, 70003, 70012, 70011, 70013], \'purch_amt\': [150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6], \'ord_date\': [\'2012-10-05\', \'2012-09-10\', \'2012-10-05\', \'2012-08-17\', \'2012-09-10\', \'2012-07-27\', \'2012-09-10\', \'2012-10-10\', \'2012-10-10\', \'2012-06-27\', \'2012-08-17\', \'2012-04-25\'], \'customer_id\': [3001, 3001, 3005, 3001, 3005, 3001, 3005, 3001, 3005, 3001, 3005, 3005], \'salesman_id\': [5002, 5005, 5001, 5003, 5002, 5001, 5001, 5006, 5003, 5002, 5007, 5001]})\nprint(\'Original Orders DataFrame:\')\nprint(df)\ndf_agg = df.groupby([\'customer_id\', \'salesman_id\']).agg(TBD7())\nprint(""\\nGroup on \'customer_id\', \'salesman_id\' and then sort sum of purch_amt within the groups:"")\nprint(result.nlargest())'"	result	TBD11	SeriesGroupBy
"""def is_sort_list(nums, key=lambda x: x):\n    for i, e in enumerate(nums[1:]):\n        if key(e) < key(nums[i]):\n            return False\n    return True\nnums1 = [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]\nprint('Original list:')\nprint(nums1)\nprint('\\nIs the said list is sorted!')\nprint(is_sort_list(nums1))\nprint('\\nOriginal list:')\nprint(nums1)\nprint('\\nIs the said list is sorted!')\nprint(is_sort_list(nums2))"""	"""class TBD1():\n\n    def __init__(self):\n        self.container = {}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\nnums2 = TBD1()\n__original_start_marker = None\n\ndef is_sort_list(nums, key=(lambda x: x)):\n    for (i, e) in enumerate(nums[1:]):\n        if (key(e) < key(nums[i])):\n            return False\n    return True\nnums1 = [1, 2, 4, 6, 8, 10, 12, 14, 16, 17]\nprint('Original list:')\nprint(nums1)\nprint('\\nIs the said list is sorted!')\nprint(is_sort_list(nums1))\nprint('\\nOriginal list:')\nprint(nums1)\nprint('\\nIs the said list is sorted!')\nprint(is_sort_list(nums2))"""	nums2	TBD1	list
"""import numpy as np\nnums = np.random.random((8, 8, 3))\nprint('Original array:')\nprint(nums)\nprint('\\nExtract array of shape (6,6,3) from the said array:')\nprint(new_nums)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnew_nums = TBD0()\n__original_start_marker = None\nimport numpy as np\nnums = np.random.random((8, 8, 3))\nprint('Original array:')\nprint(nums)\nprint('\\nExtract array of shape (6,6,3) from the said array:')\nprint(new_nums)"""	new_nums	TBD0	ndarray
"""import pandas as pd\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\nprint('Original DataFrame:')\nprint(df)\ndict_data_list = list()\nfor gg, dd in df.groupby(['school_code', 'class']):\n    group = dict(zip(['school_code', 'class'], gg))\n    ocolumns_list = list()\n    for _, data in dd.iterrows():\n        data = data.drop(labels=['school_code', 'class'])\n        ocolumns_list.append(data.to_dict())\n    group['other_columns'] = ocolumns_list\n    dict_data_list.append(group)\nprint(dict_data_list)"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def groupby(self, arg0):\n        return {}\ndf = TBD3()\n__original_start_marker = None\nimport pandas as pd\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\nprint('Original DataFrame:')\nprint(df)\ndict_data_list = list()\nfor (gg, dd) in df.groupby(['school_code', 'class']):\n    group = dict(zip(['school_code', 'class'], gg))\n    ocolumns_list = list()\n    for (_, data) in dd.iterrows():\n        data = data.drop(labels=['school_code', 'class'])\n        ocolumns_list.append(data.to_dict())\n    group['other_columns'] = ocolumns_list\n    dict_data_list.append(group)\nprint(dict_data_list)"""	df	TBD3	DataFrame
"""def extract_string(str_list1, l):\n    result = list(filter(lambda e: len(e) == l, str_list1))\n    return result\nstr_list1 = ['Python', 'list', 'exercises', 'practice', 'solution']\nprint('Original list:')\nprint(str_list1)\nprint('\\nlength of the string to extract:')\nprint(l)\nprint('\\nAfter extracting strings of specified length from the said list:')\nprint(extract_string(str_list1, l))"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nl = TBD1()\n__original_start_marker = None\n\ndef extract_string(str_list1, l):\n    result = list(filter((lambda e: (len(e) == l)), str_list1))\n    return result\nstr_list1 = ['Python', 'list', 'exercises', 'practice', 'solution']\nprint('Original list:')\nprint(str_list1)\nprint('\\nlength of the string to extract:')\nprint(l)\nprint('\\nAfter extracting strings of specified length from the said list:')\nprint(extract_string(str_list1, l))"""	l	TBD1	int
'def test(a):\n    def add(b):\n        nonlocal a\n        a += 1\n        return a + b\n    return add\nprint(func(4))'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\ndef func(arg0):\n    return TBD0()\n__original_start_marker = None\n\ndef test(a):\n\n    def add(b):\n        nonlocal a\n        a += 1\n        return (a + b)\n    return add\nprint(func(4))'	func	TBD0	function
"""import pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nLength of the string in a column:')\ndf['company_code_length'] = df['company_code'].apply(len)\nprint(df)"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def apply(self, arg0):\n        return TBD3()\ndf = {'company_code': TBD1()}\n__original_start_marker = None\nimport pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nLength of the string in a column:')\ndf['company_code_length'] = df['company_code'].apply(len)\nprint(df)"""	df	TBD0	DataFrame
'from itertools import zip_longest, chain, tee\ndef replace2copy(lst):\n    lst1, lst2 = tee(iter(lst), 2)\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))\nprint(replace2copy(n))'	"""class TBD0():\n\n    def __init__(self):\n        self.container = {}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\nn = TBD0()\n__original_start_marker = None\nfrom itertools import zip_longest, chain, tee\n\ndef replace2copy(lst):\n    (lst1, lst2) = tee(iter(lst), 2)\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))\nprint(replace2copy(n))"""	n	TBD0	list
"""def square_num(n):\n    return n * n\nprint('Original List: ', nums)\nresult = map(square_num, nums)\nprint('Square the elements of the said list using map():')\nprint(list(result))"""	"""nums = {}\n__original_start_marker = None\n\ndef square_num(n):\n    return (n * n)\nprint('Original List: ', nums)\nresult = map(square_num, nums)\nprint('Square the elements of the said list using map():')\nprint(list(result))"""	nums	TBD0	list
"""import numpy as np\nnums1 = np.array([[2, 5, 2], [1, 5, 5]])\nprint('Array1:')\nprint(nums1)\nprint('Array2:')\nprint(nums2)\nprint('\\nMultiply said arrays of same size element-by-element:')\nprint(np.multiply(nums1, nums2))"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnums2 = 0\n__original_start_marker = None\nimport numpy as np\nnums1 = np.array([[2, 5, 2], [1, 5, 5]])\nprint('Array1:')\nprint(nums1)\nprint('Array2:')\nprint(nums2)\nprint('\\nMultiply said arrays of same size element-by-element:')\nprint(np.multiply(nums1, nums2))"""	nums2	TBD1	ndarray
"""my_list = ['p', 'q']\nnew_list = ['{}{}'.format(x, y) for y in range(1, n + 1) for x in my_list]\nprint(new_list)"""	"""n = 0\n__original_start_marker = None\nmy_list = ['p', 'q']\nnew_list = ['{}{}'.format(x, y) for y in range(1, (n + 1)) for x in my_list]\nprint(new_list)"""	n	TBD1	int
'import datetime\nnow = datetime.datetime.now()\nprint(now)\nyear = lambda x: x.year\nday = lambda x: x.day\nt = lambda x: x.time()\nprint(year(now))\nprint(month(now))\nprint(day(now))\nprint(t(now))'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\ndef month(arg0):\n    return TBD0()\n__original_start_marker = None\nimport datetime\nnow = datetime.datetime.now()\nprint(now)\nyear = (lambda x: x.year)\nday = (lambda x: x.day)\nt = (lambda x: x.time())\nprint(year(now))\nprint(month(now))\nprint(day(now))\nprint(t(now))'	month	TBD0	function
"""def mergeSort(nlist):\n    print('Splitting ', nlist)\n    if len(nlist) > 1:\n        mid = len(nlist) // 2\n        lefthalf = nlist[:mid]\n        righthalf = nlist[mid:]\n        mergeSort(lefthalf)\n        mergeSort(righthalf)\n        i = j = k = 0\n        while i < len(lefthalf) and j < len(righthalf):\n            if lefthalf[i] < righthalf[j]:\n                nlist[k] = lefthalf[i]\n                i = i + 1\n            else:\n                nlist[k] = righthalf[j]\n                j = j + 1\n            k = k + 1\n        while i < len(lefthalf):\n            nlist[k] = lefthalf[i]\n            i = i + 1\n            k = k + 1\n        while j < len(righthalf):\n            nlist[k] = righthalf[j]\n            j = j + 1\n            k = k + 1\n    print('Merging ', nlist)\nmergeSort(nlist)\nprint(nlist)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __len__(self):\n        return 0\nnlist = TBD0()\n__original_start_marker = None\n\ndef mergeSort(nlist):\n    print('Splitting ', nlist)\n    if (len(nlist) > 1):\n        mid = (len(nlist) // 2)\n        lefthalf = nlist[:mid]\n        righthalf = nlist[mid:]\n        mergeSort(lefthalf)\n        mergeSort(righthalf)\n        i = j = k = 0\n        while ((i < len(lefthalf)) and (j < len(righthalf))):\n            if (lefthalf[i] < righthalf[j]):\n                nlist[k] = lefthalf[i]\n                i = (i + 1)\n            else:\n                nlist[k] = righthalf[j]\n                j = (j + 1)\n            k = (k + 1)\n        while (i < len(lefthalf)):\n            nlist[k] = lefthalf[i]\n            i = (i + 1)\n            k = (k + 1)\n        while (j < len(righthalf)):\n            nlist[k] = righthalf[j]\n            j = (j + 1)\n            k = (k + 1)\n    print('Merging ', nlist)\nmergeSort(nlist)\nprint(nlist)"""	nlist	TBD0	list
"""import numpy as np\narray1 = np.array([0, 10, 20, 40, 60, 80])\nprint('Array1: ', array1)\nprint('Array2: ', array2)\nprint('Unique sorted array of values that are in either of the two input arrays:')\nprint(np.union1d(array1, array2))"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\narray2 = 0\n__original_start_marker = None\nimport numpy as np\narray1 = np.array([0, 10, 20, 40, 60, 80])\nprint('Array1: ', array1)\nprint('Array2: ', array2)\nprint('Unique sorted array of values that are in either of the two input arrays:')\nprint(np.union1d(array1, array2))"""	array2	TBD1	list
"""def remove_chars(str1, unwanted_chars):\n    for i in unwanted_chars:\n        str1 = str1.replace(i, '')\n    return str1\nstr1 = 'Pyth*^on Exercis^es'\nunwanted_chars = ['#', '*', '!', '^', '%']\nprint('Original String : ' + str1)\nprint('After removing unwanted characters:')\nprint(remove_chars(str1, unwanted_chars))\nprint('\\nOriginal String : ' + str2)\nprint('After removing unwanted characters:')\nprint(remove_chars(str2, unwanted_chars))"""	"""str2 = ''\n__original_start_marker = None\n\ndef remove_chars(str1, unwanted_chars):\n    for i in unwanted_chars:\n        str1 = str1.replace(i, '')\n    return str1\nstr1 = 'Pyth*^on Exercis^es'\nunwanted_chars = ['#', '*', '!', '^', '%']\nprint(('Original String : ' + str1))\nprint('After removing unwanted characters:')\nprint(remove_chars(str1, unwanted_chars))\nprint(('\\nOriginal String : ' + str2))\nprint('After removing unwanted characters:')\nprint(remove_chars(str2, unwanted_chars))"""	str2	TBD1	str
"""def count_integer(list1):\n    ert = list(map(lambda i: isinstance(i, float), list1))\n    result = len([e for e in ert if e])\n    return result\nprint('Original list:')\nprint(list1)\nprint('\\nNumber of floats in the said mixed list:')\nprint(count_integer(list1))"""	"""list1 = {}\n__original_start_marker = None\n\ndef count_integer(list1):\n    ert = list(map((lambda i: isinstance(i, float)), list1))\n    result = len([e for e in ert if e])\n    return result\nprint('Original list:')\nprint(list1)\nprint('\\nNumber of floats in the said mixed list:')\nprint(count_integer(list1))"""	list1	TBD0	list
"""bases_num = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nprint('Base numbers abd index: ')\nprint(bases_num)\nprint(index)\nresult = list(map(pow, bases_num, index))\nprint('\\nPower of said number in bases raised to the corresponding number in the index:')\nprint(result)"""	"""index = {}\n__original_start_marker = None\nbases_num = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nprint('Base numbers abd index: ')\nprint(bases_num)\nprint(index)\nresult = list(map(pow, bases_num, index))\nprint('\\nPower of said number in bases raised to the corresponding number in the index:')\nprint(result)"""	index	TBD1	list
"""print('\\n'.join([str(lst) for lst in colors]))"""	"""colors = {}\n__original_start_marker = None\nprint('\\n'.join([str(lst) for lst in colors]))"""	colors	TBD0	list
"""import pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\ndf = pd.DataFrame({'ord_no': [70001, np.nan, 70002, 70004, np.nan, 70005, np.nan, 70010, 70003, 70012, np.nan, 70013], 'purch_amt': [150.5, np.nan, 65.26, 110.5, 948.5, np.nan, 5760, 1983.43, np.nan, 250.45, 75.29, 3045.6], 'sale_amt': [10.5, 20.65, np.nan, 11.5, 98.5, np.nan, 57, 19.43, np.nan, 25.45, 75.29, 35.6], 'ord_date': ['2012-10-05', '2012-09-10', np.nan, '2012-08-17', '2012-09-10', '2012-07-27', '2012-09-10', '2012-10-10', '2012-10-10', '2012-06-27', '2012-08-17', '2012-04-25'], 'customer_id': [3002, 3001, 3001, 3003, 3002, 3001, 3001, 3004, 3003, 3002, 3001, 3001], 'salesman_id': [5002, 5003, 5001, np.nan, 5002, 5001, 5001, np.nan, 5003, 5002, 5003, np.nan]})\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nReplace the missing values with the most frequent values present in each column:')\nprint(result)"""	"""class TBD7():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD7()\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\ndf = pd.DataFrame({'ord_no': [70001, np.nan, 70002, 70004, np.nan, 70005, np.nan, 70010, 70003, 70012, np.nan, 70013], 'purch_amt': [150.5, np.nan, 65.26, 110.5, 948.5, np.nan, 5760, 1983.43, np.nan, 250.45, 75.29, 3045.6], 'sale_amt': [10.5, 20.65, np.nan, 11.5, 98.5, np.nan, 57, 19.43, np.nan, 25.45, 75.29, 35.6], 'ord_date': ['2012-10-05', '2012-09-10', np.nan, '2012-08-17', '2012-09-10', '2012-07-27', '2012-09-10', '2012-10-10', '2012-10-10', '2012-06-27', '2012-08-17', '2012-04-25'], 'customer_id': [3002, 3001, 3001, 3003, 3002, 3001, 3001, 3004, 3003, 3002, 3001, 3001], 'salesman_id': [5002, 5003, 5001, np.nan, 5002, 5001, 5001, np.nan, 5003, 5002, 5003, np.nan]})\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nReplace the missing values with the most frequent values present in each column:')\nprint(result)"""	result	TBD7	DataFrame
"""import pandas as pd\nprint('Time series with frequency 3h10min:')\nprint(dateset1)\ndateset2 = pd.date_range('2029-01-01 00:00:00', periods=20, freq='1D10min20U')\nprint('\\nTime series with frequency 1 day 10 minutes and 20 microseconds:')\nprint(dateset2)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\ndateset1 = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Time series with frequency 3h10min:')\nprint(dateset1)\ndateset2 = pd.date_range('2029-01-01 00:00:00', periods=20, freq='1D10min20U')\nprint('\\nTime series with frequency 1 day 10 minutes and 20 microseconds:')\nprint(dateset2)"""	dateset1	TBD0	DatetimeIndex
"""import numpy as np\nprint('\\nOriginal arrays:')\ny = x * 3\nprint('Array-1')\nprint(x)\nprint('Array-2')\nprint(y)\nnew_array = np.hstack((x, y))\nprint('\\nStack arrays in sequence horizontally:')\nprint(new_array)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = 0\n__original_start_marker = None\nimport numpy as np\nprint('\\nOriginal arrays:')\ny = (x * 3)\nprint('Array-1')\nprint(x)\nprint('Array-2')\nprint(y)\nnew_array = np.hstack((x, y))\nprint('\\nStack arrays in sequence horizontally:')\nprint(new_array)"""	x	TBD0	ndarray
'import numpy as np\nx = np.random.uniform(1, 12, 5)\nv = 4\nprint(n)'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nn = TBD0()\n__original_start_marker = None\nimport numpy as np\nx = np.random.uniform(1, 12, 5)\nv = 4\nprint(n)'	n	TBD0	float64
"""import numpy as np\nimport numpy as np\nprint('Original array:')\nprint(x)\nprint('Reverse array:')\nx = x[::-1]\nprint(x)"""	"""class TBD0():\n\n    def __init__(self):\n        self.container = {}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\nx = TBD0()\n__original_start_marker = None\nimport numpy as np\nimport numpy as np\nprint('Original array:')\nprint(x)\nprint('Reverse array:')\nx = x[::(- 1)]\nprint(x)"""	x	TBD0	ndarray
"""import itertools\nfor combo in itertools.product(*[d[k] for k in sorted(d.keys())]):\n    print(''.join(combo))"""	"""d = {}\n__original_start_marker = None\nimport itertools\nfor combo in itertools.product(*[d[k] for k in sorted(d.keys())]):\n    print(''.join(combo))"""	d	TBD0	dict
"""import pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nInterpolate the missing values using the Linear Interpolation method (purch_amt):')\ndf['purch_amt'].interpolate(method='linear', direction='forward', inplace=True)\nprint(df)"""	"""class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def interpolate(self, method=None, direction=None, inplace=None):\n        return TBD3()\ndf = {'purch_amt': TBD1()}\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nInterpolate the missing values using the Linear Interpolation method (purch_amt):')\ndf['purch_amt'].interpolate(method='linear', direction='forward', inplace=True)\nprint(df)"""	df	TBD0	DataFrame
"""import numpy as np\nx = np.array([1.0, 2.0, 0.2, 0.3])\nprint('Original array: ')\nprint(x)\nr2 = 1 / x\nassert np.array_equal(r1, r2)\nprint('Reciprocal for all elements of the said array:')\nprint(r1)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nr1 = TBD1()\n__original_start_marker = None\nimport numpy as np\nx = np.array([1.0, 2.0, 0.2, 0.3])\nprint('Original array: ')\nprint(x)\nr2 = (1 / x)\nassert np.array_equal(r1, r2)\nprint('Reciprocal for all elements of the said array:')\nprint(r1)"""	r1	TBD1	ndarray
"""import pandas as pd\nseries1 = pd.Series(['Php', 'Python', 'Java', 'C#'])\nprint('Original Series:')\nprint(series1)\nprint('\\nNumber of characters in each word in the said series:')\nprint(result)"""	"""class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD1()\n__original_start_marker = None\nimport pandas as pd\nseries1 = pd.Series(['Php', 'Python', 'Java', 'C#'])\nprint('Original Series:')\nprint(series1)\nprint('\\nNumber of characters in each word in the said series:')\nprint(result)"""	result	TBD1	Series
"""def condition_match(x):\n    return x % 2 == 0\ndef remove_items_con(data, N):\n    ctr = 1\n    result = []\n    for x in data:\n        if ctr > N or not condition_match(x):\n            result.append(x)\n        else:\n            ctr = ctr + 1\n    return result\nN = 4\nprint('Original list:')\nprint(nums)\nprint('\\nRemove first 4 even numbers from the said list:')\nprint(remove_items_con(nums, N))"""	"""nums = {}\n__original_start_marker = None\n\ndef condition_match(x):\n    return ((x % 2) == 0)\n\ndef remove_items_con(data, N):\n    ctr = 1\n    result = {}\n    for x in data:\n        if ((ctr > N) or (not condition_match(x))):\n            result.append(x)\n        else:\n            ctr = (ctr + 1)\n    return result\nN = 4\nprint('Original list:')\nprint(nums)\nprint('\\nRemove first 4 even numbers from the said list:')\nprint(remove_items_con(nums, N))"""	nums	TBD1	list
"""def find_substring(str1, sub_str):\n    result = list(filter(lambda x: sub_str in x, str1))\n    return result\nprint('Original list:')\nprint(colors)\nsub_str = 'ack'\nprint('\\nSubstring to search:')\nprint(sub_str)\nprint('Elements of the said list that contain specific substring:')\nprint(find_substring(colors, sub_str))\nsub_str = 'abc'\nprint('\\nSubstring to search:')\nprint(sub_str)\nprint('Elements of the said list that contain specific substring:')\nprint(find_substring(colors, sub_str))"""	"""colors = {}\n__original_start_marker = None\n\ndef find_substring(str1, sub_str):\n    result = list(filter((lambda x: (sub_str in x)), str1))\n    return result\nprint('Original list:')\nprint(colors)\nsub_str = 'ack'\nprint('\\nSubstring to search:')\nprint(sub_str)\nprint('Elements of the said list that contain specific substring:')\nprint(find_substring(colors, sub_str))\nsub_str = 'abc'\nprint('\\nSubstring to search:')\nprint(sub_str)\nprint('Elements of the said list that contain specific substring:')\nprint(find_substring(colors, sub_str))"""	colors	TBD0	list
"""def count_same_pair(nums1, nums2, nums3):\n    result = sum((m == n == o for m, n, o in zip(nums1, nums2, nums3)))\n    return result\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8]\nnums2 = [2, 2, 3, 1, 2, 6, 7, 9]\nprint('Original lists:')\nprint(nums1)\nprint(nums2)\nprint(nums3)\nprint('\\nNumber of same pair of the said three given lists:')\nprint(count_same_pair(nums1, nums2, nums3))"""	"""nums3 = {}\n__original_start_marker = None\n\ndef count_same_pair(nums1, nums2, nums3):\n    result = sum(((m == n == o) for (m, n, o) in zip(nums1, nums2, nums3)))\n    return result\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8]\nnums2 = [2, 2, 3, 1, 2, 6, 7, 9]\nprint('Original lists:')\nprint(nums1)\nprint(nums2)\nprint(nums3)\nprint('\\nNumber of same pair of the said three given lists:')\nprint(count_same_pair(nums1, nums2, nums3))"""	nums3	TBD2	list
"""from collections import Counter\ndef common_chars(str1, str2):\n    d1 = Counter(str1)\n    d2 = Counter(str2)\n    common_dict = d1 & d2\n    if len(common_dict) == 0:\n        return 'No common characters.'\n    common_chars = list(common_dict.elements())\n    common_chars = sorted(common_chars)\n    return ''.join(common_chars)\nstr2 = 'PHP'\nprint('Two strings: ' + str1 + ' : ' + str2)\nprint(common_chars(str1, str2))\nstr1 = 'Java'\nstr2 = 'PHP'\nprint('Two strings: ' + str1 + ' : ' + str2)\nprint(common_chars(str1, str2))"""	"""str1 = ''\n__original_start_marker = None\nfrom collections import Counter\n\ndef common_chars(str1, str2):\n    d1 = Counter(str1)\n    d2 = Counter(str2)\n    common_dict = (d1 & d2)\n    if (len(common_dict) == 0):\n        return 'No common characters.'\n    common_chars = list(common_dict.elements())\n    common_chars = sorted(common_chars)\n    return ''.join(common_chars)\nstr2 = 'PHP'\nprint(((('Two strings: ' + str1) + ' : ') + str2))\nprint(common_chars(str1, str2))\nstr1 = 'Java'\nstr2 = 'PHP'\nprint(((('Two strings: ' + str1) + ' : ') + str2))\nprint(common_chars(str1, str2))"""	str1	TBD0	str
"""import pandas as pd\nimport numpy as np\nsales_arrays = [['sale1', 'sale1', 'sale3', 'sale3', 'sale2', 'sale2', 'sale4', 'sale4'], ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]\nsales_tuples = list(zip(*sales_arrays))\nsales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])\nprint(sales_tuples)\nprint('\\nConstruct a Dataframe using the said MultiIndex levels: ')\ndf = pd.DataFrame(np.random.randn(8, 5), index=sales_index)\nprint(df)\nprint('\\nSort on MultiIndex DataFrame:')\ndf1 = df.sort_index()\nprint('\\nSort on Index level=0 of the DataFrame:')\nprint(df2)\nprint('\\nSort on Index level=1 of the DataFrame:')\ndf2 = df.sort_index(level=1)\nprint(df2)\nprint('\\nPass a level name to sort the DataFrame:')\ndf3 = df.sort_index(level='city')\nprint(df3)"""	"""class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\ndf2 = TBD2()\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\nsales_arrays = [['sale1', 'sale1', 'sale3', 'sale3', 'sale2', 'sale2', 'sale4', 'sale4'], ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]\nsales_tuples = list(zip(*sales_arrays))\nsales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])\nprint(sales_tuples)\nprint('\\nConstruct a Dataframe using the said MultiIndex levels: ')\ndf = pd.DataFrame(np.random.randn(8, 5), index=sales_index)\nprint(df)\nprint('\\nSort on MultiIndex DataFrame:')\ndf1 = df.sort_index()\nprint('\\nSort on Index level=0 of the DataFrame:')\nprint(df2)\nprint('\\nSort on Index level=1 of the DataFrame:')\ndf2 = df.sort_index(level=1)\nprint(df2)\nprint('\\nPass a level name to sort the DataFrame:')\ndf3 = df.sort_index(level='city')\nprint(df3)"""	df2	TBD2	DataFrame
"""def concatenate_lists(l1, l2, l3):\n    return [i + j + k for i, j, k in zip(l1, l2, l3)]\nl1 = ['0', '1', '2', '3', '4']\nl3 = ['100', '200', '300', '400', '500']\nprint('Original lists:')\nprint(l1)\nprint(l2)\nprint(l3)\nprint('\\nConcatenate element-wise three said lists:')\nprint(concatenate_lists(l1, l2, l3))"""	"""l2 = {}\n__original_start_marker = None\n\ndef concatenate_lists(l1, l2, l3):\n    return [((i + j) + k) for (i, j, k) in zip(l1, l2, l3)]\nl1 = ['0', '1', '2', '3', '4']\nl3 = ['100', '200', '300', '400', '500']\nprint('Original lists:')\nprint(l1)\nprint(l2)\nprint(l3)\nprint('\\nConcatenate element-wise three said lists:')\nprint(concatenate_lists(l1, l2, l3))"""	l2	TBD2	list
"""import numpy as np\nprint('Original array elements:')\nprint(x)\nprint('Print array values with precision 3:')\nnp.set_printoptions(suppress=True)\nprint(x)"""	"""class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Original array elements:')\nprint(x)\nprint('Print array values with precision 3:')\nnp.set_printoptions(suppress=True)\nprint(x)"""	x	TBD0	ndarray
"""import itertools as it\nmums1 = [1, 2, 3, 4]\nmums3 = [9, 10, 11, 12]\nmums4 = [13, 14, 15, 16]\nprint('Original lists:')\nprint(mums1)\nprint(mums2)\nprint(mums3)\nprint(mums4)\nprint('\\nSum of the specified range:')\nfor i in it.product([tuple(mums1)], it.permutations(mums2), it.permutations(mums3), it.permutations(mums4)):\n    print(i)"""	"""mums2 = {}\n__original_start_marker = None\nimport itertools as it\nmums1 = [1, 2, 3, 4]\nmums3 = [9, 10, 11, 12]\nmums4 = [13, 14, 15, 16]\nprint('Original lists:')\nprint(mums1)\nprint(mums2)\nprint(mums3)\nprint(mums4)\nprint('\\nSum of the specified range:')\nfor i in it.product([tuple(mums1)], it.permutations(mums2), it.permutations(mums3), it.permutations(mums4)):\n    print(i)"""	mums2	TBD4	list
"""def sort_on_specific_item(lst, n):\n    result = sorted(lst, key=lambda x: x[n])\n    return result\nprint('Original list of tuples:')\nprint(items)\nprint('\\nSort on 1st element of the tuple of the said list:')\nn = 0\nprint(sort_on_specific_item(items, n))\nprint('\\nSort on 2nd element of the tuple of the said list:')\nn = 1\nprint(sort_on_specific_item(items, n))\nprint('\\nSort on 3rd element of the tuple of the said list:')\nn = 2\nprint(sort_on_specific_item(items, n))"""	"""items = {}\n__original_start_marker = None\n\ndef sort_on_specific_item(lst, n):\n    result = sorted(lst, key=(lambda x: x[n]))\n    return result\nprint('Original list of tuples:')\nprint(items)\nprint('\\nSort on 1st element of the tuple of the said list:')\nn = 0\nprint(sort_on_specific_item(items, n))\nprint('\\nSort on 2nd element of the tuple of the said list:')\nn = 1\nprint(sort_on_specific_item(items, n))\nprint('\\nSort on 3rd element of the tuple of the said list:')\nn = 2\nprint(sort_on_specific_item(items, n))"""	items	TBD0	list
