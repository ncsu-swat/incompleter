original_snippet	mocked_snippet	var	tbd	type
import pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nTotal number of missing values of the said DataFrame:')\nresult = df.isna().sum().sum()\nprint(result)	class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def sum(self):\n        return TBD3()\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def sum(self):\n        return TBD2()\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def isna(self):\n        return TBD1()\ndf = TBD0()\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nTotal number of missing values of the said DataFrame:')\nresult = df.isna().sum().sum()\nprint(result)	df	TBD0	DataFrame
import numpy as np\nnums = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nprint('Original array:')\nprint(nums)\np = 2\nnew_nums[::p + 1] = nums\nprint('\\nNew array:')\nprint(new_nums)	class TBD1():\n\n    def __init__(self):\n        self.container = {}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\nnew_nums = TBD1()\n__original_start_marker = None\nimport numpy as np\nnums = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nprint('Original array:')\nprint(nums)\np = 2\nnew_nums[::(p + 1)] = nums\nprint('\\nNew array:')\nprint(new_nums)	new_nums	TBD1	ndarray
'import numpy as np\nx = np.array([2, 3])\nprint(x.size)\nprint(y.size)'	'class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        self.size = TBD2()\n        pass\ny = TBD1()\n__original_start_marker = None\nimport numpy as np\nx = np.array([2, 3])\nprint(x.size)\nprint(y.size)'	y	TBD1	ndarray
import pandas as pd\nfrom pandas.tseries.offsets import *\nimport datetime\nfrom datetime import datetime, date\ndt = datetime(2020, 1, 4)\nprint('Specified date:')\nprint(dt)\nprint('\\nOne business day from the said date:')\nobday = dt + BusinessDay()\nprint(obday)\nprint('\\nTwo business days from the said date:')\ntbday = dt + 2 * BusinessDay()\nprint(tbday)\nprint('\\nThree business days from the said date:')\nthbday = dt + 3 * BusinessDay()\nprint(thbday)\nprint('\\nNext business month end from the said date:')\nprint(nbday)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnbday = TBD0()\n__original_start_marker = None\nimport pandas as pd\nfrom pandas.tseries.offsets import *\nimport datetime\nfrom datetime import datetime, date\ndt = datetime(2020, 1, 4)\nprint('Specified date:')\nprint(dt)\nprint('\\nOne business day from the said date:')\nobday = (dt + BusinessDay())\nprint(obday)\nprint('\\nTwo business days from the said date:')\ntbday = (dt + (2 * BusinessDay()))\nprint(tbday)\nprint('\\nThree business days from the said date:')\nthbday = (dt + (3 * BusinessDay()))\nprint(thbday)\nprint('\\nNext business month end from the said date:')\nprint(nbday)	nbday	TBD0	Timestamp
'import numpy as np\nprint(x)\nx = np.round([0.28, 0.5, 0.64], decimals=1)\nprint(x)\nx = np.round([0.5, 1.5, 2.5, 3.5, 4.5])\nprint(x)'	'class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = TBD2()\n__original_start_marker = None\nimport numpy as np\nprint(x)\nx = np.round([0.28, 0.5, 0.64], decimals=1)\nprint(x)\nx = np.round([0.5, 1.5, 2.5, 3.5, 4.5])\nprint(x)'	x	TBD2	ndarray
import numpy as np\nq = np.array([10, 11, 12])\nprint('Original arrays:')\nprint('Array-1')\nprint(p)\nprint('Array-2')\nprint(q)\nprint('\\nNew Array:')\nnew_array1 = p + q\nprint(new_array1)	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\np = 0\n__original_start_marker = None\nimport numpy as np\nq = np.array([10, 11, 12])\nprint('Original arrays:')\nprint('Array-1')\nprint(p)\nprint('Array-2')\nprint(q)\nprint('\\nNew Array:')\nnew_array1 = (p + q)\nprint(new_array1)	p	TBD1	ndarray
import numpy as np\na = np.array([[4, 12, -16], [12, 37, -53], [-16, -53, 98]], dtype=np.int32)\nprint('Original array:')\nprint(a)\nprint('Lower-trianglular L in the Cholesky decomposition of the said array:')\nprint(L)	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nL = TBD1()\n__original_start_marker = None\nimport numpy as np\na = np.array([[4, 12, (- 16)], [12, 37, (- 53)], [(- 16), (- 53), 98]], dtype=np.int32)\nprint('Original array:')\nprint(a)\nprint('Lower-trianglular L in the Cholesky decomposition of the said array:')\nprint(L)	L	TBD1	ndarray
'import numpy as np\na = [[1, 2], [3, 4]]\na2 = x.tolist()\nprint(a == a2)'	'class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def tolist(self):\n        return TBD2()\nx = TBD1()\n__original_start_marker = None\nimport numpy as np\na = [[1, 2], [3, 4]]\na2 = x.tolist()\nprint((a == a2))'	x	TBD1	ndarray
import numpy as np\nprint('Original matrix:\\n')\nX = np.random.rand(5, 10)\nprint(X)\nprint('\\nSubtract the mean of each row of the said matrix:\\n')\nprint(Y)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nY = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Original matrix:\\n')\nX = np.random.rand(5, 10)\nprint(X)\nprint('\\nSubtract the mean of each row of the said matrix:\\n')\nprint(Y)	Y	TBD0	ndarray
import pandas as pd\nprint('Original Data Series:')\nprint(s)\nprint('\\nSubset of the above Data Series:')\nn = 6\nnew_s = s[s < n]\nprint(new_s)	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0(int):\n\n    def __init__(self):\n        self.container = {'TBD2': TBD2()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n\n    def __lt__(self, other):\n        return TBD2()\ns = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Original Data Series:')\nprint(s)\nprint('\\nSubset of the above Data Series:')\nn = 6\nnew_s = s[(s < n)]\nprint(new_s)	s	TBD0	Series
import pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\ndf = pd.DataFrame({'ord_no': [70001, np.nan, 70002, 70004, np.nan, 70005, '--', 70010, 70003, 70012, np.nan, 70013], 'purch_amt': [150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, '?', 12.43, 2480.4, 250.45, 3045.6], 'ord_date': ['?', '2012-09-10', np.nan, '2012-08-17', '2012-09-10', '2012-07-27', '2012-09-10', '2012-10-10', '2012-10-10', '2012-06-27', '2012-08-17', '2012-04-25'], 'customer_id': [3002, 3001, 3001, 3003, 3002, 3001, 3001, 3004, '--', 3002, 3001, 3001], 'salesman_id': [5002, 5003, '?', 5001, np.nan, 5002, 5001, '?', 5003, 5002, 5003, '--']})\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nReplace the missing values with NaN:')\nprint(result)	class TBD6():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD6()\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\ndf = pd.DataFrame({'ord_no': [70001, np.nan, 70002, 70004, np.nan, 70005, '--', 70010, 70003, 70012, np.nan, 70013], 'purch_amt': [150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, '?', 12.43, 2480.4, 250.45, 3045.6], 'ord_date': ['?', '2012-09-10', np.nan, '2012-08-17', '2012-09-10', '2012-07-27', '2012-09-10', '2012-10-10', '2012-10-10', '2012-06-27', '2012-08-17', '2012-04-25'], 'customer_id': [3002, 3001, 3001, 3003, 3002, 3001, 3001, 3004, '--', 3002, 3001, 3001], 'salesman_id': [5002, 5003, '?', 5001, np.nan, 5002, 5001, '?', 5003, 5002, 5003, '--']})\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nReplace the missing values with NaN:')\nprint(result)	result	TBD6	DataFrame
import numpy as np\nprint('Original array')\nprint(a)\nprint('Checking for complex number:')\nprint(np.iscomplex(a))\nprint('Checking for real number:')\nprint(np.isreal(a))\nprint('Checking for scalar type:')\nprint(np.isscalar(3.1))\nprint(np.isscalar([3.1]))	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\na = TBD1()\n__original_start_marker = None\nimport numpy as np\nprint('Original array')\nprint(a)\nprint('Checking for complex number:')\nprint(np.iscomplex(a))\nprint('Checking for real number:')\nprint(np.isreal(a))\nprint('Checking for scalar type:')\nprint(np.isscalar(3.1))\nprint(np.isscalar([3.1]))	a	TBD1	ndarray
'import pandas as pd\ndf = pd.DataFrame({\'school_code\': [\'s001\', \'s002\', \'s003\', \'s001\', \'s002\', \'s004\'], \'class\': [\'V\', \'V\', \'VI\', \'VI\', \'V\', \'VI\'], \'name\': [\'Alberto Franco\', \'Gino Mcneill\', \'Ryan Parkes\', \'Eesha Hinton\', \'Gino Mcneill\', \'David Parkes\'], \'date_of_birth\': [\'15/05/2002\', \'17/05/2002\', \'16/02/1999\', \'25/09/1998\', \'11/05/2002\', \'15/09/1997\'], \'weight\': [35, 32, 33, 30, 31, 32], \'t_id\': [\'t1\', \'t2\', \'t3\', \'t4\', \'t5\', \'t6\']})\nprint(\'Original DataFrame:\')\nprint(df)\nprint("\\nMultiIndex using columns \'t_id\', ‘school_code’ and \'class\':")\nprint(df1)\nprint(\'\\nConvert 1st and 3rd levels in the index frame into columns:\')\ndf2 = df1.reset_index(level=[\'t_id\', \'class\'])\nprint(df2)'	'class TBD9():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD8():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def reset_index(self, level=None):\n        return TBD9()\ndf1 = TBD8()\n__original_start_marker = None\nimport pandas as pd\ndf = pd.DataFrame({\'school_code\': [\'s001\', \'s002\', \'s003\', \'s001\', \'s002\', \'s004\'], \'class\': [\'V\', \'V\', \'VI\', \'VI\', \'V\', \'VI\'], \'name\': [\'Alberto Franco\', \'Gino Mcneill\', \'Ryan Parkes\', \'Eesha Hinton\', \'Gino Mcneill\', \'David Parkes\'], \'date_of_birth\': [\'15/05/2002\', \'17/05/2002\', \'16/02/1999\', \'25/09/1998\', \'11/05/2002\', \'15/09/1997\'], \'weight\': [35, 32, 33, 30, 31, 32], \'t_id\': [\'t1\', \'t2\', \'t3\', \'t4\', \'t5\', \'t6\']})\nprint(\'Original DataFrame:\')\nprint(df)\nprint("\\nMultiIndex using columns \'t_id\', ‘school_code’ and \'class\':")\nprint(df1)\nprint(\'\\nConvert 1st and 3rd levels in the index frame into columns:\')\ndf2 = df1.reset_index(level=[\'t_id\', \'class\'])\nprint(df2)'	df1	TBD8	DataFrame
'import numpy as np\narra = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(arra)\nprint(result)'	'class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD1()\n__original_start_marker = None\nimport numpy as np\narra = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(arra)\nprint(result)'	result	TBD1	ndarray
import numpy as np\nnums = np.random.randint(0, 4, (6, 3))\nprint('Original vector:')\nprint(nums)\nnew_nums = np.logical_and.reduce(nums[:, 1:] == nums[:, :-1], axis=1)\nprint('\\nRows with unequal values:')\nprint(result)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD0()\n__original_start_marker = None\nimport numpy as np\nnums = np.random.randint(0, 4, (6, 3))\nprint('Original vector:')\nprint(nums)\nnew_nums = np.logical_and.reduce((nums[(:, 1:)] == nums[(:, :(- 1))]), axis=1)\nprint('\\nRows with unequal values:')\nprint(result)	result	TBD0	ndarray
import numpy as np\nb = np.array([4, 5])\nprint('Array a: ', a)\nprint('Array b: ', b)\nprint('a > b')\nprint(np.greater(a, b))\nprint('a >= b')\nprint(np.greater_equal(a, b))\nprint('a < b')\nprint(np.less(a, b))\nprint('a <= b')\nprint(np.less_equal(a, b))	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\na = 0\n__original_start_marker = None\nimport numpy as np\nb = np.array([4, 5])\nprint('Array a: ', a)\nprint('Array b: ', b)\nprint('a > b')\nprint(np.greater(a, b))\nprint('a >= b')\nprint(np.greater_equal(a, b))\nprint('a < b')\nprint(np.less(a, b))\nprint('a <= b')\nprint(np.less_equal(a, b))	a	TBD1	ndarray
import pandas as pd\nimport re as re\nprint('Original DataFrame:')\nprint(df)\ndef search_words(text):\n    result = re.findall('\\\\b[^\\\\d\\\\W]+\\\\b', text)\n    return ' '.join(result)\ndf['only_words'] = df['address'].apply(lambda x: search_words(x))\nprint('\\nOnly words:')\nprint(df)	class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def apply(self, arg0):\n        return TBD3()\ndf = {'address': TBD1()}\n__original_start_marker = None\nimport pandas as pd\nimport re as re\nprint('Original DataFrame:')\nprint(df)\n\ndef search_words(text):\n    result = re.findall('\\\\b[^\\\\d\\\\W]+\\\\b', text)\n    return ' '.join(result)\ndf['only_words'] = df['address'].apply((lambda x: search_words(x)))\nprint('\\nOnly words:')\nprint(df)	df	TBD0	DataFrame
import pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nTitle cases:')\ndf['company_code_title_cases'] = list(map(lambda x: x.title(), df['company_code']))\nprint(df)	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self):\n        self.container = {'company_code': TBD1()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\ndf = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nTitle cases:')\ndf['company_code_title_cases'] = list(map((lambda x: x.title()), df['company_code']))\nprint(df)	df	TBD0	DataFrame
import numpy as np\narr1 = np.array([1, 2, 3, 2, 4, 6, 1, 2, 12, 0, -12, 6])\nprint('Original array:')\nprint(arr1)\nprint('Average of every consecutive triplet of elements of the said array:')\nprint(result)	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD1()\n__original_start_marker = None\nimport numpy as np\narr1 = np.array([1, 2, 3, 2, 4, 6, 1, 2, 12, 0, (- 12), 6])\nprint('Original array:')\nprint(arr1)\nprint('Average of every consecutive triplet of elements of the said array:')\nprint(result)	result	TBD1	ndarray
'import numpy as np\nimport pandas as pd\nprint(\'Original Numpy array:\')\nprint(np_array)\nprint(\'Type: \', type(np_array))\ndf = pd.DataFrame(np.random.rand(12, 3), columns=[\'A\', \'B\', \'C\'])\nprint("\\nPanda\'s DataFrame: ")\nprint(df)\nprint(\'Type: \', type(df))'	'class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnp_array = TBD1()\n__original_start_marker = None\nimport numpy as np\nimport pandas as pd\nprint(\'Original Numpy array:\')\nprint(np_array)\nprint(\'Type: \', type(np_array))\ndf = pd.DataFrame(np.random.rand(12, 3), columns=[\'A\', \'B\', \'C\'])\nprint("\\nPanda\'s DataFrame: ")\nprint(df)\nprint(\'Type: \', type(df))'	np_array	TBD1	ndarray
import numpy as np\nprint('Original array:')\nprint(a)\nunique_elements, counts_elements = np.unique(a, return_counts=True)\nprint('Frequency of unique values of the said array:')\nprint(np.asarray((unique_elements, counts_elements)))	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\na = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Original array:')\nprint(a)\n(unique_elements, counts_elements) = np.unique(a, return_counts=True)\nprint('Frequency of unique values of the said array:')\nprint(np.asarray((unique_elements, counts_elements)))	a	TBD0	ndarray
'import numpy as np\na = np.array([[10], [20], [30]])\nb = np.array([[40], [50], [60]])\nprint(c)'	'class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nc = TBD2()\n__original_start_marker = None\nimport numpy as np\na = np.array([[10], [20], [30]])\nb = np.array([[40], [50], [60]])\nprint(c)'	c	TBD2	ndarray
import numpy as np\ndef generate():\n    for n in range(15):\n        yield n\nprint('New array:')\nprint(nums)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnums = TBD0()\n__original_start_marker = None\nimport numpy as np\n\ndef generate():\n    for n in range(15):\n        (yield n)\nprint('New array:')\nprint(nums)	nums	TBD0	ndarray
import pandas as pd\nimport re as re\nprint('Original DataFrame:')\nprint(df)\ndef find_unique_sentence(str1):\n    result = re.findall('(?sm)(^[^\\\\r\\\\n]+$)(?!.*^\\\\1$)', str1)\n    return result\ndf['unique_sentence'] = df['address'].apply(lambda st: find_unique_sentence(st))\nprint('\\nExtract unique sentences :')\nprint(df)	class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def apply(self, arg0):\n        return TBD3()\ndf = {'address': TBD1()}\n__original_start_marker = None\nimport pandas as pd\nimport re as re\nprint('Original DataFrame:')\nprint(df)\n\ndef find_unique_sentence(str1):\n    result = re.findall('(?sm)(^[^\\\\r\\\\n]+$)(?!.*^\\\\1$)', str1)\n    return result\ndf['unique_sentence'] = df['address'].apply((lambda st: find_unique_sentence(st)))\nprint('\\nExtract unique sentences :')\nprint(df)	df	TBD0	DataFrame
import pandas as pd\ns1 = pd.Series([0, 1, 2, 3], name='col1')\ns2 = pd.Series([0, 1, 2, 3])\ns3 = pd.Series([0, 1, 4, 5], name='col3')\nprint(df)	class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\ndf = TBD3()\n__original_start_marker = None\nimport pandas as pd\ns1 = pd.Series([0, 1, 2, 3], name='col1')\ns2 = pd.Series([0, 1, 2, 3])\ns3 = pd.Series([0, 1, 4, 5], name='col3')\nprint(df)	df	TBD3	DataFrame
import numpy as np\na = np.array([1, 2])\nprint('Array a: ', a)\nprint('Array b: ', b)\nprint('a > b')\nprint(np.greater(a, b))\nprint('a >= b')\nprint(np.greater_equal(a, b))\nprint('a < b')\nprint(np.less(a, b))\nprint('a <= b')\nprint(np.less_equal(a, b))	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nb = 0\n__original_start_marker = None\nimport numpy as np\na = np.array([1, 2])\nprint('Array a: ', a)\nprint('Array b: ', b)\nprint('a > b')\nprint(np.greater(a, b))\nprint('a >= b')\nprint(np.greater_equal(a, b))\nprint('a < b')\nprint(np.less(a, b))\nprint('a <= b')\nprint(np.less_equal(a, b))	b	TBD1	ndarray
import numpy as np\nprint('\\nCopy of a matrix with the elements below the k-th diagonal zeroed:')\nprint(result)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('\\nCopy of a matrix with the elements below the k-th diagonal zeroed:')\nprint(result)	result	TBD0	ndarray
import numpy as np\nnums1 = np.ones((2, 2, 3))\nnums2 = 3 * np.ones((2, 2))\nprint('Original array:')\nprint(nums1)\nprint('\\nNew array:')\nprint(new_array)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnew_array = TBD0()\n__original_start_marker = None\nimport numpy as np\nnums1 = np.ones((2, 2, 3))\nnums2 = (3 * np.ones((2, 2)))\nprint('Original array:')\nprint(nums1)\nprint('\\nNew array:')\nprint(new_array)	new_array	TBD0	ndarray
'import pandas as pd\nprint(\'Original DataFrame:\')\nprint(df)\nprint("\\nMultiIndex using columns \'t_id\', ‘school_code’ and \'class\':")\ndf1 = df.set_index([\'t_id\', \'school_code\', \'class\'])\nprint(df1)\nprint(\'\\nConvert 1st and 3rd levels in the index frame into columns:\')\ndf2 = df1.reset_index(level=[\'t_id\', \'class\'])\nprint(df2)'	'class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def reset_index(self, level=None):\n        return TBD4()\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def set_index(self, arg0):\n        return TBD3()\ndf = TBD2()\n__original_start_marker = None\nimport pandas as pd\nprint(\'Original DataFrame:\')\nprint(df)\nprint("\\nMultiIndex using columns \'t_id\', ‘school_code’ and \'class\':")\ndf1 = df.set_index([\'t_id\', \'school_code\', \'class\'])\nprint(df1)\nprint(\'\\nConvert 1st and 3rd levels in the index frame into columns:\')\ndf2 = df1.reset_index(level=[\'t_id\', \'class\'])\nprint(df2)'	df	TBD2	DataFrame
import numpy as np\nprint('Original array:')\nprint(nums)\nn = 5\nprint('\\nElements of the said array greater than', n)\nprint(nums[nums > n])\nn = 6\nprint('\\nElements of the said array less than', n)\nprint(nums[nums < n])	class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0(int):\n\n    def __init__(self):\n        self.container = {'TBD2': TBD2(), True: TBD3(), 'TBD2': TBD2()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n\n    def __gt__(self, other):\n        return TBD2()\nnums = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Original array:')\nprint(nums)\nn = 5\nprint('\\nElements of the said array greater than', n)\nprint(nums[(nums > n)])\nn = 6\nprint('\\nElements of the said array less than', n)\nprint(nums[(nums < n)])	nums	TBD0	ndarray
'import numpy as np\nimport pandas as pd\nnp_array = np.random.rand(12, 3)\nprint(\'Original Numpy array:\')\nprint(np_array)\nprint(\'Type: \', type(np_array))\nprint("\\nPanda\'s DataFrame: ")\nprint(df)\nprint(\'Type: \', type(df))'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\ndf = TBD0()\n__original_start_marker = None\nimport numpy as np\nimport pandas as pd\nnp_array = np.random.rand(12, 3)\nprint(\'Original Numpy array:\')\nprint(np_array)\nprint(\'Type: \', type(np_array))\nprint("\\nPanda\'s DataFrame: ")\nprint(df)\nprint(\'Type: \', type(df))'	df	TBD0	DataFrame
import numpy as np\nnew_data = [(1, 2.0, 'Albert Einstein'), (2, 2.0, 'Edmond Halley'), (3, 3.0, 'Gertrude B. Elion')]\nx[:] = new_data\nprint(x)	class TBD1():\n\n    def __init__(self):\n        self.container = {}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\nx = TBD1()\n__original_start_marker = None\nimport numpy as np\nnew_data = [(1, 2.0, 'Albert Einstein'), (2, 2.0, 'Edmond Halley'), (3, 3.0, 'Gertrude B. Elion')]\nx[:] = new_data\nprint(x)	x	TBD1	ndarray
import numpy as np\nprint('Array1: ', array1)\narray2 = [0, 40]\nprint('Array2: ', array2)\nprint('Compare each element of array1 and array2')\nprint(np.in1d(array1, array2))	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\narray1 = TBD1()\n__original_start_marker = None\nimport numpy as np\nprint('Array1: ', array1)\narray2 = [0, 40]\nprint('Array2: ', array2)\nprint('Compare each element of array1 and array2')\nprint(np.in1d(array1, array2))	array1	TBD1	ndarray
import numpy as np\nx = np.array([24, 27, 30, 29, 18, 14])\nprint('Original array:')\nprint(x)\ny[:] = x\nprint('\\nCopy of the said array:')\nprint(y)	class TBD1():\n\n    def __init__(self):\n        self.container = {}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\ny = TBD1()\n__original_start_marker = None\nimport numpy as np\nx = np.array([24, 27, 30, 29, 18, 14])\nprint('Original array:')\nprint(x)\ny[:] = x\nprint('\\nCopy of the said array:')\nprint(y)	y	TBD1	ndarray
import numpy as np\np = np.array([[0, 0, 0], [1, 2, 3], [4, 5, 6]])\nprint('Original arrays:')\nprint('Array-1')\nprint(p)\nprint('Array-2')\nprint(q)\nprint('\\nNew Array:')\nnew_array1 = p + q\nprint(new_array1)	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nq = 0\n__original_start_marker = None\nimport numpy as np\np = np.array([[0, 0, 0], [1, 2, 3], [4, 5, 6]])\nprint('Original arrays:')\nprint('Array-1')\nprint(p)\nprint('Array-2')\nprint(q)\nprint('\\nNew Array:')\nnew_array1 = (p + q)\nprint(new_array1)	q	TBD1	ndarray
import pandas as pd\nfrom pandas.tseries.offsets import *\nimport datetime\nfrom datetime import datetime, date\ndt = datetime(2020, 1, 4)\nprint('Specified date:')\nprint(dt)\nprint('\\nOne business day from the said date:')\nobday = dt + BusinessDay()\nprint(obday)\nprint('\\nTwo business days from the said date:')\ntbday = dt + 2 * BusinessDay()\nprint(tbday)\nprint('\\nThree business days from the said date:')\nprint(thbday)\nprint('\\nNext business month end from the said date:')\nnbday = dt + BMonthEnd()\nprint(nbday)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nthbday = TBD0()\n__original_start_marker = None\nimport pandas as pd\nfrom pandas.tseries.offsets import *\nimport datetime\nfrom datetime import datetime, date\ndt = datetime(2020, 1, 4)\nprint('Specified date:')\nprint(dt)\nprint('\\nOne business day from the said date:')\nobday = (dt + BusinessDay())\nprint(obday)\nprint('\\nTwo business days from the said date:')\ntbday = (dt + (2 * BusinessDay()))\nprint(tbday)\nprint('\\nThree business days from the said date:')\nprint(thbday)\nprint('\\nNext business month end from the said date:')\nnbday = (dt + BMonthEnd())\nprint(nbday)	thbday	TBD0	Timestamp
'import numpy as np\ny = np.array([])\nprint(x.size)\nprint(y.size)'	'class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        self.size = TBD2()\n        pass\nx = TBD1()\n__original_start_marker = None\nimport numpy as np\ny = np.array({})\nprint(x.size)\nprint(y.size)'	x	TBD1	ndarray
import numpy as np\nimport os\na = np.array([1, 2, 3, 4, 5, 6])\nprint('Original array:')\nprint(a)\na_bytes = a.tostring()\nprint('After loading, content of the text file:')\nprint(a2)\nprint(np.array_equal(a, a2))	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\na2 = TBD1()\n__original_start_marker = None\nimport numpy as np\nimport os\na = np.array([1, 2, 3, 4, 5, 6])\nprint('Original array:')\nprint(a)\na_bytes = a.tostring()\nprint('After loading, content of the text file:')\nprint(a2)\nprint(np.array_equal(a, a2))	a2	TBD1	ndarray
import pandas as pd\nprint('Original Data Series:')\nprint(s)\ns = s.reindex(index=['B', 'A', 'C', 'D', 'E'])\nprint('Data Series after changing the order of index:')\nprint(s)	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def reindex(self, index=None):\n        return TBD2()\ns = TBD1()\n__original_start_marker = None\nimport pandas as pd\nprint('Original Data Series:')\nprint(s)\ns = s.reindex(index=['B', 'A', 'C', 'D', 'E'])\nprint('Data Series after changing the order of index:')\nprint(s)	s	TBD1	Series
import pandas as pd\ns = pd.Series([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nprint('Original Data Series:')\nprint(s)\nprint('\\nSubset of the above Data Series:')\nn = 6\nprint(new_s)	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnew_s = TBD1()\n__original_start_marker = None\nimport pandas as pd\ns = pd.Series([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nprint('Original Data Series:')\nprint(s)\nprint('\\nSubset of the above Data Series:')\nn = 6\nprint(new_s)	new_s	TBD1	Series
import numpy as np\nprint('Original matrix:\\n')\nprint(X)\nprint('\\nSubtract the mean of each row of the said matrix:\\n')\nY = X - X.mean(axis=1, keepdims=True)\nprint(Y)	class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __sub__(self, other):\n        return TBD3()\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def mean(self, axis=None, keepdims=None):\n        return TBD1()\n\n    def __sub__(self, other):\n        return TBD2()\nX = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Original matrix:\\n')\nprint(X)\nprint('\\nSubtract the mean of each row of the said matrix:\\n')\nY = (X - X.mean(axis=1, keepdims=True))\nprint(Y)	X	TBD0	ndarray
import pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nReplace the missing values with NaN:')\nresult = df.replace({'?': np.nan, '--': np.nan})\nprint(result)	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def replace(self, arg0):\n        return TBD2()\ndf = TBD1()\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nReplace the missing values with NaN:')\nresult = df.replace({'?': np.nan, '--': np.nan})\nprint(result)	df	TBD1	DataFrame
import numpy as np\nprint('3x3 matrix:')\nprint(array_2D)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\narray_2D = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('3x3 matrix:')\nprint(array_2D)	array_2D	TBD0	ndarray
import pandas as pd\nimport re as re\npd.set_option('display.max_columns', 10)\nprint('Original DataFrame:')\nprint(df)\ndef test_and_cond(text):\n    result = re.findall('(?=.*Ave.)(?=.*9910).*', text)\n    return ' '.join(result)\ndf['check_two_words'] = df['address'].apply(lambda x: test_and_cond(x))\nprint('\\nPresent two words!')\nprint(df)	class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def apply(self, arg0):\n        return TBD3()\ndf = {'address': TBD1()}\n__original_start_marker = None\nimport pandas as pd\nimport re as re\npd.set_option('display.max_columns', 10)\nprint('Original DataFrame:')\nprint(df)\n\ndef test_and_cond(text):\n    result = re.findall('(?=.*Ave.)(?=.*9910).*', text)\n    return ' '.join(result)\ndf['check_two_words'] = df['address'].apply((lambda x: test_and_cond(x)))\nprint('\\nPresent two words!')\nprint(df)	df	TBD0	DataFrame
import numpy as np\nnum = np.arange(18)\narr1 = np.reshape(num, [6, 3])\nprint('Original array:')\nprint(arr1)\nprint('\\nExtract upper triangular part of the said array:')\nprint(result)\nresult = arr1[np.triu_indices(2)]\nprint('\\nExtract upper triangular part of the said array:')\nprint(result)	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD1()\n__original_start_marker = None\nimport numpy as np\nnum = np.arange(18)\narr1 = np.reshape(num, [6, 3])\nprint('Original array:')\nprint(arr1)\nprint('\\nExtract upper triangular part of the said array:')\nprint(result)\nresult = arr1[np.triu_indices(2)]\nprint('\\nExtract upper triangular part of the said array:')\nprint(result)	result	TBD1	ndarray
import numpy as np\nnp_array = np.arange(3 * 4 * 5).reshape(3, 4, 5)\nprint('Original Numpy array:')\nprint(np_array)\nprint('Type: ', type(np_array))\nprint('\\n2D diagonals: ')\nprint(result)\nprint('Type: ', type(result))	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD0()\n__original_start_marker = None\nimport numpy as np\nnp_array = np.arange(((3 * 4) * 5)).reshape(3, 4, 5)\nprint('Original Numpy array:')\nprint(np_array)\nprint('Type: ', type(np_array))\nprint('\\n2D diagonals: ')\nprint(result)\nprint('Type: ', type(result))	result	TBD0	ndarray
import pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nIs proper case or title case?')\ndf['company_code_is_title'] = list(map(lambda x: x.istitle(), df['company_code']))\nprint(df)	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self):\n        self.container = {'company_code': TBD1()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\ndf = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nIs proper case or title case?')\ndf['company_code_is_title'] = list(map((lambda x: x.istitle()), df['company_code']))\nprint(df)	df	TBD0	DataFrame
import pandas as pd\nprint('Original Series:')\nprint(nums)\nprint('Index of the first occurrence of the smallest and largest value of the said series:')\nprint(nums.idxmin())\nprint(nums.idxmax())	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def idxmin(self):\n        return TBD1()\n\n    def idxmax(self):\n        return TBD2()\nnums = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Original Series:')\nprint(nums)\nprint('Index of the first occurrence of the smallest and largest value of the said series:')\nprint(nums.idxmin())\nprint(nums.idxmax())	nums	TBD0	Series
import numpy as np\nnp.set_printoptions(linewidth=100)\nstudent = np.array([['01', 'V', 'Debby Pramod'], ['02', 'V', 'Artemiy Ellie'], ['03', 'V', 'Baptist Kamal'], ['04', 'V', 'Lavanya Davide'], ['05', 'V', 'Fulton Antwan'], ['06', 'V', 'Euanthe Sandeep'], ['07', 'V', 'Endzela Sanda'], ['08', 'V', 'Victoire Waman'], ['09', 'V', 'Briar Nur'], ['10', 'V', 'Rose Lykos']])\nprint('Original array:')\nprint(student)\nchar = 'E'\nprint('\\nStudent name starting with', char, ':')\nprint(result)\nchar = '1'\nresult = student[np.char.startswith(student[:, 0], char)]\nprint('\\nStudent id starting with', char, ':')\nprint(result)	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD1()\n__original_start_marker = None\nimport numpy as np\nnp.set_printoptions(linewidth=100)\nstudent = np.array([['01', 'V', 'Debby Pramod'], ['02', 'V', 'Artemiy Ellie'], ['03', 'V', 'Baptist Kamal'], ['04', 'V', 'Lavanya Davide'], ['05', 'V', 'Fulton Antwan'], ['06', 'V', 'Euanthe Sandeep'], ['07', 'V', 'Endzela Sanda'], ['08', 'V', 'Victoire Waman'], ['09', 'V', 'Briar Nur'], ['10', 'V', 'Rose Lykos']])\nprint('Original array:')\nprint(student)\nchar = 'E'\nprint('\\nStudent name starting with', char, ':')\nprint(result)\nchar = '1'\nresult = student[np.char.startswith(student[(:, 0)], char)]\nprint('\\nStudent id starting with', char, ':')\nprint(result)	result	TBD1	ndarray
'import numpy as np\nx = np.array([-180.0, -90.0, 90.0, 180.0])\nr1 = np.radians(x)\nassert np.array_equiv(r1, r2)\nprint(r1)'	'class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nr2 = TBD1()\n__original_start_marker = None\nimport numpy as np\nx = np.array([(- 180.0), (- 90.0), 90.0, 180.0])\nr1 = np.radians(x)\nassert np.array_equiv(r1, r2)\nprint(r1)'	r2	TBD1	ndarray
import pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nIs lower (company_code)?')\ndf['company_code_ul_cases'] = list(map(lambda x: x.islower(), df['company_code']))\nprint(df)\nprint('\\nIs Upper (company_code)?')\ndf['company_code_ul_cases'] = list(map(lambda x: x.isupper(), df['company_code']))\nprint(df)	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self):\n        self.container = {'company_code': TBD1()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\ndf = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nIs lower (company_code)?')\ndf['company_code_ul_cases'] = list(map((lambda x: x.islower()), df['company_code']))\nprint(df)\nprint('\\nIs Upper (company_code)?')\ndf['company_code_ul_cases'] = list(map((lambda x: x.isupper()), df['company_code']))\nprint(df)	df	TBD0	DataFrame
import pandas as pd\nprint('Original Series of list')\nprint(s)\ns = s.apply(pd.Series).stack().reset_index(drop=True)\nprint('One Series')\nprint(s)	class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def reset_index(self, drop=None):\n        return TBD3()\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def stack(self):\n        return TBD2()\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def apply(self, arg0):\n        return TBD1()\ns = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Original Series of list')\nprint(s)\ns = s.apply(pd.Series).stack().reset_index(drop=True)\nprint('One Series')\nprint(s)	s	TBD0	Series
import pandas as pd\nfrom pandas.tseries.offsets import *\nimport datetime\nfrom datetime import datetime, date\ndt = datetime(2020, 1, 4)\nprint('Specified date:')\nprint(dt)\nprint('\\nOne business day from the said date:')\nobday = dt + BusinessDay()\nprint(obday)\nprint('\\nTwo business days from the said date:')\nprint(tbday)\nprint('\\nThree business days from the said date:')\nthbday = dt + 3 * BusinessDay()\nprint(thbday)\nprint('\\nNext business month end from the said date:')\nnbday = dt + BMonthEnd()\nprint(nbday)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\ntbday = TBD0()\n__original_start_marker = None\nimport pandas as pd\nfrom pandas.tseries.offsets import *\nimport datetime\nfrom datetime import datetime, date\ndt = datetime(2020, 1, 4)\nprint('Specified date:')\nprint(dt)\nprint('\\nOne business day from the said date:')\nobday = (dt + BusinessDay())\nprint(obday)\nprint('\\nTwo business days from the said date:')\nprint(tbday)\nprint('\\nThree business days from the said date:')\nthbday = (dt + (3 * BusinessDay()))\nprint(thbday)\nprint('\\nNext business month end from the said date:')\nnbday = (dt + BMonthEnd())\nprint(nbday)	tbday	TBD0	Timestamp
import numpy as np\np = np.array([[0, 0, 0], [1, 2, 3], [4, 5, 6]])\nq = np.array([10, 11, 12])\nprint('Original arrays:')\nprint('Array-1')\nprint(p)\nprint('Array-2')\nprint(q)\nprint('\\nNew Array:')\nprint(new_array1)	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnew_array1 = TBD2()\n__original_start_marker = None\nimport numpy as np\np = np.array([[0, 0, 0], [1, 2, 3], [4, 5, 6]])\nq = np.array([10, 11, 12])\nprint('Original arrays:')\nprint('Array-1')\nprint(p)\nprint('Array-2')\nprint(q)\nprint('\\nNew Array:')\nprint(new_array1)	new_array1	TBD2	ndarray
import numpy as np\nprint('Original arrays:')\nprint(array_nums1)\nresult = array_nums1[(array_nums1 > 6) & (array_nums1 % 3 == 0)]\nprint('\\nItems greater than 6 and a multiple of 3 of the said array:')\nprint(result)	class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __and__(self, other):\n        return TBD4()\n\nclass TBD0(int):\n\n    def __init__(self):\n        self.container = {'TBD4': TBD4()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n\n    def __gt__(self, other):\n        return TBD3()\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\narray_nums1 = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Original arrays:')\nprint(array_nums1)\nresult = array_nums1[((array_nums1 > 6) & ((array_nums1 % 3) == 0))]\nprint('\\nItems greater than 6 and a multiple of 3 of the said array:')\nprint(result)	array_nums1	TBD0	ndarray
from collections import Counter\nl1 = [1, 1, 2, 3, 3, 4, 4, 5, 6, 7]\nl2 = [1, 1, 2, 4, 5, 6]\nprint('Original lists:')\nc1 = Counter(l1)\nc2 = Counter(l2)\nprint(list(diff.elements()))	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def elements(self):\n        return {}\ndiff = TBD2()\n__original_start_marker = None\nfrom collections import Counter\nl1 = [1, 1, 2, 3, 3, 4, 4, 5, 6, 7]\nl2 = [1, 1, 2, 4, 5, 6]\nprint('Original lists:')\nc1 = Counter(l1)\nc2 = Counter(l2)\nprint(list(diff.elements()))	diff	TBD2	Counter
import pandas as pd\nnums = {'amount': ['10', '250', '3000', '40000', '500000']}\nprint('Original dataframe:')\nprint(df)\nprint('\\nAdd leading zeros:')\ndf['amount'] = list(map(lambda x: x.zfill(10), df['amount']))\nprint(df)	class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self):\n        self.container = {'amount': TBD3()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\ndf = TBD2()\n\nclass TBD1():\n\n    def __init__(self):\n        self.container = {'amount': TBD0()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n\nclass TBD0():\n\n    def __init__(self):\n        self.container = {0: '10', 1: '250', 2: '3000', 3: '40000', 4: '500000'}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n__original_start_marker = None\nimport pandas as pd\nnums = TBD1()\nprint('Original dataframe:')\nprint(df)\nprint('\\nAdd leading zeros:')\ndf['amount'] = list(map((lambda x: x.zfill(10)), df['amount']))\nprint(df)	df	TBD2	DataFrame
import numpy as np\nprint('Array of the integers from 30 to70')\nprint(array)	import array\n__original_start_marker = None\nimport numpy as np\nprint('Array of the integers from 30 to70')\nprint(array)	array		ndarray
import numpy as np\nprint('\\nOriginal arrays:')\nx = np.array((1, 2, 3))\ny = np.array((2, 3, 4))\nprint('Array-1')\nprint(x)\nprint('Array-2')\nprint(y)\nprint('\\nStack 1-D arrays as columns wise:')\nprint(new_array)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnew_array = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('\\nOriginal arrays:')\nx = np.array((1, 2, 3))\ny = np.array((2, 3, 4))\nprint('Array-1')\nprint(x)\nprint('Array-2')\nprint(y)\nprint('\\nStack 1-D arrays as columns wise:')\nprint(new_array)	new_array	TBD0	ndarray
import numpy as np\nprint('Random number between 0 and 1:')\nprint(rand_num)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nrand_num = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Random number between 0 and 1:')\nprint(rand_num)	rand_num	TBD0	ndarray
import numpy as np\narray_nums = np.arange(0, 40, 2)\nprint('Original array:')\nprint(array_nums)\nprint('\\nNew array of shape(5, 4):')\nprint(new_array)\nprint('\\nRestore the reshaped array into a 1-D array:')\nprint(new_array.flatten())	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def flatten(self):\n        return TBD1()\nnew_array = TBD0()\n__original_start_marker = None\nimport numpy as np\narray_nums = np.arange(0, 40, 2)\nprint('Original array:')\nprint(array_nums)\nprint('\\nNew array of shape(5, 4):')\nprint(new_array)\nprint('\\nRestore the reshaped array into a 1-D array:')\nprint(new_array.flatten())	new_array	TBD0	ndarray
import numpy as np\nx = np.array([1, 3, 5, 7, 0])\nprint('Original array: ')\nprint(x)\nr2 = np.insert(np.append(np.diff(x), 200), 0, [0, 0])\nassert np.array_equiv(r1, r2)\nprint('Difference between neighboring elements, element-wise, and prepend [0, 0] and append[200] to the said array:')\nprint(r2)	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nr1 = TBD2()\n__original_start_marker = None\nimport numpy as np\nx = np.array([1, 3, 5, 7, 0])\nprint('Original array: ')\nprint(x)\nr2 = np.insert(np.append(np.diff(x), 200), 0, [0, 0])\nassert np.array_equiv(r1, r2)\nprint('Difference between neighboring elements, element-wise, and prepend [0, 0] and append[200] to the said array:')\nprint(r2)	r1	TBD2	ndarray
import numpy as np\nprint('\\nOriginal arrays:')\nx = np.array((1, 2, 3))\ny = np.array((2, 3, 4))\nprint('Array-1')\nprint(x)\nprint('Array-2')\nprint(y)\nprint('\\nStack 1-D arrays as rows wise:')\nprint(new_array)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnew_array = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('\\nOriginal arrays:')\nx = np.array((1, 2, 3))\ny = np.array((2, 3, 4))\nprint('Array-1')\nprint(x)\nprint('Array-2')\nprint(y)\nprint('\\nStack 1-D arrays as rows wise:')\nprint(new_array)	new_array	TBD0	ndarray
from collections import Counter\nl1 = [1, 1, 2, 3, 3, 4, 4, 5, 6, 7]\nl2 = [1, 1, 2, 4, 5, 6]\nprint('Original lists:')\nc2 = Counter(l2)\ndiff = c1 - c2\nprint(list(diff.elements()))	class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def elements(self):\n        return {}\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __sub__(self, other):\n        return TBD3()\nc1 = TBD2()\n__original_start_marker = None\nfrom collections import Counter\nl1 = [1, 1, 2, 3, 3, 4, 4, 5, 6, 7]\nl2 = [1, 1, 2, 4, 5, 6]\nprint('Original lists:')\nc2 = Counter(l2)\ndiff = (c1 - c2)\nprint(list(diff.elements()))	c1	TBD2	Counter
'import pandas as pd\npd.set_option(\'display.max_rows\', None)\nprint(\'Original DataFrame:\')\nprint(student_data)\nprint(\'\\nSplit the said data on school_code wise:\')\ngrouped = student_data.groupby([\'school_code\'])\nprint("Call school code \'s001\':")\nprint(grouped.get_group(\'s001\'))\nprint("\\nCall school code \'s004\':")\nprint(grouped.get_group(\'s004\'))'	'class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def get_group(self, arg0):\n        return TBD3()\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def groupby(self, arg0):\n        return TBD2()\nstudent_data = TBD1()\n__original_start_marker = None\nimport pandas as pd\npd.set_option(\'display.max_rows\', None)\nprint(\'Original DataFrame:\')\nprint(student_data)\nprint(\'\\nSplit the said data on school_code wise:\')\ngrouped = student_data.groupby([\'school_code\'])\nprint("Call school code \'s001\':")\nprint(grouped.get_group(\'s001\'))\nprint("\\nCall school code \'s004\':")\nprint(grouped.get_group(\'s004\'))'	student_data	TBD1	DataFrame
import numpy as np\narray_nums1 = np.arange(20).reshape(4, 5)\nprint('Original arrays:')\nprint(array_nums1)\nprint('\\nItems greater than 6 and a multiple of 3 of the said array:')\nprint(result)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD0()\n__original_start_marker = None\nimport numpy as np\narray_nums1 = np.arange(20).reshape(4, 5)\nprint('Original arrays:')\nprint(array_nums1)\nprint('\\nItems greater than 6 and a multiple of 3 of the said array:')\nprint(result)	result	TBD0	ndarray
import pandas as pd\nfrom pandas.tseries.offsets import *\nimport datetime\nfrom datetime import datetime, date\ndt = datetime(2020, 1, 4)\nprint('Specified date:')\nprint(dt)\nprint('\\nOne business day from the said date:')\nprint(obday)\nprint('\\nTwo business days from the said date:')\ntbday = dt + 2 * BusinessDay()\nprint(tbday)\nprint('\\nThree business days from the said date:')\nthbday = dt + 3 * BusinessDay()\nprint(thbday)\nprint('\\nNext business month end from the said date:')\nnbday = dt + BMonthEnd()\nprint(nbday)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nobday = TBD0()\n__original_start_marker = None\nimport pandas as pd\nfrom pandas.tseries.offsets import *\nimport datetime\nfrom datetime import datetime, date\ndt = datetime(2020, 1, 4)\nprint('Specified date:')\nprint(dt)\nprint('\\nOne business day from the said date:')\nprint(obday)\nprint('\\nTwo business days from the said date:')\ntbday = (dt + (2 * BusinessDay()))\nprint(tbday)\nprint('\\nThree business days from the said date:')\nthbday = (dt + (3 * BusinessDay()))\nprint(thbday)\nprint('\\nNext business month end from the said date:')\nnbday = (dt + BMonthEnd())\nprint(nbday)	obday	TBD0	Timestamp
'import numpy as np\nprint(x)'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint(x)'	x	TBD0	ndarray
import numpy as np\nprint('Original array:')\nprint(x)\nprint('1 on the border and 0 inside in the array')\nx[1:-1, 1:-1] = 0\nprint(x)	class TBD0():\n\n    def __init__(self):\n        self.container = {}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\nx = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Original array:')\nprint(x)\nprint('1 on the border and 0 inside in the array')\nx[(1:(- 1), 1:(- 1))] = 0\nprint(x)	x	TBD0	ndarray
import numpy as np\nx = np.array([1, 3, 5, 7, 0])\nprint('Original array: ')\nprint(x)\nr1 = np.ediff1d(x, to_begin=[0, 0], to_end=[200])\nassert np.array_equiv(r1, r2)\nprint('Difference between neighboring elements, element-wise, and prepend [0, 0] and append[200] to the said array:')\nprint(r2)	class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\nr2 = TBD3()\n__original_start_marker = None\nimport numpy as np\nx = np.array([1, 3, 5, 7, 0])\nprint('Original array: ')\nprint(x)\nr1 = np.ediff1d(x, to_begin=[0, 0], to_end=[200])\nassert np.array_equiv(r1, r2)\nprint('Difference between neighboring elements, element-wise, and prepend [0, 0] and append[200] to the said array:')\nprint(r2)	r2	TBD3	ndarray
import numpy as np\nprint('Original array:')\nprint(array_nums)\nprint('\\nNew array of shape(5, 4):')\nnew_array = array_nums.reshape(5, 4)\nprint(new_array)\nprint('\\nRestore the reshaped array into a 1-D array:')\nprint(new_array.flatten())	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def flatten(self):\n        return TBD2()\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def reshape(self, arg0, arg1):\n        return TBD1()\narray_nums = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Original array:')\nprint(array_nums)\nprint('\\nNew array of shape(5, 4):')\nnew_array = array_nums.reshape(5, 4)\nprint(new_array)\nprint('\\nRestore the reshaped array into a 1-D array:')\nprint(new_array.flatten())	array_nums	TBD0	ndarray
'import pandas as pd\nprint(\'Original DataFrame with single index:\')\nprint(df)\ndate_of_birth = [\'15/05/2002\', \'17/05/2002\', \'16/02/1999\', \'25/09/1998\', \'11/05/2002\', \'15/09/1997\']\nidx = 3\nprint("\\nInsert \'date_of_birth\' column in 3rd position of the said DataFrame:")\ndf.insert(loc=idx, column=\'date_of_birth\', value=date_of_birth)\nprint(df)'	'class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def insert(self, loc=None, column=None, value=None):\n        return TBD2()\ndf = TBD1()\n__original_start_marker = None\nimport pandas as pd\nprint(\'Original DataFrame with single index:\')\nprint(df)\ndate_of_birth = [\'15/05/2002\', \'17/05/2002\', \'16/02/1999\', \'25/09/1998\', \'11/05/2002\', \'15/09/1997\']\nidx = 3\nprint("\\nInsert \'date_of_birth\' column in 3rd position of the said DataFrame:")\ndf.insert(loc=idx, column=\'date_of_birth\', value=date_of_birth)\nprint(df)'	df	TBD1	DataFrame
import numpy as np\nnums2 = 3 * np.ones((2, 2))\nprint('Original array:')\nprint(nums1)\nnew_array = nums1 * nums2[:, :, None]\nprint('\\nNew array:')\nprint(new_array)	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnums1 = 0\n__original_start_marker = None\nimport numpy as np\nnums2 = (3 * np.ones((2, 2)))\nprint('Original array:')\nprint(nums1)\nnew_array = (nums1 * nums2[(:, :, None)])\nprint('\\nNew array:')\nprint(new_array)	nums1	TBD0	ndarray
'import numpy as np\nx = np.array([-180.0, -90.0, 90.0, 180.0])\nr2 = np.deg2rad(x)\nassert np.array_equiv(r1, r2)\nprint(r1)'	'class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nr1 = TBD1()\n__original_start_marker = None\nimport numpy as np\nx = np.array([(- 180.0), (- 90.0), 90.0, 180.0])\nr2 = np.deg2rad(x)\nassert np.array_equiv(r1, r2)\nprint(r1)'	r1	TBD1	ndarray
import pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nReplacing NaNs with the value from the previous row (purch_amt):')\ndf['purch_amt'].fillna(method='pad', inplace=True)\nprint(df)\nprint('\\nReplacing NaNs with the value from the next row (sale_amt):')\ndf['sale_amt'].fillna(method='bfill', inplace=True)\nprint(df)	class TBD6():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def fillna(self, method=None, inplace=None):\n        return TBD6()\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def fillna(self, method=None, inplace=None):\n        return TBD3()\ndf = {'purch_amt': TBD1(), 'sale_amt': TBD4()}\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nReplacing NaNs with the value from the previous row (purch_amt):')\ndf['purch_amt'].fillna(method='pad', inplace=True)\nprint(df)\nprint('\\nReplacing NaNs with the value from the next row (sale_amt):')\ndf['sale_amt'].fillna(method='bfill', inplace=True)\nprint(df)	df	TBD0	DataFrame
import pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nNumeric values present in company_code column:')\ndf['company_code_is_digit'] = list(map(lambda x: x.isdigit(), df['company_code']))\nprint(df)	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self):\n        self.container = {'company_code': TBD1()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\ndf = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nNumeric values present in company_code column:')\ndf['company_code_is_digit'] = list(map((lambda x: x.isdigit()), df['company_code']))\nprint(df)	df	TBD0	DataFrame
import numpy as np\nprint('Original array:')\nprint(array_nums)\nprint('\\nAfter reversing:')\narray_nums[:] = array_nums[3::-1]\nprint(array_nums)	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\narray_nums = [TBD1(), TBD2()]\n__original_start_marker = None\nimport numpy as np\nprint('Original array:')\nprint(array_nums)\nprint('\\nAfter reversing:')\narray_nums[:] = array_nums[3::(- 1)]\nprint(array_nums)	array_nums	TBD0	ndarray
import pandas as pd\nprint('Sequences of fixed-frequency dates and time spans (1 H):\\n')\nprint(r1)\nprint('\\nSequences of fixed-frequency dates and time spans (3 H):\\n')\nr2 = pd.date_range('2030-01-01', periods=10, freq='3H')\nprint(r2)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nr1 = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Sequences of fixed-frequency dates and time spans (1 H):\\n')\nprint(r1)\nprint('\\nSequences of fixed-frequency dates and time spans (3 H):\\n')\nr2 = pd.date_range('2030-01-01', periods=10, freq='3H')\nprint(r2)	r1	TBD0	DatetimeIndex
import pandas as pd\nnewday = pd.Timestamp('2020-02-07')\nprint('First date:')\nprint(newday)\nprint('\\nThe day name of the said date:')\nprint(newday.day_name())\nprint('\\nAdd 2 days with the said date:')\nnewday1 = newday + pd.Timedelta('2 day')\nprint(newday1.day_name())\nprint('\\nNext business day:')\nprint(nbday.day_name())	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def day_name(self):\n        return TBD1()\nnbday = TBD0()\n__original_start_marker = None\nimport pandas as pd\nnewday = pd.Timestamp('2020-02-07')\nprint('First date:')\nprint(newday)\nprint('\\nThe day name of the said date:')\nprint(newday.day_name())\nprint('\\nAdd 2 days with the said date:')\nnewday1 = (newday + pd.Timedelta('2 day'))\nprint(newday1.day_name())\nprint('\\nNext business day:')\nprint(nbday.day_name())	nbday	TBD0	Timestamp
import pandas as pd\nimport re as re\npd.set_option('display.max_columns', 10)\nprint('Original DataFrame:')\nprint(df)\ndef test_num_less(n):\n    nums = []\n    for i in n.split():\n        result = re.findall('\\\\b(0*(?:[1-9][0-9]?|100))\\\\b', i)\n        nums.append(result)\n        all_num = [','.join(x) for x in nums if x != []]\n    return ' '.join(all_num)\ndf['num_less'] = df['address'].apply(lambda x: test_num_less(x))\nprint('\\nNumber less than 100:')\nprint(df)	class TBD5():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def apply(self, arg0):\n        return TBD5()\ndf = {'address': TBD3()}\n__original_start_marker = None\nimport pandas as pd\nimport re as re\npd.set_option('display.max_columns', 10)\nprint('Original DataFrame:')\nprint(df)\n\ndef test_num_less(n):\n    nums = {}\n    for i in n.split():\n        result = re.findall('\\\\b(0*(?:[1-9][0-9]?|100))\\\\b', i)\n        nums.append(result)\n        all_num = [','.join(x) for x in nums if (x != {})]\n    return ' '.join(all_num)\ndf['num_less'] = df['address'].apply((lambda x: test_num_less(x)))\nprint('\\nNumber less than 100:')\nprint(df)	df	TBD2	DataFrame
'import numpy as np\nprint(x)\ny = np.full((3, 3), 6)\nprint(y)'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint(x)\ny = np.full((3, 3), 6)\nprint(y)'	x	TBD0	ndarray
import numpy as np\nx = np.random.rand(10, 4)\nprint('Original array: ')\nprint(x)\nprint('First 5 rows of the above array:')\nprint(y)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\ny = TBD0()\n__original_start_marker = None\nimport numpy as np\nx = np.random.rand(10, 4)\nprint('Original array: ')\nprint(x)\nprint('First 5 rows of the above array:')\nprint(y)	y	TBD0	ndarray
'import pandas as pd\npd.set_option(\'display.max_rows\', None)\ndf = pd.DataFrame({\'ord_no\': [70001, 70009, 70002, 70004, 70007, 70005, 70008, 70010, 70003, 70012, 70011, 70013], \'purch_amt\': [150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6], \'ord_date\': [\'2012-10-05\', \'2012-09-10\', \'2012-10-05\', \'2012-08-17\', \'2012-09-10\', \'2012-07-27\', \'2012-09-10\', \'2012-10-10\', \'2012-10-10\', \'2012-06-27\', \'2012-08-17\', \'2012-04-25\'], \'customer_id\': [3002, 3001, 3001, 3003, 3002, 3002, 3001, 3004, 3003, 3002, 3003, 3001], \'salesman_id\': [5002, 5003, 5001, 5003, 5002, 5001, 5001, 5003, 5003, 5002, 5003, 5001]})\nprint(\'Original Orders DataFrame:\')\nprint(df)\nprint("\\nSplit the said data on \'salesman_id\', \'customer_id\' wise:")\nresult = df.groupby([\'salesman_id\', \'customer_id\'])\nfor name, group in result:\n    print(\'\\nGroup:\')\n    print(name)\n    print(group)\nn = 2\nprint(\'\\nDroping last two records:\')\nprint(result1)'	'class TBD10():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult1 = TBD10()\n\nclass TBD9():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD7():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def __lt__(self, other):\n        return TBD9()\n__original_start_marker = None\nimport pandas as pd\npd.set_option(\'display.max_rows\', None)\ndf = pd.DataFrame({\'ord_no\': [70001, 70009, 70002, 70004, 70007, 70005, 70008, 70010, 70003, 70012, 70011, 70013], \'purch_amt\': [150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6], \'ord_date\': [\'2012-10-05\', \'2012-09-10\', \'2012-10-05\', \'2012-08-17\', \'2012-09-10\', \'2012-07-27\', \'2012-09-10\', \'2012-10-10\', \'2012-10-10\', \'2012-06-27\', \'2012-08-17\', \'2012-04-25\'], \'customer_id\': [3002, 3001, 3001, 3003, 3002, 3002, 3001, 3004, 3003, 3002, 3003, 3001], \'salesman_id\': [5002, 5003, 5001, 5003, 5002, 5001, 5001, 5003, 5003, 5002, 5003, 5001]})\nprint(\'Original Orders DataFrame:\')\nprint(df)\nprint("\\nSplit the said data on \'salesman_id\', \'customer_id\' wise:")\nresult = df.groupby([\'salesman_id\', \'customer_id\'])\nfor (name, group) in result:\n    print(\'\\nGroup:\')\n    print(name)\n    print(group)\nn = 2\nprint(\'\\nDroping last two records:\')\nprint(result1)'	result1	TBD10	DataFrame
import numpy as np\nprint('Original array:')\nprint(a)\nresult = np.where(np.logical_and(a >= 7, a <= 20))\nprint('\\nElements within range: index position')\nprint(result)	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\na = 0\n__original_start_marker = None\nimport numpy as np\nprint('Original array:')\nprint(a)\nresult = np.where(np.logical_and((a >= 7), (a <= 20)))\nprint('\\nElements within range: index position')\nprint(result)	a	TBD0	ndarray
import numpy as np\nprint('Original array:')\nprint(x)\nprint('Mean of each column:')\nprint(x.mean(axis=0))\nprint('Mean of each row:')\nprint(x.mean(axis=1))	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def mean(self, axis=None):\n        return TBD1()\nx = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Original array:')\nprint(x)\nprint('Mean of each column:')\nprint(x.mean(axis=0))\nprint('Mean of each row:')\nprint(x.mean(axis=1))	x	TBD0	ndarray
import numpy as np\nnum = np.arange(20)\nprint('Original array:')\nprint(arr1)\nprint([0, 1, 2, 3, 4] in arr1.tolist())\nprint([0, 1, 2, 3, 5] in arr1.tolist())\nprint([15, 16, 17, 18, 19] in arr1.tolist())	class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def tolist(self):\n        return {}\narr1 = TBD3()\n\nclass TBD2():\n\n    def __init__(self):\n        self.container = {0: 15, 1: 16, 2: 17, 3: 18, 4: 19}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n\nclass TBD1():\n\n    def __init__(self):\n        self.container = {0: 0, 1: 1, 2: 2, 3: 3, 4: 5}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n\nclass TBD0():\n\n    def __init__(self):\n        self.container = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n__original_start_marker = None\nimport numpy as np\nnum = np.arange(20)\nprint('Original array:')\nprint(arr1)\nprint((TBD0() in arr1.tolist()))\nprint((TBD1() in arr1.tolist()))\nprint((TBD2() in arr1.tolist()))	arr1	TBD3	ndarray
import pandas as pd\nnums1 = pd.Series([1, 8, 7, 5, 6, 5, 3, 4, 7, 1])\nprint('Original Series:')\nprint(nums1)\nprint(nums2)\nprint('Check 2 series are equal or not?')\nprint(nums1 == nums2)	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnums2 = TBD1()\n__original_start_marker = None\nimport pandas as pd\nnums1 = pd.Series([1, 8, 7, 5, 6, 5, 3, 4, 7, 1])\nprint('Original Series:')\nprint(nums1)\nprint(nums2)\nprint('Check 2 series are equal or not?')\nprint((nums1 == nums2))	nums2	TBD1	Series
import numpy as np\np = [[1, 0], [0, 1]]\nq = [[1, 2], [3, 4]]\nprint('original matrix:')\nprint(p)\nprint(q)\nresult2 = np.cross(q, p)\nprint('cross product of the said two vectors(p, q):')\nprint(result1)\nprint('cross product of the said two vectors(q, p):')\nprint(result2)	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult1 = TBD2()\n__original_start_marker = None\nimport numpy as np\np = [[1, 0], [0, 1]]\nq = [[1, 2], [3, 4]]\nprint('original matrix:')\nprint(p)\nprint(q)\nresult2 = np.cross(q, p)\nprint('cross product of the said two vectors(p, q):')\nprint(result1)\nprint('cross product of the said two vectors(q, p):')\nprint(result2)	result1	TBD2	ndarray
import pandas as pd\nprint('Original DataFrame with single index:')\nprint(df)\nprint('\\nDataFrame without index:')\nprint(df.to_string(index=False))	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def to_string(self, index=None):\n        return TBD1()\ndf = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Original DataFrame with single index:')\nprint(df)\nprint('\\nDataFrame without index:')\nprint(df.to_string(index=False))	df	TBD0	DataFrame
import pandas as pd\nimport re as re\npd.set_option('display.max_columns', 10)\nprint('Original DataFrame:')\nprint(df)\ndef test_num_great(text):\n    result = re.findall('95[5-9]|9[6-9]\\\\d|[1-9]\\\\d{3,}', text)\n    return ' '.join(result)\ndf['num_great'] = df['address'].apply(lambda x: test_num_great(x))\nprint('\\nNumber greater than 940:')\nprint(df)	class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def apply(self, arg0):\n        return TBD3()\ndf = {'address': TBD1()}\n__original_start_marker = None\nimport pandas as pd\nimport re as re\npd.set_option('display.max_columns', 10)\nprint('Original DataFrame:')\nprint(df)\n\ndef test_num_great(text):\n    result = re.findall('95[5-9]|9[6-9]\\\\d|[1-9]\\\\d{3,}', text)\n    return ' '.join(result)\ndf['num_great'] = df['address'].apply((lambda x: test_num_great(x)))\nprint('\\nNumber greater than 940:')\nprint(df)	df	TBD0	DataFrame
import pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nLength of sale_amount:')\ndf['sale_amount_length'] = df['sale_amount'].map(str).apply(len)\nprint(df)	class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def apply(self, arg0):\n        return TBD4()\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def map(self, arg0):\n        return TBD3()\ndf = {'sale_amount': TBD1()}\n__original_start_marker = None\nimport pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nLength of sale_amount:')\ndf['sale_amount_length'] = df['sale_amount'].map(str).apply(len)\nprint(df)	df	TBD0	DataFrame
import pandas as pd\nnums2 = pd.Series([1, 8, 7, 5, 6, 5, 3, 4, 7, 1])\nprint('Original Series:')\nprint(nums1)\nprint(nums2)\nprint('Check 2 series are equal or not?')\nprint(nums1 == nums2)	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnums1 = TBD1()\n__original_start_marker = None\nimport pandas as pd\nnums2 = pd.Series([1, 8, 7, 5, 6, 5, 3, 4, 7, 1])\nprint('Original Series:')\nprint(nums1)\nprint(nums2)\nprint('Check 2 series are equal or not?')\nprint((nums1 == nums2))	nums1	TBD1	Series
'import numpy as np\nprint(x)'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint(x)'	x	TBD0	ndarray
'import pandas as pd\nimport re as re\nprint(\'Original DataFrame:\')\nprint(df)\ndef find_capital_word(str1):\n    result = re.findall(\'\\\\b[A-Z]\\\\w+\', str1)\n    return result\ndf[\'caps_word_in\'] = df[\'address\'].apply(lambda cw: find_capital_word(cw))\nprint("\\nExtract words starting with capital words from the sentences\':")\nprint(df)'	'class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def apply(self, arg0):\n        return TBD3()\ndf = {\'address\': TBD1()}\n__original_start_marker = None\nimport pandas as pd\nimport re as re\nprint(\'Original DataFrame:\')\nprint(df)\n\ndef find_capital_word(str1):\n    result = re.findall(\'\\\\b[A-Z]\\\\w+\', str1)\n    return result\ndf[\'caps_word_in\'] = df[\'address\'].apply((lambda cw: find_capital_word(cw)))\nprint("\\nExtract words starting with capital words from the sentences\':")\nprint(df)'	df	TBD0	DataFrame
import pandas as pd\nnum_series = pd.Series(list('2390238923902390239023'))\nelement_pos = [0, 2, 6, 11, 21]\nprint('Original Series:')\nprint(num_series)\nprint('\\nExtract items at given positions of the said series:')\nprint(result)	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD1()\n__original_start_marker = None\nimport pandas as pd\nnum_series = pd.Series(list('2390238923902390239023'))\nelement_pos = [0, 2, 6, 11, 21]\nprint('Original Series:')\nprint(num_series)\nprint('\\nExtract items at given positions of the said series:')\nprint(result)	result	TBD1	Series
import pandas as pd\nprint('Sequences of fixed-frequency dates and time spans (1 H):\\n')\nr1 = pd.date_range('2030-01-01', periods=10, freq='H')\nprint(r1)\nprint('\\nSequences of fixed-frequency dates and time spans (3 H):\\n')\nprint(r2)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nr2 = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Sequences of fixed-frequency dates and time spans (1 H):\\n')\nr1 = pd.date_range('2030-01-01', periods=10, freq='H')\nprint(r1)\nprint('\\nSequences of fixed-frequency dates and time spans (3 H):\\n')\nprint(r2)	r2	TBD0	DatetimeIndex
import numpy as np\nimport pandas as pd\nchar_list = list('ABCDEFGHIJKLMNOP')\nnum_arra = np.arange(8)\nnum_dict = dict(zip(char_list, num_arra))\nnum_ser = pd.Series(num_dict)\nprint(df.head())	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def head(self):\n        return TBD1()\ndf = TBD0()\n__original_start_marker = None\nimport numpy as np\nimport pandas as pd\nchar_list = list('ABCDEFGHIJKLMNOP')\nnum_arra = np.arange(8)\nnum_dict = dict(zip(char_list, num_arra))\nnum_ser = pd.Series(num_dict)\nprint(df.head())	df	TBD0	DataFrame
import pandas as pd\nprint('First date:')\nprint(newday)\nprint('\\nThe day name of the said date:')\nprint(newday.day_name())\nprint('\\nAdd 2 days with the said date:')\nnewday1 = newday + pd.Timedelta('2 day')\nprint(newday1.day_name())\nprint('\\nNext business day:')\nnbday = newday + pd.offsets.BDay()\nprint(nbday.day_name())	class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def day_name(self):\n        return TBD3()\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def day_name(self):\n        return TBD1()\n\n    def __add__(self, other):\n        return TBD2()\nnewday = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('First date:')\nprint(newday)\nprint('\\nThe day name of the said date:')\nprint(newday.day_name())\nprint('\\nAdd 2 days with the said date:')\nnewday1 = (newday + pd.Timedelta('2 day'))\nprint(newday1.day_name())\nprint('\\nNext business day:')\nnbday = (newday + pd.offsets.BDay())\nprint(nbday.day_name())	newday	TBD0	Timestamp
'import numpy as np\nprint(x)\nx = np.array([[1, 2], [3, 4]])\nprint(np.repeat(x, 2))'	'class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = TBD1()\n__original_start_marker = None\nimport numpy as np\nprint(x)\nx = np.array([[1, 2], [3, 4]])\nprint(np.repeat(x, 2))'	x	TBD1	ndarray
'import numpy as np\nx = np.empty((3, 4))\nprint(x)\nprint(y)'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\ny = TBD0()\n__original_start_marker = None\nimport numpy as np\nx = np.empty((3, 4))\nprint(x)\nprint(y)'	y	TBD0	ndarray
import numpy as np\nx = np.array([[1, 2], [3, 4]])\ny = np.array([[1, 2], [1, 2]])\nprint('Array1: ')\nprint(x)\nprint('Array1: ')\nprint(y)\nprint('Result- x^y:')\nprint(r1)	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nr1 = TBD2()\n__original_start_marker = None\nimport numpy as np\nx = np.array([[1, 2], [3, 4]])\ny = np.array([[1, 2], [1, 2]])\nprint('Array1: ')\nprint(x)\nprint('Array1: ')\nprint(y)\nprint('Result- x^y:')\nprint(r1)	r1	TBD2	ndarray
import numpy as np\nprint('Array1: ', array1)\narray2 = [10, 30, 40, 50, 70]\nprint('Array2: ', array2)\nprint('Unique sorted array of values that are in either of the two input arrays:')\nprint(np.union1d(array1, array2))	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\narray1 = 0\n__original_start_marker = None\nimport numpy as np\nprint('Array1: ', array1)\narray2 = [10, 30, 40, 50, 70]\nprint('Array2: ', array2)\nprint('Unique sorted array of values that are in either of the two input arrays:')\nprint(np.union1d(array1, array2))	array1	TBD1	ndarray
'import pandas as pd\npd.set_option(\'display.max_rows\', None)\nprint(\'Original Orders DataFrame:\')\nprint(df)\nprint("\\nSplit the said data on \'salesman_id\', \'customer_id\' wise:")\nresult = df.groupby([\'salesman_id\', \'customer_id\'])\nfor name, group in result:\n    print(\'\\nGroup:\')\n    print(name)\n    print(group)\nn = 2\nprint(\'\\nDroping last two records:\')\nresult1 = df.drop(df.groupby([\'salesman_id\', \'customer_id\']).tail(n).index, axis=0)\nprint(result1)'	'class TBD6():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD5():\n\n    def __init__(self, *args, **kwargs):\n        self.index = TBD6()\n        pass\n\nclass TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD3():\n\n    def __init__(self):\n        self.container = {}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = \'\'\n        ret_str += \'[ \'\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += \', \'\n        ret_str += \' ]\'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print(\'[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]\'.format(type(self).__name__, key, \'TBD\'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print(\'[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]\'.format(type(self).__name__, type(key).__name__, \'TBD\'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n\n    def tail(self, arg0):\n        return TBD5()\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def groupby(self, arg0):\n        return TBD3()\n\n    def drop(self, arg0, axis=None):\n        return TBD4()\ndf = TBD2()\n__original_start_marker = None\nimport pandas as pd\npd.set_option(\'display.max_rows\', None)\nprint(\'Original Orders DataFrame:\')\nprint(df)\nprint("\\nSplit the said data on \'salesman_id\', \'customer_id\' wise:")\nresult = df.groupby([\'salesman_id\', \'customer_id\'])\nfor (name, group) in result:\n    print(\'\\nGroup:\')\n    print(name)\n    print(group)\nn = 2\nprint(\'\\nDroping last two records:\')\nresult1 = df.drop(df.groupby([\'salesman_id\', \'customer_id\']).tail(n).index, axis=0)\nprint(result1)'	df	TBD2	DataFrame
import numpy as np\nprint('Original array:')\nprint(arra_data)\nprint('\\nExtracted data: First element of the second row and fourth element of fourth row  ')\nprint(arra_data[[1, 3], [0, 3]])	class TBD2():\n\n    def __init__(self):\n        self.container = {'tuple': tuple()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\narra_data = TBD2()\n\nclass TBD1():\n\n    def __init__(self):\n        self.container = {0: 0, 1: 3}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n\nclass TBD0():\n\n    def __init__(self):\n        self.container = {0: 1, 1: 3}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n__original_start_marker = None\nimport numpy as np\nprint('Original array:')\nprint(arra_data)\nprint('\\nExtracted data: First element of the second row and fourth element of fourth row  ')\nprint(arra_data[(TBD0(), TBD1())])	arra_data	TBD2	ndarray
import numpy as np\nprint('Original array:')\nprint(nums)\nprint(np.count_nonzero(nums == 10))\nprint(np.count_nonzero(nums == 20))\nprint(np.count_nonzero(nums == 30))\nprint(np.count_nonzero(nums == 0))	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnums = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Original array:')\nprint(nums)\nprint(np.count_nonzero((nums == 10)))\nprint(np.count_nonzero((nums == 20)))\nprint(np.count_nonzero((nums == 30)))\nprint(np.count_nonzero((nums == 0)))	nums	TBD0	ndarray
import numpy as np\np = [[1, 0], [0, 1]]\nq = [[1, 2], [3, 4]]\nprint('original matrix:')\nprint(p)\nprint(q)\nresult1 = np.cross(p, q)\nprint('cross product of the said two vectors(p, q):')\nprint(result1)\nprint('cross product of the said two vectors(q, p):')\nprint(result2)	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult2 = TBD2()\n__original_start_marker = None\nimport numpy as np\np = [[1, 0], [0, 1]]\nq = [[1, 2], [3, 4]]\nprint('original matrix:')\nprint(p)\nprint(q)\nresult1 = np.cross(p, q)\nprint('cross product of the said two vectors(p, q):')\nprint(result1)\nprint('cross product of the said two vectors(q, p):')\nprint(result2)	result2	TBD2	ndarray
import numpy as np\narra = np.ones((1, 8, 8))\nprint('Original array:')\nprint(arra)\nprint('\\nResult:')\nprint(result)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD0()\n__original_start_marker = None\nimport numpy as np\narra = np.ones((1, 8, 8))\nprint('Original array:')\nprint(arra)\nprint('\\nResult:')\nprint(result)	result	TBD0	ndarray
import numpy as np\nprint('\\nOriginal arrays:')\nx = np.arange(9).reshape(3, 3)\ny = x * 3\nprint('Array-1')\nprint(x)\nprint('Array-2')\nprint(y)\nprint('\\nStack arrays in sequence horizontally:')\nprint(new_array)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnew_array = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('\\nOriginal arrays:')\nx = np.arange(9).reshape(3, 3)\ny = (x * 3)\nprint('Array-1')\nprint(x)\nprint('Array-2')\nprint(y)\nprint('\\nStack arrays in sequence horizontally:')\nprint(new_array)	new_array	TBD0	ndarray
import pandas as pd\ndateset1 = pd.date_range('2029-01-01 00:00:00', periods=20, freq='3h10min')\nprint('Time series with frequency 3h10min:')\nprint(dateset1)\nprint('\\nTime series with frequency 1 day 10 minutes and 20 microseconds:')\nprint(dateset2)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\ndateset2 = TBD0()\n__original_start_marker = None\nimport pandas as pd\ndateset1 = pd.date_range('2029-01-01 00:00:00', periods=20, freq='3h10min')\nprint('Time series with frequency 3h10min:')\nprint(dateset1)\nprint('\\nTime series with frequency 1 day 10 minutes and 20 microseconds:')\nprint(dateset2)	dateset2	TBD0	DatetimeIndex
import pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nReplace the missing values with the most frequent values present in each column:')\nresult = df.fillna(df.mode().iloc[0])\nprint(result)	class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        self.iloc = [TBD4()]\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def fillna(self, arg0):\n        return TBD1()\n\n    def mode(self):\n        return TBD2()\ndf = TBD0()\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nReplace the missing values with the most frequent values present in each column:')\nresult = df.fillna(df.mode().iloc[0])\nprint(result)	df	TBD0	DataFrame
import pandas as pd\nprint('Original Series:')\nprint(series1)\nresult = series1.map(lambda x: len(x))\nprint('\\nNumber of characters in each word in the said series:')\nprint(result)	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def map(self, arg0):\n        return TBD1()\nseries1 = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Original Series:')\nprint(series1)\nresult = series1.map((lambda x: len(x)))\nprint('\\nNumber of characters in each word in the said series:')\nprint(result)	series1	TBD0	Series
import numpy as np\nx = np.array([1.0, 2.0, 0.2, 0.3])\nprint('Original array: ')\nprint(x)\nr1 = np.reciprocal(x)\nassert np.array_equal(r1, r2)\nprint('Reciprocal for all elements of the said array:')\nprint(r1)	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nr2 = TBD1()\n__original_start_marker = None\nimport numpy as np\nx = np.array([1.0, 2.0, 0.2, 0.3])\nprint('Original array: ')\nprint(x)\nr1 = np.reciprocal(x)\nassert np.array_equal(r1, r2)\nprint('Reciprocal for all elements of the said array:')\nprint(r1)	r2	TBD1	ndarray
import pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('Count unique values:')\nprint(df.groupby('value')['id'].nunique())	class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def nunique(self):\n        return TBD4()\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def groupby(self, arg0):\n        return {'id': TBD2()}\ndf = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('Count unique values:')\nprint(df.groupby('value')['id'].nunique())	df	TBD0	DataFrame
import pandas as pd\nimport numpy as np\nsales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'], ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]\nsales_tuples = list(zip(*sales_arrays))\nsales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])\nprint(sales_tuples)\nprint('\\nConstruct a Dataframe using the said MultiIndex levels: ')\nprint(df)\nprint('\\nExtract a single row from the said dataframe:')\nprint(df.loc['sale2', 'city2'])\nprint('\\nExtract a single row from the said dataframe:')\nprint(df.loc['sale2', 'city2'])\nprint('\\nExtract number of rows from the said dataframe:')\nprint(df.loc['sale1'])\nprint('\\nExtract number of rows from the said dataframe:')\nprint(df.loc['sale3'])\nprint('\\nExtract a single value from the said dataframe:')\nprint(df.loc[('sale1', 'city2'), 1])\nprint('\\nExtract a single value from the said dataframe:')\nprint(df.loc[('sale4', 'city1'), 4])	class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD3():\n\n    def __init__(self):\n        self.container = {'sale1': TBD4(), 'tuple': tuple()}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        self.loc = TBD3()\n        pass\ndf = TBD2()\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\nsales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'], ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]\nsales_tuples = list(zip(*sales_arrays))\nsales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])\nprint(sales_tuples)\nprint('\\nConstruct a Dataframe using the said MultiIndex levels: ')\nprint(df)\nprint('\\nExtract a single row from the said dataframe:')\nprint(df.loc[('sale2', 'city2')])\nprint('\\nExtract a single row from the said dataframe:')\nprint(df.loc[('sale2', 'city2')])\nprint('\\nExtract number of rows from the said dataframe:')\nprint(df.loc['sale1'])\nprint('\\nExtract number of rows from the said dataframe:')\nprint(df.loc['sale3'])\nprint('\\nExtract a single value from the said dataframe:')\nprint(df.loc[(('sale1', 'city2'), 1)])\nprint('\\nExtract a single value from the said dataframe:')\nprint(df.loc[(('sale4', 'city1'), 4)])	df	TBD2	DataFrame
'import numpy as np\nprint(x)'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint(x)'	x	TBD0	ndarray
import pandas as pd\nimport numpy as np\nsales_arrays = [['sale1', 'sale1', 'sale3', 'sale3', 'sale2', 'sale2', 'sale4', 'sale4'], ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]\nsales_tuples = list(zip(*sales_arrays))\nsales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])\nprint(sales_tuples)\nprint('\\nConstruct a Dataframe using the said MultiIndex levels: ')\ndf = pd.DataFrame(np.random.randn(8, 5), index=sales_index)\nprint(df)\nprint('\\nSort on MultiIndex DataFrame:')\ndf1 = df.sort_index()\nprint('\\nSort on Index level=0 of the DataFrame:')\ndf2 = df.sort_index(level=0)\nprint(df2)\nprint('\\nSort on Index level=1 of the DataFrame:')\ndf2 = df.sort_index(level=1)\nprint(df2)\nprint('\\nPass a level name to sort the DataFrame:')\nprint(df3)	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\ndf3 = TBD2()\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\nsales_arrays = [['sale1', 'sale1', 'sale3', 'sale3', 'sale2', 'sale2', 'sale4', 'sale4'], ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]\nsales_tuples = list(zip(*sales_arrays))\nsales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])\nprint(sales_tuples)\nprint('\\nConstruct a Dataframe using the said MultiIndex levels: ')\ndf = pd.DataFrame(np.random.randn(8, 5), index=sales_index)\nprint(df)\nprint('\\nSort on MultiIndex DataFrame:')\ndf1 = df.sort_index()\nprint('\\nSort on Index level=0 of the DataFrame:')\ndf2 = df.sort_index(level=0)\nprint(df2)\nprint('\\nSort on Index level=1 of the DataFrame:')\ndf2 = df.sort_index(level=1)\nprint(df2)\nprint('\\nPass a level name to sort the DataFrame:')\nprint(df3)	df3	TBD2	DataFrame
import pandas as pd\npd.set_option('display.max_rows', None)\nprint('Original DataFrame:')\nprint(df)\nprint('\\nGroup by with multiple aggregations:')\nresult = df.groupby(['school_code', 'class']).agg({'height': ['max', 'mean'], 'weight': ['sum', 'min', 'count']})\nprint(result)	class TBD6():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD5():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def agg(self, arg0):\n        return TBD6()\n\nclass TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def groupby(self, arg0):\n        return TBD5()\ndf = TBD4()\n__original_start_marker = None\nimport pandas as pd\npd.set_option('display.max_rows', None)\nprint('Original DataFrame:')\nprint(df)\nprint('\\nGroup by with multiple aggregations:')\nresult = df.groupby(['school_code', 'class']).agg({'height': ['max', 'mean'], 'weight': ['sum', 'min', 'count']})\nprint(result)	df	TBD4	DataFrame
'import numpy as np\na = np.random.random((10, 2))\nx, y = np.atleast_2d(a[:, 0], a[:, 1])\nprint(d)'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nd = TBD0()\n__original_start_marker = None\nimport numpy as np\na = np.random.random((10, 2))\n(x, y) = np.atleast_2d(a[(:, 0)], a[(:, 1)])\nprint(d)'	d	TBD0	ndarray
'import numpy as np\nimport sys\nnp.set_printoptions(threshold=sys.maxsize)\nprint(nums)'	'class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnums = TBD0()\n__original_start_marker = None\nimport numpy as np\nimport sys\nnp.set_printoptions(threshold=sys.maxsize)\nprint(nums)'	nums	TBD0	ndarray
import pandas as pd\nnewday = pd.Timestamp('2020-02-07')\nprint('First date:')\nprint(newday)\nprint('\\nThe day name of the said date:')\nprint(newday.day_name())\nprint('\\nAdd 2 days with the said date:')\nprint(newday1.day_name())\nprint('\\nNext business day:')\nnbday = newday + pd.offsets.BDay()\nprint(nbday.day_name())	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def day_name(self):\n        return TBD1()\nnewday1 = TBD0()\n__original_start_marker = None\nimport pandas as pd\nnewday = pd.Timestamp('2020-02-07')\nprint('First date:')\nprint(newday)\nprint('\\nThe day name of the said date:')\nprint(newday.day_name())\nprint('\\nAdd 2 days with the said date:')\nprint(newday1.day_name())\nprint('\\nNext business day:')\nnbday = (newday + pd.offsets.BDay())\nprint(nbday.day_name())	newday1	TBD0	Timestamp
'import pandas as pd\npd.set_option(\'display.max_rows\', None)\ndf = pd.DataFrame({\'ord_no\': [70001, 70009, 70002, 70004, 70007, 70005, 70008, 70010, 70003, 70012, 70011, 70013], \'purch_amt\': [150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6], \'ord_date\': [\'2012-10-05\', \'2012-09-10\', \'2012-10-05\', \'2012-08-17\', \'2012-09-10\', \'2012-07-27\', \'2012-09-10\', \'2012-10-10\', \'2012-10-10\', \'2012-06-27\', \'2012-08-17\', \'2012-04-25\'], \'customer_id\': [3001, 3001, 3005, 3001, 3005, 3001, 3005, 3001, 3005, 3001, 3005, 3005], \'salesman_id\': [5002, 5005, 5001, 5003, 5002, 5001, 5001, 5006, 5003, 5002, 5007, 5001]})\nprint(\'Original Orders DataFrame:\')\nprint(df)\nresult = df_agg[\'purch_amt\'].groupby(level=0, group_keys=False)\nprint("\\nGroup on \'customer_id\', \'salesman_id\' and then sort sum of purch_amt within the groups:")\nprint(result.nlargest())'	'class TBD10():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD9():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def nlargest(self):\n        return TBD10()\n\nclass TBD7():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def groupby(self, level=None, group_keys=None):\n        return TBD9()\ndf_agg = {\'purch_amt\': TBD7()}\n__original_start_marker = None\nimport pandas as pd\npd.set_option(\'display.max_rows\', None)\ndf = pd.DataFrame({\'ord_no\': [70001, 70009, 70002, 70004, 70007, 70005, 70008, 70010, 70003, 70012, 70011, 70013], \'purch_amt\': [150.5, 270.65, 65.26, 110.5, 948.5, 2400.6, 5760, 1983.43, 2480.4, 250.45, 75.29, 3045.6], \'ord_date\': [\'2012-10-05\', \'2012-09-10\', \'2012-10-05\', \'2012-08-17\', \'2012-09-10\', \'2012-07-27\', \'2012-09-10\', \'2012-10-10\', \'2012-10-10\', \'2012-06-27\', \'2012-08-17\', \'2012-04-25\'], \'customer_id\': [3001, 3001, 3005, 3001, 3005, 3001, 3005, 3001, 3005, 3001, 3005, 3005], \'salesman_id\': [5002, 5005, 5001, 5003, 5002, 5001, 5001, 5006, 5003, 5002, 5007, 5001]})\nprint(\'Original Orders DataFrame:\')\nprint(df)\nresult = df_agg[\'purch_amt\'].groupby(level=0, group_keys=False)\nprint("\\nGroup on \'customer_id\', \'salesman_id\' and then sort sum of purch_amt within the groups:")\nprint(result.nlargest())'	df_agg	TBD6	DataFrame
import numpy as np\nprint('Original arrays:')\nprint(x)\nnew_array = np.transpose(x)\nprint('After reverse the dimensions:')\nprint(new_array)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Original arrays:')\nprint(x)\nnew_array = np.transpose(x)\nprint('After reverse the dimensions:')\nprint(new_array)	x	TBD0	ndarray
import numpy as np\nimport pandas as pd\nchar_list = list('ABCDEFGHIJKLMNOP')\nnum_dict = dict(zip(char_list, num_arra))\nnum_ser = pd.Series(num_dict)\ndf = num_ser.to_frame().reset_index()\nprint(df.head())	num_arra = {}\n__original_start_marker = None\nimport numpy as np\nimport pandas as pd\nchar_list = list('ABCDEFGHIJKLMNOP')\nnum_dict = dict(zip(char_list, num_arra))\nnum_ser = pd.Series(num_dict)\ndf = num_ser.to_frame().reset_index()\nprint(df.head())	num_arra	TBD0	ndarray
import numpy as np\nx = np.array([0, 1, -1])\nprint('Original array: ')\nprint(x)\nr2 = -x\nassert np.array_equal(r1, r2)\nprint('Numerical negative value for all elements of the said array:')\nprint(r1)	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nr1 = TBD1()\n__original_start_marker = None\nimport numpy as np\nx = np.array([0, 1, (- 1)])\nprint('Original array: ')\nprint(x)\nr2 = (- x)\nassert np.array_equal(r1, r2)\nprint('Numerical negative value for all elements of the said array:')\nprint(r1)	r1	TBD1	ndarray
import numpy as np\na = np.array([[4, 6], [2, 1]])\nprint('Original array: ')\nprint(a)\nprint('Sort along the first axis: ')\nx = np.sort(a, axis=0)\nprint(x)\nprint('Sort along the last axis: ')\nprint(y)	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\ny = TBD1()\n__original_start_marker = None\nimport numpy as np\na = np.array([[4, 6], [2, 1]])\nprint('Original array: ')\nprint(a)\nprint('Sort along the first axis: ')\nx = np.sort(a, axis=0)\nprint(x)\nprint('Sort along the last axis: ')\nprint(y)	y	TBD1	ndarray
'import datetime\nprint(now)\nyear = lambda x: x.year\nmonth = lambda x: x.month\nday = lambda x: x.day\nt = lambda x: x.time()\nprint(year(now))\nprint(month(now))\nprint(day(now))\nprint(t(now))'	'class TBD4():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def year(self, arg0):\n        return TBD1()\n\n    def month(self, arg0):\n        return TBD2()\n\n    def day(self, arg0):\n        return TBD3()\n\n    def time(self):\n        return TBD4()\nnow = TBD0()\n__original_start_marker = None\nimport datetime\nprint(now)\nyear = (lambda x: x.year)\nmonth = (lambda x: x.month)\nday = (lambda x: x.day)\nt = (lambda x: x.time())\nprint(year(now))\nprint(month(now))\nprint(day(now))\nprint(t(now))'	now	TBD0	datetime
import numpy as np\nnums2 = np.array([[5, 3, 4], [3, 2, 5]])\nprint('Array1:')\nprint(nums1)\nprint('Array2:')\nprint(nums2)\nprint('\\nMultiply said arrays of same size element-by-element:')\nprint(np.multiply(nums1, nums2))	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnums1 = 0\n__original_start_marker = None\nimport numpy as np\nnums2 = np.array([[5, 3, 4], [3, 2, 5]])\nprint('Array1:')\nprint(nums1)\nprint('Array2:')\nprint(nums2)\nprint('\\nMultiply said arrays of same size element-by-element:')\nprint(np.multiply(nums1, nums2))	nums1	TBD1	ndarray
import pandas as pd\nprint('All Sundays of 2019:')\nprint(result)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('All Sundays of 2019:')\nprint(result)	result	TBD0	Series
import pandas as pd\nimport numpy as np\nsales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'], ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]\nsales_tuples = list(zip(*sales_arrays))\nprint('Create a MultiIndex:')\nsales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])\nprint(sales_tuples)\nprint('\\nConstruct a Dataframe using the said MultiIndex levels: ')\nprint(df)	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\ndf = TBD2()\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\nsales_arrays = [['sale1', 'sale1', 'sale2', 'sale2', 'sale3', 'sale3', 'sale4', 'sale4'], ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]\nsales_tuples = list(zip(*sales_arrays))\nprint('Create a MultiIndex:')\nsales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])\nprint(sales_tuples)\nprint('\\nConstruct a Dataframe using the said MultiIndex levels: ')\nprint(df)	df	TBD2	DataFrame
import numpy as np\nx = np.array([0, 1, -1])\nprint('Original array: ')\nprint(x)\nr1 = np.negative(x)\nassert np.array_equal(r1, r2)\nprint('Numerical negative value for all elements of the said array:')\nprint(r1)	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nr2 = TBD1()\n__original_start_marker = None\nimport numpy as np\nx = np.array([0, 1, (- 1)])\nprint('Original array: ')\nprint(x)\nr1 = np.negative(x)\nassert np.array_equal(r1, r2)\nprint('Numerical negative value for all elements of the said array:')\nprint(r1)	r2	TBD1	ndarray
import numpy as np\nimport pandas as pd\nchar_list = list('ABCDEFGHIJKLMNOP')\nnum_arra = np.arange(8)\nnum_dict = dict(zip(char_list, num_arra))\ndf = num_ser.to_frame().reset_index()\nprint(df.head())	class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def head(self):\n        return TBD3()\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def reset_index(self):\n        return TBD2()\n\nclass TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def to_frame(self):\n        return TBD1()\nnum_ser = TBD0()\n__original_start_marker = None\nimport numpy as np\nimport pandas as pd\nchar_list = list('ABCDEFGHIJKLMNOP')\nnum_arra = np.arange(8)\nnum_dict = dict(zip(char_list, num_arra))\ndf = num_ser.to_frame().reset_index()\nprint(df.head())	num_ser	TBD0	Series
import pandas as pd\nelement_pos = [0, 2, 6, 11, 21]\nprint('Original Series:')\nprint(num_series)\nresult = num_series.take(element_pos)\nprint('\\nExtract items at given positions of the said series:')\nprint(result)	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def take(self, arg0):\n        return TBD2()\nnum_series = TBD1()\n__original_start_marker = None\nimport pandas as pd\nelement_pos = [0, 2, 6, 11, 21]\nprint('Original Series:')\nprint(num_series)\nresult = num_series.take(element_pos)\nprint('\\nExtract items at given positions of the said series:')\nprint(result)	num_series	TBD1	Series
import numpy as np\nx = np.arange(24).reshape((6, 4))\nprint('Original arrays:')\nprint(x)\nprint('After reverse the dimensions:')\nprint(new_array)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnew_array = TBD0()\n__original_start_marker = None\nimport numpy as np\nx = np.arange(24).reshape((6, 4))\nprint('Original arrays:')\nprint(x)\nprint('After reverse the dimensions:')\nprint(new_array)	new_array	TBD0	ndarray
import numpy as np\nnums = np.random.random((8, 8, 3))\nprint('Original array:')\nprint(nums)\nprint('\\nExtract array of shape (6,6,3) from the said array:')\nprint(new_nums)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnew_nums = TBD0()\n__original_start_marker = None\nimport numpy as np\nnums = np.random.random((8, 8, 3))\nprint('Original array:')\nprint(nums)\nprint('\\nExtract array of shape (6,6,3) from the said array:')\nprint(new_nums)	new_nums	TBD0	ndarray
import pandas as pd\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\nprint('Original DataFrame:')\nprint(df)\ndict_data_list = list()\nfor gg, dd in df.groupby(['school_code', 'class']):\n    group = dict(zip(['school_code', 'class'], gg))\n    ocolumns_list = list()\n    for _, data in dd.iterrows():\n        data = data.drop(labels=['school_code', 'class'])\n        ocolumns_list.append(data.to_dict())\n    group['other_columns'] = ocolumns_list\n    dict_data_list.append(group)\nprint(dict_data_list)	class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def groupby(self, arg0):\n        return {}\ndf = TBD3()\n__original_start_marker = None\nimport pandas as pd\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\nprint('Original DataFrame:')\nprint(df)\ndict_data_list = list()\nfor (gg, dd) in df.groupby(['school_code', 'class']):\n    group = dict(zip(['school_code', 'class'], gg))\n    ocolumns_list = list()\n    for (_, data) in dd.iterrows():\n        data = data.drop(labels=['school_code', 'class'])\n        ocolumns_list.append(data.to_dict())\n    group['other_columns'] = ocolumns_list\n    dict_data_list.append(group)\nprint(dict_data_list)	df	TBD3	DataFrame
import pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nLength of the string in a column:')\ndf['company_code_length'] = df['company_code'].apply(len)\nprint(df)	class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def apply(self, arg0):\n        return TBD3()\ndf = {'company_code': TBD1()}\n__original_start_marker = None\nimport pandas as pd\nprint('Original DataFrame:')\nprint(df)\nprint('\\nLength of the string in a column:')\ndf['company_code_length'] = df['company_code'].apply(len)\nprint(df)	df	TBD0	DataFrame
import numpy as np\nnums1 = np.array([[2, 5, 2], [1, 5, 5]])\nprint('Array1:')\nprint(nums1)\nprint('Array2:')\nprint(nums2)\nprint('\\nMultiply said arrays of same size element-by-element:')\nprint(np.multiply(nums1, nums2))	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\nnums2 = 0\n__original_start_marker = None\nimport numpy as np\nnums1 = np.array([[2, 5, 2], [1, 5, 5]])\nprint('Array1:')\nprint(nums1)\nprint('Array2:')\nprint(nums2)\nprint('\\nMultiply said arrays of same size element-by-element:')\nprint(np.multiply(nums1, nums2))	nums2	TBD1	ndarray
import pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\ndf = pd.DataFrame({'ord_no': [70001, np.nan, 70002, 70004, np.nan, 70005, np.nan, 70010, 70003, 70012, np.nan, 70013], 'purch_amt': [150.5, np.nan, 65.26, 110.5, 948.5, np.nan, 5760, 1983.43, np.nan, 250.45, 75.29, 3045.6], 'sale_amt': [10.5, 20.65, np.nan, 11.5, 98.5, np.nan, 57, 19.43, np.nan, 25.45, 75.29, 35.6], 'ord_date': ['2012-10-05', '2012-09-10', np.nan, '2012-08-17', '2012-09-10', '2012-07-27', '2012-09-10', '2012-10-10', '2012-10-10', '2012-06-27', '2012-08-17', '2012-04-25'], 'customer_id': [3002, 3001, 3001, 3003, 3002, 3001, 3001, 3004, 3003, 3002, 3001, 3001], 'salesman_id': [5002, 5003, 5001, np.nan, 5002, 5001, 5001, np.nan, 5003, 5002, 5003, np.nan]})\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nReplace the missing values with the most frequent values present in each column:')\nprint(result)	class TBD7():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD7()\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\ndf = pd.DataFrame({'ord_no': [70001, np.nan, 70002, 70004, np.nan, 70005, np.nan, 70010, 70003, 70012, np.nan, 70013], 'purch_amt': [150.5, np.nan, 65.26, 110.5, 948.5, np.nan, 5760, 1983.43, np.nan, 250.45, 75.29, 3045.6], 'sale_amt': [10.5, 20.65, np.nan, 11.5, 98.5, np.nan, 57, 19.43, np.nan, 25.45, 75.29, 35.6], 'ord_date': ['2012-10-05', '2012-09-10', np.nan, '2012-08-17', '2012-09-10', '2012-07-27', '2012-09-10', '2012-10-10', '2012-10-10', '2012-06-27', '2012-08-17', '2012-04-25'], 'customer_id': [3002, 3001, 3001, 3003, 3002, 3001, 3001, 3004, 3003, 3002, 3001, 3001], 'salesman_id': [5002, 5003, 5001, np.nan, 5002, 5001, 5001, np.nan, 5003, 5002, 5003, np.nan]})\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nReplace the missing values with the most frequent values present in each column:')\nprint(result)	result	TBD7	DataFrame
import pandas as pd\nprint('Time series with frequency 3h10min:')\nprint(dateset1)\ndateset2 = pd.date_range('2029-01-01 00:00:00', periods=20, freq='1D10min20U')\nprint('\\nTime series with frequency 1 day 10 minutes and 20 microseconds:')\nprint(dateset2)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\ndateset1 = TBD0()\n__original_start_marker = None\nimport pandas as pd\nprint('Time series with frequency 3h10min:')\nprint(dateset1)\ndateset2 = pd.date_range('2029-01-01 00:00:00', periods=20, freq='1D10min20U')\nprint('\\nTime series with frequency 1 day 10 minutes and 20 microseconds:')\nprint(dateset2)	dateset1	TBD0	DatetimeIndex
import numpy as np\nprint('\\nOriginal arrays:')\ny = x * 3\nprint('Array-1')\nprint(x)\nprint('Array-2')\nprint(y)\nnew_array = np.hstack((x, y))\nprint('\\nStack arrays in sequence horizontally:')\nprint(new_array)	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = 0\n__original_start_marker = None\nimport numpy as np\nprint('\\nOriginal arrays:')\ny = (x * 3)\nprint('Array-1')\nprint(x)\nprint('Array-2')\nprint(y)\nnew_array = np.hstack((x, y))\nprint('\\nStack arrays in sequence horizontally:')\nprint(new_array)	x	TBD0	ndarray
import numpy as np\nimport numpy as np\nprint('Original array:')\nprint(x)\nprint('Reverse array:')\nx = x[::-1]\nprint(x)	class TBD0():\n\n    def __init__(self):\n        self.container = {}\n        self.keys = list(self.container.keys())\n        self.iter_current = 0\n\n    def __refresh_keys(self):\n        self.keys = list(self.container.keys())\n        for key in self.keys:\n            if (not isinstance(key, int)):\n                return\n        sorted(self.keys)\n\n    def __str__(self):\n        self.__refresh_keys()\n        ret_str = ''\n        ret_str += '[ '\n        for (idx, (key, val)) in enumerate(self.container.items()):\n            ret_str += str(val)\n            if (idx < (len(self.keys) - 1)):\n                ret_str += ', '\n        ret_str += ' ]'\n        return ret_str\n\n    def __getitem__(self, key):\n        self.__refresh_keys()\n        ret_val = None\n        if isinstance(key, slice):\n            list_to_return = []\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                if ((start * (- 1)) > len(self.keys)):\n                    diff = ((start * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                start = self.keys[start]\n            if (stop < 0):\n                if ((stop * (- 1)) > len(self.keys)):\n                    diff = ((stop * (- 1)) - len(self.keys))\n                    if (len(self.keys) > 0):\n                        for i in range(max(self.keys), ((max(self.keys) + diff) + 1)):\n                            self.container[i] = 0\n                    else:\n                        for i in range(0, (diff + 1)):\n                            self.container[i] = 0\n                self.__refresh_keys()\n                stop = self.keys[stop]\n            for i in range(start, stop, step):\n                list_to_return.append(self.container[i])\n            ret_val = list_to_return\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            ret_val = self.container[key]\n        elif isinstance(key, str):\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD STR-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, key, 'TBD'))\n            ret_val = self.container[key]\n        else:\n            if (key not in self.container.keys()):\n                self.container[key] = key\n                print('[FROM INNER-WORLD], [ADD OBJ-KEY], [TGT {}], [ADDING (KEY, VALUE): ({}, {})]'.format(type(self).__name__, type(key).__name__, 'TBD'))\n            ret_val = self.container[key]\n        return ret_val\n\n    def __setitem__(self, key, val):\n        self.__refresh_keys()\n        if isinstance(key, slice):\n            start = (key.start or 0)\n            stop = (key.stop or len(self.container))\n            step = (key.step or 1)\n            if (start < 0):\n                start = self.keys[start]\n            if (stop < 0):\n                stop = self.keys[stop]\n            for i in range(0, stop, step):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            for i in range(start, stop, step):\n                self.container[i] = val\n            return True\n        elif isinstance(key, int):\n            if (key < 0):\n                key = self.keys[key]\n            for i in range(0, key):\n                if (i not in self.keys):\n                    self.container[i] = 0\n            self.container[key] = val\n            return True\n        elif isinstance(key, str):\n            self.container[key] = val\n            return True\n        self.__refresh_keys()\n        return False\n\n    def __iter__(self):\n        return iter(self.container.values())\n\n    def __len__(self):\n        return len(self.keys)\nx = TBD0()\n__original_start_marker = None\nimport numpy as np\nimport numpy as np\nprint('Original array:')\nprint(x)\nprint('Reverse array:')\nx = x[::(- 1)]\nprint(x)	x	TBD0	ndarray
import pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nInterpolate the missing values using the Linear Interpolation method (purch_amt):')\ndf['purch_amt'].interpolate(method='linear', direction='forward', inplace=True)\nprint(df)	class TBD3():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\nclass TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def interpolate(self, method=None, direction=None, inplace=None):\n        return TBD3()\ndf = {'purch_amt': TBD1()}\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\npd.set_option('display.max_rows', None)\nprint('Original Orders DataFrame:')\nprint(df)\nprint('\\nInterpolate the missing values using the Linear Interpolation method (purch_amt):')\ndf['purch_amt'].interpolate(method='linear', direction='forward', inplace=True)\nprint(df)	df	TBD0	DataFrame
import numpy as np\nx = np.array([1.0, 2.0, 0.2, 0.3])\nprint('Original array: ')\nprint(x)\nr2 = 1 / x\nassert np.array_equal(r1, r2)\nprint('Reciprocal for all elements of the said array:')\nprint(r1)	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nr1 = TBD1()\n__original_start_marker = None\nimport numpy as np\nx = np.array([1.0, 2.0, 0.2, 0.3])\nprint('Original array: ')\nprint(x)\nr2 = (1 / x)\nassert np.array_equal(r1, r2)\nprint('Reciprocal for all elements of the said array:')\nprint(r1)	r1	TBD1	ndarray
import pandas as pd\nseries1 = pd.Series(['Php', 'Python', 'Java', 'C#'])\nprint('Original Series:')\nprint(series1)\nprint('\\nNumber of characters in each word in the said series:')\nprint(result)	class TBD1():\n\n    def __init__(self, *args, **kwargs):\n        pass\nresult = TBD1()\n__original_start_marker = None\nimport pandas as pd\nseries1 = pd.Series(['Php', 'Python', 'Java', 'C#'])\nprint('Original Series:')\nprint(series1)\nprint('\\nNumber of characters in each word in the said series:')\nprint(result)	result	TBD1	Series
import pandas as pd\nimport numpy as np\nsales_arrays = [['sale1', 'sale1', 'sale3', 'sale3', 'sale2', 'sale2', 'sale4', 'sale4'], ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]\nsales_tuples = list(zip(*sales_arrays))\nsales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])\nprint(sales_tuples)\nprint('\\nConstruct a Dataframe using the said MultiIndex levels: ')\ndf = pd.DataFrame(np.random.randn(8, 5), index=sales_index)\nprint(df)\nprint('\\nSort on MultiIndex DataFrame:')\ndf1 = df.sort_index()\nprint('\\nSort on Index level=0 of the DataFrame:')\nprint(df2)\nprint('\\nSort on Index level=1 of the DataFrame:')\ndf2 = df.sort_index(level=1)\nprint(df2)\nprint('\\nPass a level name to sort the DataFrame:')\ndf3 = df.sort_index(level='city')\nprint(df3)	class TBD2():\n\n    def __init__(self, *args, **kwargs):\n        pass\ndf2 = TBD2()\n__original_start_marker = None\nimport pandas as pd\nimport numpy as np\nsales_arrays = [['sale1', 'sale1', 'sale3', 'sale3', 'sale2', 'sale2', 'sale4', 'sale4'], ['city1', 'city2', 'city1', 'city2', 'city1', 'city2', 'city1', 'city2']]\nsales_tuples = list(zip(*sales_arrays))\nsales_index = pd.MultiIndex.from_tuples(sales_tuples, names=['sale', 'city'])\nprint(sales_tuples)\nprint('\\nConstruct a Dataframe using the said MultiIndex levels: ')\ndf = pd.DataFrame(np.random.randn(8, 5), index=sales_index)\nprint(df)\nprint('\\nSort on MultiIndex DataFrame:')\ndf1 = df.sort_index()\nprint('\\nSort on Index level=0 of the DataFrame:')\nprint(df2)\nprint('\\nSort on Index level=1 of the DataFrame:')\ndf2 = df.sort_index(level=1)\nprint(df2)\nprint('\\nPass a level name to sort the DataFrame:')\ndf3 = df.sort_index(level='city')\nprint(df3)	df2	TBD2	DataFrame
import numpy as np\nprint('Original array elements:')\nprint(x)\nprint('Print array values with precision 3:')\nnp.set_printoptions(suppress=True)\nprint(x)	class TBD0():\n\n    def __init__(self, *args, **kwargs):\n        pass\nx = TBD0()\n__original_start_marker = None\nimport numpy as np\nprint('Original array elements:')\nprint(x)\nprint('Print array values with precision 3:')\nnp.set_printoptions(suppress=True)\nprint(x)	x	TBD0	ndarray