# LExecutor: DO NOT INSTRUMENT

#Source: https://stackoverflow.com/questions/65339753/typeerror-coercing-to-unicode-need-string-or-buffer-datetime-timedelta-found
from lexecutor.Runtime import _n_
from lexecutor.Runtime import _a_
from lexecutor.Runtime import _c_
from lexecutor.Runtime import _l_
try:
    from datetime import timedelta
    _l_(541583)

except ImportError:
    pass
try:
    import datetime
    _l_(541585)

except ImportError:
    pass

#notice the additional brackets to keep the 2 slots as two separate lists. So, 930-1230 is one slot, 1330-1400 is an another.

# HOURS AND APPOINTMENTS ARE GENERATED BY GATHERING DATA FROM DATABASE
hours = [[u'08:00', u'17:00']]
_l_(541586)
appointments = [(u'12:00', u'12:30'), (u'10:30', u'11:00')]
_l_(541587)

def get_slots(hours, appointments, duration=_c_(541589, _n_(541588, "timedelta", lambda: timedelta), hours=1)):
    _l_(541629)

    slots = _c_(541596, _n_(541590, "sorted", lambda: sorted), [(_n_(541591, "hours", lambda: hours)[0][0], _n_(541592, "hours", lambda: hours)[0][0])] + _n_(541593, "appointments", lambda: appointments) + [(_n_(541594, "hours", lambda: hours)[0][1], _n_(541595, "hours", lambda: hours)[0][1])])
    _l_(541597)
    for start, end in ((_n_(541598, "slots", lambda: slots)[_n_(541599, "i", lambda: i)][1], _n_(541600, "slots", lambda: slots)[_n_(541601, "i", lambda: i)+1][0]) for i in _c_(541606, _n_(541602, "range", lambda: range), _c_(541605, _n_(541603, "len", lambda: len), _n_(541604, "slots", lambda: slots))-1)):
        _l_(541628)

        assert _n_(541607, "start", lambda: start) <= _n_(541608, "end", lambda: end), "Cannot attend all appointments"
        _l_(541609)
        while _n_(541610, "start", lambda: start) + _n_(541611, "duration", lambda: duration) <= _n_(541612, "end", lambda: end):
            _l_(541625)

            json = []
            _l_(541613)
            _c_(541621, _a_(541615, _n_(541614, "json", lambda: json), "append"), _c_(541620, _a_(541616, "{:%H:%M} - {:%H:%M}", "format"), _n_(541617, "start", lambda: start), _n_(541618, "start", lambda: start) + _n_(541619, "duration", lambda: duration)))
            _l_(541622)
            start += _n_(541623, "duration", lambda: duration)
            _l_(541624)
        aux = _n_(541626, "json", lambda: json)
        _l_(541627)
        return aux

if _n_(541630, "__name__", lambda: __name__) == "__main__":
    _l_(541636)

    _c_(541634, _n_(541631, "get_slots", lambda: get_slots), _n_(541632, "hours", lambda: hours), _n_(541633, "appointments", lambda: appointments))
    _l_(541635)